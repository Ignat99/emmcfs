-- MySQL Administrator dump 1.4
--
-- ------------------------------------------------------
-- Server version	5.1.63-0ubuntu0.11.04.1


/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8 */;

/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;


--
-- Create schema emmcfs
--

CREATE DATABASE IF NOT EXISTS emmcfs;
USE emmcfs;

--
-- Definition of table `emmcfs`.`call_tree`
--

DROP TABLE IF EXISTS `emmcfs`.`call_tree`;
CREATE TABLE  `emmcfs`.`call_tree` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `d_id` int(10) unsigned NOT NULL,
  `i_id` int(10) unsigned NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=MyISAM AUTO_INCREMENT=141851 DEFAULT CHARSET=latin1;


--
-- Dumping data for table `emmcfs`.`call_tree`
--

/*!40000 ALTER TABLE `call_tree` DISABLE KEYS */;
LOCK TABLES `call_tree` WRITE;
INSERT INTO `emmcfs`.`call_tree` VALUES  (138179,391357,391356),
 (138180,391359,391358),
 (138181,391363,391362),
 (138182,391376,391371),
 (138183,391378,391377),
 (138184,391379,391377),
 (138185,391380,391377),
 (138186,391383,391384),
 (138187,391386,391382),
 (138188,391387,391383),
 (138189,391390,391385),
 (138190,391391,391386),
 (138191,391392,391387),
 (138192,391393,391388),
 (138193,391394,391389),
 (138194,391395,391390),
 (138195,391396,391391),
 (138196,391397,391392),
 (138197,391398,391393),
 (138198,391399,391394),
 (138199,391406,391392),
 (138200,391407,391392),
 (138201,391409,391391),
 (138202,391411,391390),
 (138203,391416,391386),
 (138204,391417,391387),
 (138205,391419,391375),
 (138206,391420,391377),
 (138207,391427,391381),
 (138208,391434,391435),
 (138209,391436,391437),
 (138210,391436,391438),
 (138211,391439,391440),
 (138212,391441,391442),
 (138213,391443,391439),
 (138214,391444,391441),
 (138215,391446,391447),
 (138216,391448,391449),
 (138217,391450,391449),
 (138218,391450,391451),
 (138219,391452,391451),
 (138220,391453,391454),
 (138221,391455,391456),
 (138222,391457,391458),
 (138223,391459,391454),
 (138224,391461,391453),
 (138225,391463,391375),
 (138226,391464,391381),
 (138227,391467,391427),
 (138228,391469,391470),
 (138229,391469,391471),
 (138230,391472,391470),
 (138231,391472,391471),
 (138232,391474,391475),
 (138233,391474,391476),
 (138234,391474,391477),
 (138235,391479,391480),
 (138236,391481,391482),
 (138237,391481,391483),
 (138238,391485,391486),
 (138239,391496,391497),
 (138240,391498,391497),
 (138241,391499,391498),
 (138242,391505,391498),
 (138243,391505,391506),
 (138244,391507,391508),
 (138245,391509,391508),
 (138246,391511,391509),
 (138247,391512,391513),
 (138248,391514,391513),
 (138249,391515,391514),
 (138250,391516,391440),
 (138251,391517,391440),
 (138252,391518,391442),
 (138253,391519,391520),
 (138254,391521,391522),
 (138255,391523,391524),
 (138256,391525,391526),
 (138257,391527,391528),
 (138258,391529,391530),
 (138259,391531,391532),
 (138260,391533,391534),
 (138261,391535,391536),
 (138262,391537,391538),
 (138263,391539,391540),
 (138264,391541,391542),
 (138265,391543,391544),
 (138266,391545,391546),
 (138267,391548,391549),
 (138268,391548,391550),
 (138269,391551,391552),
 (138270,391551,391550),
 (138271,391553,391547),
 (138272,391553,391554),
 (138273,391555,391354),
 (138274,391555,391547),
 (138275,391555,391550),
 (138276,391556,391356),
 (138277,391556,391550),
 (138278,391557,391362),
 (138279,391557,391547),
 (138280,391558,391365),
 (138281,391558,391550),
 (138282,391559,391517),
 (138283,391559,391550),
 (138284,391560,391550),
 (138285,391561,391519),
 (138286,391561,391550),
 (138287,391562,391550),
 (138288,391563,391523),
 (138289,391563,391550),
 (138290,391564,391525),
 (138291,391564,391550),
 (138292,391565,391527),
 (138293,391565,391550),
 (138294,391566,391529),
 (138295,391566,391550),
 (138296,391567,391550),
 (138297,391568,391550),
 (138298,391569,391550),
 (138299,391570,391550),
 (138300,391571,391550),
 (138301,391572,391550),
 (138302,391573,391550),
 (138303,391574,391550),
 (138304,391575,391576),
 (138305,391575,391550),
 (138306,391577,391578),
 (138307,391577,391550),
 (138308,391579,391580),
 (138309,391579,391550),
 (138310,391581,391582),
 (138311,391581,391550),
 (138312,391586,391560),
 (138313,391587,391560),
 (138314,391592,391593),
 (138315,391592,391594),
 (138316,391595,391550),
 (138317,391596,391356),
 (138318,391598,391550),
 (138319,391599,391362),
 (138320,391599,391550),
 (138321,391600,391550),
 (138322,391602,391550),
 (138323,391603,391525),
 (138324,391603,391550),
 (138325,391604,391529),
 (138326,391604,391550),
 (138327,391605,391531),
 (138328,391606,391533),
 (138329,391606,391550),
 (138330,391607,391535),
 (138331,391607,391550),
 (138332,391608,391550),
 (138333,391610,391611),
 (138334,391610,391612),
 (138335,391613,391614),
 (138336,391613,391615),
 (138337,391616,391614),
 (138338,391616,391617),
 (138339,391618,391614),
 (138340,391618,391619),
 (138341,391620,391614),
 (138342,391620,391621),
 (138343,391622,391614),
 (138344,391622,391623),
 (138345,391624,391614),
 (138346,391624,391625),
 (138347,391626,391614),
 (138348,391626,391627),
 (138349,391628,391629),
 (138350,391628,391630),
 (138351,391631,391629),
 (138352,391631,391632),
 (138353,391633,391629),
 (138354,391633,391634),
 (138355,391635,391629),
 (138356,391635,391636),
 (138357,391637,391614),
 (138358,391637,391638),
 (138359,391639,391640),
 (138360,391641,391614),
 (138361,391641,391642),
 (138362,391643,391644),
 (138363,391643,391645),
 (138364,391646,391644),
 (138365,391646,391645),
 (138366,391647,391614),
 (138367,391647,391648),
 (138368,391649,391650),
 (138369,391651,391614),
 (138370,391651,391652),
 (138371,391653,391654),
 (138372,391655,391614),
 (138373,391655,391656),
 (138374,391657,391649),
 (138375,391658,391651),
 (138376,391659,391655),
 (138377,391660,391614),
 (138378,391660,391661),
 (138379,391662,391663),
 (138380,391662,391664),
 (138381,391665,391666),
 (138382,391667,391614),
 (138383,391667,391668),
 (138384,391669,391670),
 (138385,391671,391614),
 (138386,391671,391672),
 (138387,391673,391674),
 (138388,391675,391614),
 (138389,391675,391676),
 (138390,391677,391678),
 (138391,391679,391614),
 (138392,391679,391680),
 (138393,391681,391682),
 (138394,391683,391614),
 (138395,391683,391684),
 (138396,391685,391686),
 (138397,391687,391614),
 (138398,391687,391688),
 (138399,391689,391690),
 (138400,391691,391614),
 (138401,391691,391692),
 (138402,391693,391694),
 (138403,391695,391696),
 (138404,391697,391698),
 (138405,391697,391699),
 (138406,391700,391701),
 (138407,391700,391702),
 (138408,391703,391629),
 (138409,391703,391704),
 (138410,391705,391629),
 (138411,391705,391706),
 (138412,391707,391629),
 (138413,391707,391708),
 (138414,391709,391629),
 (138415,391709,391710),
 (138416,391711,391629),
 (138417,391711,391712),
 (138418,391713,391629),
 (138419,391713,391714),
 (138420,391715,391629),
 (138421,391715,391716),
 (138422,391717,391629),
 (138423,391717,391718),
 (138424,391719,391629),
 (138425,391719,391720),
 (138426,391721,391629),
 (138427,391721,391722),
 (138428,391723,391629),
 (138429,391723,391724),
 (138430,391725,391629),
 (138431,391725,391726),
 (138432,391727,391629),
 (138433,391727,391728),
 (138434,391729,391629),
 (138435,391729,391730),
 (138436,391731,391629),
 (138437,391731,391732),
 (138438,391733,391629),
 (138439,391733,391734),
 (138440,391735,391629),
 (138441,391735,391736),
 (138442,391737,391629),
 (138443,391737,391738),
 (138444,391737,391739),
 (138445,391737,391513),
 (138446,391740,391629),
 (138447,391740,391741),
 (138448,391740,391739),
 (138449,391742,391743),
 (138450,391742,391497),
 (138451,391744,391629),
 (138452,391744,391745),
 (138453,391744,391739),
 (138454,391746,391747),
 (138455,391746,391513),
 (138456,391748,391629),
 (138457,391748,391749),
 (138458,391748,391750),
 (138459,391751,391629),
 (138460,391751,391752),
 (138461,391753,391629),
 (138462,391753,391754),
 (138463,391753,391755),
 (138464,391756,391629),
 (138465,391756,391757),
 (138466,391758,391759),
 (138467,391758,391508),
 (138468,391760,391629),
 (138469,391760,391761),
 (138470,391760,391739),
 (138471,391762,391763),
 (138472,391764,391629),
 (138473,391764,391765),
 (138474,391766,391767),
 (138475,391768,391629),
 (138476,391768,391769),
 (138477,391770,391614),
 (138478,391770,391771),
 (138479,391772,391614),
 (138480,391772,391773),
 (138481,391774,391629),
 (138482,391774,391775),
 (138483,391774,391776),
 (138484,391777,391629),
 (138485,391777,391775),
 (138486,391777,391778),
 (138487,391779,391629),
 (138488,391779,391780),
 (138489,391779,391781),
 (138490,391782,391783),
 (138491,391782,391784),
 (138492,391785,391783),
 (138493,391785,391786),
 (138494,391787,391783),
 (138495,391787,391788),
 (138496,391789,391783),
 (138497,391789,391790),
 (138498,391791,391783),
 (138499,391791,391792),
 (138500,391793,391783),
 (138501,391793,391794),
 (138502,391795,391796),
 (138503,391795,391739),
 (138504,391797,391644),
 (138505,391797,391798),
 (138506,391797,391739),
 (138507,391799,391800),
 (138508,391799,391739),
 (138509,391801,391644),
 (138510,391801,391802),
 (138511,391801,391739),
 (138512,391803,391795),
 (138513,391803,391799),
 (138514,391805,391795),
 (138515,391805,391804),
 (138516,391828,391829),
 (138517,391833,391834),
 (138518,391835,391834),
 (138519,391838,391839),
 (138520,391838,391840),
 (138521,391838,391841),
 (138522,391843,391635),
 (138523,391847,391848),
 (138524,391847,391849),
 (138525,391847,391850),
 (138526,391847,391834),
 (138527,391847,391851),
 (138528,391847,391852),
 (138529,391847,391653),
 (138530,391854,391855),
 (138531,391854,391637),
 (138532,391854,391641),
 (138533,391856,391855),
 (138534,391857,391616),
 (138535,391858,391616),
 (138536,391859,391857),
 (138537,391860,391857),
 (138538,391861,391857),
 (138539,391862,391857),
 (138540,391864,391863),
 (138541,391869,391870),
 (138542,391869,391871),
 (138543,391869,391649),
 (138544,391872,391870),
 (138545,391872,391871),
 (138546,391875,391874),
 (138547,391876,391870),
 (138548,391876,391877),
 (138549,391876,391370),
 (138550,391876,391834),
 (138551,391876,391878),
 (138552,391876,391879),
 (138553,391876,391880),
 (138554,391881,391879),
 (138555,391881,391880),
 (138556,391881,391882),
 (138557,391884,391885),
 (138558,391886,391885),
 (138559,391896,391895),
 (138560,391897,391885),
 (138561,391897,391898),
 (138562,391899,391885),
 (138563,391899,391900),
 (138564,391901,391884),
 (138565,391901,391834),
 (138566,391901,391897),
 (138567,391902,391884),
 (138568,391902,391834),
 (138569,391904,391488),
 (138570,391904,391905),
 (138571,391915,391910),
 (138572,391918,391912),
 (138573,391920,391909),
 (138574,391924,391884),
 (138575,391925,391886),
 (138576,391926,391890),
 (138577,391927,391891),
 (138578,391928,391887),
 (138579,391929,391888),
 (138580,391930,391889),
 (138581,391931,391892),
 (138582,391933,391894),
 (138583,391935,391896),
 (138584,391937,391896),
 (138585,391938,391901),
 (138586,391939,391940),
 (138587,391941,391939),
 (138588,391941,391942),
 (138589,391941,391943),
 (138590,391944,391354),
 (138591,391944,391943),
 (138592,391945,391943),
 (138593,391946,391362),
 (138594,391946,391943),
 (138595,391947,391365),
 (138596,391947,391943),
 (138597,391948,391369),
 (138598,391948,391943),
 (138599,391948,391370),
 (138600,391949,391873),
 (138601,391950,391951),
 (138602,391950,391952),
 (138603,391953,391952),
 (138604,391953,391951),
 (138605,391954,391953),
 (138606,391955,391953),
 (138607,391957,391956),
 (138608,391957,391952),
 (138609,391958,391952),
 (138610,391959,391958),
 (138611,391960,391956),
 (138612,391960,391952),
 (138613,391960,391951),
 (138614,391961,391954),
 (138615,391962,391956),
 (138616,391962,391952),
 (138617,391966,391964),
 (138618,391966,391962),
 (138619,391967,391964),
 (138620,391967,391952),
 (138621,391968,391952),
 (138622,391969,391964),
 (138623,391969,391967),
 (138624,391969,391968),
 (138625,391970,391951),
 (138626,391970,391952),
 (138627,391971,391964),
 (138628,391971,391970),
 (138629,391972,391970),
 (138630,391972,391952),
 (138631,391973,391970),
 (138632,391973,391950),
 (138633,391974,391964),
 (138634,391974,391970),
 (138635,391974,391952),
 (138636,391975,391976),
 (138637,391975,391977),
 (138638,391978,391977),
 (138639,391979,391980),
 (138640,391981,391976),
 (138641,391981,391977),
 (138642,391982,391981),
 (138643,391983,391978),
 (138644,391983,391981),
 (138645,391984,391976),
 (138646,391985,391977),
 (138647,391988,391980),
 (138648,391988,391977),
 (138649,391989,391990),
 (138650,391989,391991),
 (138651,392000,392001),
 (138652,392002,392001),
 (138653,392003,391864),
 (138654,392004,392005),
 (138655,392006,392005),
 (138656,392009,391890),
 (138657,392010,391887),
 (138658,392014,391787),
 (138659,392014,392015),
 (138660,392016,391789),
 (138661,392016,392015),
 (138662,392017,392015),
 (138663,392018,392015),
 (138664,392019,392017),
 (138665,392021,391799),
 (138666,392021,392014),
 (138667,392022,392023),
 (138668,392024,392014),
 (138669,392025,392018),
 (138670,392026,392018),
 (138671,392027,391801),
 (138672,392028,392018),
 (138673,392028,392029),
 (138674,392028,392030),
 (138675,392031,392023),
 (138676,392031,392017),
 (138677,392031,392029),
 (138678,392031,392030),
 (138679,392032,392009),
 (138680,392032,392033),
 (138681,392034,392033),
 (138682,392035,392007),
 (138683,392035,392033),
 (138684,392036,392033),
 (138685,392037,391799),
 (138686,392037,392033),
 (138687,392038,392033),
 (138688,392039,391803),
 (138689,392039,392008),
 (138690,392039,392033),
 (138691,392040,392033),
 (138692,392041,392023),
 (138693,392041,392008),
 (138694,392041,392033),
 (138695,392042,392008),
 (138696,392042,392033),
 (138697,392043,392012),
 (138698,392043,392033),
 (138699,392044,392033),
 (138700,392045,392011),
 (138701,392045,392033),
 (138702,392045,391804),
 (138703,392046,392033),
 (138704,392046,391801),
 (138705,392047,392033),
 (138706,392048,392033),
 (138707,392048,391804),
 (138708,392048,391797),
 (138709,392049,392033),
 (138710,392049,391801),
 (138711,392050,392012),
 (138712,392050,392033),
 (138713,392051,392052),
 (138714,392053,392054),
 (138715,392053,392052),
 (138716,392055,392056),
 (138717,392057,392058),
 (138718,392057,392052),
 (138719,392059,392060),
 (138720,392061,392025),
 (138721,392061,392052),
 (138722,392062,392063),
 (138723,392062,392052),
 (138724,392064,392027),
 (138725,392064,392052),
 (138726,392065,392066),
 (138727,392065,392052),
 (138728,392067,392068),
 (138729,392069,391799),
 (138730,392069,391801),
 (138731,392069,392058),
 (138732,392069,392052),
 (138733,392070,392052),
 (138734,392070,392015),
 (138735,392071,391782),
 (138736,392071,392052),
 (138737,392072,391785),
 (138738,392072,392052),
 (138739,392072,392015),
 (138740,392073,391782),
 (138741,392073,392015),
 (138742,392074,391782),
 (138743,392074,392052),
 (138744,392074,392015),
 (138745,392075,392076),
 (138746,392075,392077),
 (138747,392075,392078),
 (138748,392075,392079),
 (138749,392080,392076),
 (138750,392080,392077),
 (138751,392080,392078),
 (138752,392081,392082),
 (138753,392083,391954),
 (138754,392083,392084),
 (138755,392083,392082),
 (138756,392085,392076),
 (138757,392085,392083),
 (138758,392086,392084),
 (138759,392087,392086),
 (138760,392088,392084),
 (138761,392089,391369),
 (138762,392089,392090),
 (138763,392091,391362),
 (138764,392091,392092),
 (138765,392093,392053),
 (138766,392093,392094),
 (138767,392093,392095),
 (138768,392096,392095),
 (138769,392096,392094),
 (138770,392097,392095),
 (138771,392098,392095),
 (138772,392098,391834),
 (138773,392099,392095),
 (138774,392100,392101),
 (138775,392100,391834),
 (138776,392102,392101),
 (138777,392103,392101),
 (138778,392104,392101),
 (138779,392105,392106),
 (138780,392107,392106),
 (138781,392108,391517),
 (138782,392108,392106),
 (138783,392109,392106),
 (138784,392110,391362),
 (138785,392110,392106),
 (138786,392111,391519),
 (138787,392111,392106),
 (138788,392112,391521),
 (138789,392112,392106),
 (138790,392113,391523),
 (138791,392113,392106),
 (138792,392114,391525),
 (138793,392114,392106),
 (138794,392115,391527),
 (138795,392115,392106),
 (138796,392116,391529),
 (138797,392116,392106),
 (138798,392117,391531),
 (138799,392117,392106),
 (138800,392118,391533),
 (138801,392118,392106),
 (138802,392119,391535),
 (138803,392119,392106),
 (138804,392120,392106),
 (138805,392121,391539),
 (138806,392121,392106),
 (138807,392122,391541),
 (138808,392122,392106),
 (138809,392123,391543),
 (138810,392123,392106),
 (138811,392124,391549),
 (138812,392124,392106),
 (138813,392125,392106),
 (138814,392126,392109),
 (138815,392127,392128),
 (138816,392127,392106),
 (138817,392129,391576),
 (138818,392130,391578),
 (138819,392130,392106),
 (138820,392131,392106),
 (138821,392132,391582),
 (138822,392132,392106),
 (138823,392133,392134),
 (138824,392133,392106),
 (138825,392135,392136),
 (138826,392135,392106),
 (138827,392137,392138),
 (138828,392137,392106),
 (138829,392139,392140),
 (138830,392139,392106),
 (138831,392145,392146),
 (138832,392150,391354),
 (138833,392150,392151),
 (138834,392152,391362),
 (138835,392152,392151),
 (138836,392153,391356),
 (138837,392153,392151),
 (138838,392154,391369),
 (138839,392154,392151),
 (138840,392154,391370),
 (138841,392155,392151),
 (138842,392156,392151),
 (138843,392156,391370),
 (138844,392157,392158),
 (138845,392162,392161),
 (138846,392163,392164),
 (138847,392170,392164),
 (138848,392172,392173),
 (138849,392174,392175),
 (138850,392186,392187),
 (138851,392186,392188),
 (138852,392195,392196),
 (138853,392197,392198),
 (138854,392199,392197),
 (138855,392201,392202),
 (138856,392201,392203),
 (138857,392201,392197),
 (138858,392204,392202),
 (138859,392204,392203),
 (138860,392206,392202),
 (138861,392206,392203),
 (138862,392207,392208),
 (138863,392209,392210),
 (138864,392212,392213),
 (138865,392212,392214),
 (138866,392218,392219),
 (138867,392218,392220),
 (138868,392221,392222),
 (138869,392223,392224),
 (138870,392223,392225),
 (138871,392226,392227),
 (138872,392226,392228),
 (138873,392226,392229),
 (138874,392226,392230),
 (138875,392231,392227),
 (138876,392231,392228),
 (138877,392231,392229),
 (138878,392231,392230),
 (138879,392232,392233),
 (138880,392232,392234),
 (138881,392235,392236),
 (138882,392235,392237),
 (138883,392238,392237),
 (138884,392238,392236),
 (138885,392239,392237),
 (138886,392239,391354),
 (138887,392240,392241),
 (138888,392242,392243),
 (138889,392242,392244),
 (138890,392245,392243),
 (138891,392245,392244),
 (138892,392246,392247),
 (138893,392246,392248),
 (138894,392249,392250),
 (138895,392249,392243),
 (138896,392251,392250),
 (138897,392251,392244),
 (138898,392253,392243),
 (138899,392253,392244),
 (138900,392254,392248),
 (138901,392255,392243),
 (138902,392258,392259),
 (138903,392260,392261),
 (138904,392262,392260),
 (138905,392262,392243),
 (138906,392262,392244),
 (138907,392263,392260),
 (138908,392263,392247),
 (138909,392263,392248),
 (138910,392264,392261),
 (138911,392265,392266),
 (138912,392265,392261),
 (138913,392265,392247),
 (138914,392265,392248),
 (138915,392267,392266),
 (138916,392267,392261),
 (138917,392267,392247),
 (138918,392267,392248),
 (138919,392268,392261),
 (138920,392269,392261),
 (138921,392271,392261),
 (138922,392282,392283),
 (138923,392284,392285),
 (138924,392284,392286),
 (138925,392284,392283),
 (138926,392287,392285),
 (138927,392287,392286),
 (138928,392288,392289),
 (138929,392290,392291),
 (138930,392290,392292),
 (138931,392290,392030),
 (138932,392293,392294),
 (138933,392299,392300),
 (138934,392301,392302),
 (138935,392301,392303),
 (138936,392301,392304),
 (138937,392301,392305),
 (138938,392306,392307),
 (138939,392306,392303),
 (138940,392306,391356),
 (138941,392306,392304),
 (138942,392306,392305),
 (138943,392308,392309),
 (138944,392310,392309),
 (138945,392311,392312),
 (138946,392311,392313),
 (138947,392311,392314),
 (138948,392315,392316),
 (138949,392315,392317),
 (138950,392315,392318),
 (138951,392319,392318),
 (138952,392320,392319),
 (138953,392321,392322),
 (138954,392321,392323),
 (138955,392321,392324),
 (138956,392321,392325),
 (138957,392326,391840),
 (138958,392326,392322),
 (138959,392329,392330),
 (138960,392329,392331),
 (138961,392332,392331),
 (138962,392333,391779),
 (138963,392333,392329),
 (138964,392334,392335),
 (138965,392334,392336),
 (138966,392337,392338),
 (138967,392337,392339),
 (138968,392342,392329),
 (138969,392348,392349),
 (138970,392348,392350),
 (138971,392348,392351),
 (138972,392352,392349),
 (138973,392352,392353),
 (138974,392352,392354),
 (138975,392355,392349),
 (138976,392355,392356),
 (138977,392355,392357),
 (138978,392358,392349),
 (138979,392358,392359),
 (138980,392358,392360),
 (138981,392361,392349),
 (138982,392361,392362),
 (138983,392361,392363),
 (138984,392364,392349),
 (138985,392364,392365),
 (138986,392364,392366),
 (138987,392367,392352),
 (138988,392368,392348),
 (138989,392368,391369),
 (138990,392368,391370),
 (138991,392369,391884),
 (138992,392370,392371),
 (138993,392372,392348),
 (138994,392372,392349),
 (138995,392372,392373),
 (138996,392372,392374),
 (138997,392375,391369),
 (138998,392375,392372),
 (138999,392375,392376),
 (139000,392375,392237),
 (139001,392375,391370),
 (139002,392378,392379),
 (139003,392380,392379),
 (139004,392381,391369),
 (139005,392381,392237),
 (139006,392381,391370),
 (139007,392382,392376),
 (139008,392382,391370),
 (139009,392385,392386),
 (139010,392385,392387),
 (139011,392388,391369),
 (139012,392388,392376),
 (139013,392388,391370),
 (139014,392389,392385),
 (139015,392390,392388),
 (139016,392392,391840),
 (139017,392394,392395),
 (139018,392394,392396),
 (139019,392394,392397),
 (139020,392398,392395),
 (139021,392398,392396),
 (139022,392398,392397),
 (139023,392399,392400),
 (139024,392399,392401),
 (139025,392402,392395),
 (139026,392402,392403),
 (139027,392402,392404),
 (139028,392405,392406),
 (139029,392405,392407),
 (139030,392408,392395),
 (139031,392408,392409),
 (139032,392408,392410),
 (139033,392411,392412),
 (139034,392411,392413),
 (139035,392414,392395),
 (139036,392414,392415),
 (139037,392414,392416),
 (139038,392417,392418),
 (139039,392417,392419),
 (139040,392420,392395),
 (139041,392420,392421),
 (139042,392420,392422),
 (139043,392423,392424),
 (139044,392423,392425),
 (139045,392426,392395),
 (139046,392426,392427),
 (139047,392426,392428),
 (139048,392429,391571),
 (139049,392429,392430),
 (139050,392431,392348),
 (139051,392438,392432),
 (139052,392439,391834),
 (139053,392439,391878),
 (139054,392439,392440),
 (139055,392442,391834),
 (139056,392443,392444),
 (139057,392443,392445),
 (139058,392443,392442),
 (139059,392448,392449),
 (139060,392450,392432),
 (139061,392450,392448),
 (139062,392450,392443),
 (139063,392451,392448),
 (139064,392451,392443),
 (139065,392452,392453),
 (139066,392455,392454),
 (139067,392455,392456),
 (139068,392455,392457),
 (139069,392458,392459),
 (139070,392458,392457),
 (139071,392460,392461),
 (139072,392474,392475),
 (139073,392478,392479),
 (139074,392482,392483),
 (139075,392484,392371),
 (139076,392490,392476),
 (139077,392491,392477),
 (139078,392493,392474),
 (139079,392500,392479),
 (139080,392501,391834),
 (139081,392501,392502),
 (139082,392501,392503),
 (139083,392501,392495),
 (139084,392501,392504),
 (139085,392501,392505),
 (139086,392501,392506),
 (139087,392501,392507),
 (139088,392501,392497),
 (139089,392508,392509),
 (139090,392510,392511),
 (139091,392513,391834),
 (139092,392513,392514),
 (139093,392513,392503),
 (139094,392513,392505),
 (139095,392513,392506),
 (139096,392513,392507),
 (139097,392513,392497),
 (139098,392515,392509),
 (139099,392518,391834),
 (139100,392518,392519),
 (139101,392518,392495),
 (139102,392518,392504),
 (139103,392518,392505),
 (139104,392518,392507),
 (139105,392518,392497),
 (139106,392520,392509),
 (139107,392521,392511),
 (139108,392523,391834),
 (139109,392523,392524),
 (139110,392523,392503),
 (139111,392523,392505),
 (139112,392523,392507),
 (139113,392525,392509),
 (139114,392528,391834),
 (139115,392528,392529),
 (139116,392528,392503),
 (139117,392528,392505),
 (139118,392528,392507),
 (139119,392530,392509),
 (139120,392531,392511),
 (139121,392533,391834),
 (139122,392533,392534),
 (139123,392533,392503),
 (139124,392533,392505),
 (139125,392533,392507),
 (139126,392535,392509),
 (139127,392538,391834),
 (139128,392538,392539),
 (139129,392538,392503),
 (139130,392538,392505),
 (139131,392538,392507),
 (139132,392540,392509),
 (139133,392541,392511),
 (139134,392543,391834),
 (139135,392543,392544),
 (139136,392543,392503),
 (139137,392543,392505),
 (139138,392543,392507),
 (139139,392545,392509),
 (139140,392548,391834),
 (139141,392548,392549),
 (139142,392548,392503),
 (139143,392548,392505),
 (139144,392548,392507),
 (139145,392550,392509),
 (139146,392551,392511),
 (139147,392553,391834),
 (139148,392553,392554),
 (139149,392553,392503),
 (139150,392553,392505),
 (139151,392553,392507),
 (139152,392555,392509),
 (139153,392558,391834),
 (139154,392558,392559),
 (139155,392558,392503),
 (139156,392558,392505),
 (139157,392558,392507),
 (139158,392560,392509),
 (139159,392561,392511),
 (139160,392563,391834),
 (139161,392563,392564),
 (139162,392563,392503),
 (139163,392563,392505),
 (139164,392563,392507),
 (139165,392565,392509),
 (139166,392568,392569),
 (139167,392570,392568),
 (139168,392570,392571),
 (139169,392570,392572),
 (139170,392573,391445),
 (139171,392573,392574),
 (139172,392575,392573),
 (139173,392575,392570),
 (139174,392575,392576),
 (139175,392575,392501),
 (139176,392575,392577),
 (139177,392575,392578),
 (139178,392579,392578),
 (139179,392580,392575),
 (139180,392581,392578),
 (139181,392582,392583),
 (139182,392584,392583),
 (139183,392585,392575),
 (139184,392586,392580),
 (139185,392594,392591),
 (139186,392595,392592),
 (139187,392600,391951),
 (139188,392600,391952),
 (139189,392601,392600),
 (139190,392602,392600),
 (139191,392602,391952),
 (139192,392603,391956),
 (139193,392603,391952),
 (139194,392604,391981),
 (139195,392605,391951),
 (139196,392605,391952),
 (139197,392606,391952),
 (139198,392606,392607),
 (139199,392608,391981),
 (139200,392609,391977),
 (139201,392610,391980),
 (139202,392611,391977),
 (139203,392615,392613),
 (139204,392615,392614),
 (139205,392616,392617),
 (139206,392616,392608),
 (139207,392616,392618),
 (139208,392619,392053),
 (139209,392619,392620),
 (139210,392619,392621),
 (139211,392619,392616),
 (139212,392619,392061),
 (139213,392622,392623),
 (139214,392622,392624),
 (139215,392622,392625),
 (139216,392626,392627),
 (139217,392626,392628),
 (139218,392629,392630),
 (139219,392629,392628),
 (139220,392631,392632),
 (139221,392633,392617),
 (139222,392634,392633),
 (139223,392634,392635),
 (139224,392637,392053),
 (139225,392637,392621),
 (139226,392638,392053),
 (139227,392638,392635),
 (139228,392639,392640),
 (139229,392641,392642),
 (139230,392641,392643),
 (139231,392646,391834),
 (139232,392647,392644),
 (139233,392649,392650),
 (139234,392649,392651),
 (139235,392649,392652),
 (139236,392649,392653),
 (139237,392654,392655),
 (139238,392656,392657),
 (139239,392658,392659),
 (139240,392660,392661),
 (139241,392662,392663),
 (139242,392664,392665),
 (139243,392664,392666),
 (139244,392664,392667),
 (139245,392664,392668),
 (139246,392669,392665),
 (139247,392669,392666),
 (139248,392669,392670),
 (139249,392671,392672),
 (139250,392671,392673),
 (139251,392674,392672),
 (139252,392674,392673),
 (139253,392675,392673),
 (139254,392676,392673),
 (139255,392677,392673),
 (139256,392678,392675),
 (139257,392678,392677),
 (139258,392679,392672),
 (139259,392679,392673),
 (139260,392681,392673),
 (139261,392682,392675),
 (139262,392683,392673),
 (139263,392685,392686),
 (139264,392685,392687),
 (139265,392688,392689),
 (139266,392690,392689),
 (139267,392691,392692),
 (139268,392693,392692),
 (139269,392694,392695),
 (139270,392696,392685),
 (139271,392697,392685),
 (139272,392699,392700),
 (139273,392701,392702),
 (139274,392703,392704),
 (139275,392703,392705),
 (139276,392703,392706),
 (139277,392707,392697),
 (139278,392707,392704),
 (139279,392707,392705),
 (139280,392707,392706),
 (139281,392710,392711),
 (139282,392710,392712),
 (139283,392710,392713),
 (139284,392710,392714),
 (139285,392710,392715),
 (139286,392716,392714),
 (139287,392717,392718),
 (139288,392717,391964),
 (139289,392717,392719),
 (139290,392720,392721),
 (139291,392722,391978),
 (139292,392722,392723),
 (139293,392724,392725),
 (139294,392724,392726),
 (139295,392724,392102),
 (139296,392727,392725),
 (139297,392727,392726),
 (139298,392727,392104),
 (139299,392728,392729),
 (139300,392730,392729),
 (139301,392731,392732),
 (139302,392731,392733),
 (139303,392739,392740),
 (139304,392739,392741),
 (139305,392739,392742),
 (139306,392743,392740),
 (139307,392743,391442),
 (139308,392743,392742),
 (139309,392744,392745),
 (139310,392746,392745),
 (139311,392747,392748),
 (139312,392749,392747),
 (139313,392749,392744),
 (139314,392750,392748),
 (139315,392751,392748),
 (139316,392752,392750),
 (139317,392753,392754),
 (139318,392753,392755),
 (139319,392753,392061),
 (139320,392756,392757),
 (139321,392756,392758),
 (139322,392756,392759),
 (139323,392756,392642),
 (139324,392760,392761),
 (139325,392762,392761),
 (139326,392763,392761),
 (139327,392764,392765),
 (139328,392766,392767),
 (139329,392766,392768),
 (139330,392766,392764),
 (139331,392769,392766),
 (139332,392769,392770),
 (139333,392771,392772),
 (139334,392771,392766),
 (139335,392771,392773),
 (139336,392771,392726),
 (139337,392774,392772),
 (139338,392774,392775),
 (139339,392776,392777),
 (139340,392778,392779),
 (139341,392780,392765),
 (139342,392780,392781),
 (139343,392780,392782),
 (139344,392783,392765),
 (139345,392784,392785),
 (139346,392786,392643),
 (139347,392786,392787),
 (139348,392786,392785),
 (139349,392788,392789),
 (139350,392788,392790),
 (139351,392792,392793),
 (139352,392794,392621),
 (139353,392794,392787),
 (139354,392794,392790),
 (139355,392796,392797),
 (139356,392798,392797),
 (139357,392799,392797),
 (139358,392799,392800),
 (139359,392799,392801),
 (139360,392802,392803),
 (139361,392802,391900),
 (139362,392809,391515),
 (139363,392810,391515),
 (139364,392811,391515),
 (139365,392813,391515),
 (139366,392814,391515),
 (139367,392815,391515),
 (139368,392816,391515),
 (139369,392818,391760),
 (139370,392820,391512),
 (139371,392821,391512),
 (139372,392822,392821),
 (139373,392823,392821),
 (139374,392824,392821),
 (139375,392825,392821),
 (139376,392827,392820),
 (139377,392828,392820),
 (139378,392829,392820),
 (139379,392830,392821),
 (139380,392832,392821),
 (139381,392834,392835),
 (139382,392834,392836),
 (139383,392837,391737),
 (139384,392837,392834),
 (139385,392838,391758),
 (139386,392838,392834),
 (139387,392839,391740),
 (139388,392839,392834),
 (139389,392839,391737),
 (139390,392840,392835),
 (139391,392841,392842),
 (139392,392841,392843),
 (139393,392841,392844),
 (139394,392847,392848),
 (139395,392847,392849),
 (139396,392850,391487),
 (139397,392850,391514),
 (139398,392851,391487),
 (139399,392851,391509),
 (139400,392852,391487),
 (139401,392853,392849),
 (139402,392853,392848),
 (139403,392855,391506),
 (139404,392855,391742),
 (139405,392855,391635),
 (139406,392856,392849),
 (139407,392856,391900),
 (139408,392856,392848),
 (139409,392857,391513),
 (139410,392858,391513),
 (139411,392860,391515),
 (139412,392866,392863),
 (139413,392866,392865),
 (139414,392867,391511),
 (139415,392870,391510),
 (139416,392871,391744),
 (139417,392872,392871),
 (139418,392872,392864),
 (139419,392873,391506),
 (139420,392874,391510),
 (139421,392875,392853),
 (139422,392876,392847),
 (139423,392877,392856),
 (139424,392878,392875),
 (139425,392878,392877),
 (139426,392880,391442),
 (139427,392881,391500),
 (139428,392881,391834),
 (139429,392881,392882),
 (139430,392883,392869),
 (139431,392883,392874),
 (139432,392883,392884),
 (139433,392885,392862),
 (139434,392885,392886),
 (139435,392887,392877),
 (139436,392888,391753),
 (139437,392889,392890),
 (139438,392891,392890),
 (139439,392892,391369),
 (139440,392892,392893),
 (139441,392892,391370),
 (139442,392894,391362),
 (139443,392894,392893),
 (139444,392895,391369),
 (139445,392895,392893),
 (139446,392895,391370),
 (139447,392896,391354),
 (139448,392896,392893),
 (139449,392897,392893),
 (139450,392898,392893),
 (139451,392898,391370),
 (139452,392899,392893),
 (139453,392900,392893),
 (139454,392901,391365),
 (139455,392901,392893),
 (139456,392902,392893),
 (139457,392902,391370),
 (139458,392903,391354),
 (139459,392903,392893),
 (139460,392904,391356),
 (139461,392904,392893),
 (139462,392905,392893),
 (139463,392906,392893),
 (139464,392907,392893),
 (139465,392908,391369),
 (139466,392908,392893),
 (139467,392908,391370),
 (139468,392909,391354),
 (139469,392909,392893),
 (139470,392910,392893),
 (139471,392911,391358),
 (139472,392911,392893),
 (139473,392912,391369),
 (139474,392912,392893),
 (139475,392912,391370),
 (139476,392913,392893),
 (139477,392914,391356),
 (139478,392914,392893),
 (139479,392915,392893),
 (139480,392916,392893),
 (139481,392917,391369),
 (139482,392917,392893),
 (139483,392917,391370),
 (139484,392918,392893),
 (139485,392919,392893),
 (139486,392920,391369),
 (139487,392920,392893),
 (139488,392920,391370),
 (139489,392921,392893),
 (139490,392922,392893),
 (139491,392923,391369),
 (139492,392923,392893),
 (139493,392923,391370),
 (139494,392924,392893),
 (139495,392925,392893),
 (139496,392926,391362),
 (139497,392926,392893),
 (139498,392927,392893),
 (139499,392928,391369),
 (139500,392928,392893),
 (139501,392928,391370),
 (139502,392929,391354),
 (139503,392929,392893),
 (139504,392930,392893),
 (139505,392931,391369),
 (139506,392931,392893),
 (139507,392932,392893),
 (139508,392933,392893),
 (139509,392934,392893),
 (139510,392935,392893),
 (139511,392936,392893),
 (139512,392937,392893),
 (139513,392938,391358),
 (139514,392938,392893),
 (139515,392939,391369),
 (139516,392939,392893),
 (139517,392939,391370),
 (139518,392940,391355),
 (139519,392940,392893),
 (139520,392941,391358),
 (139521,392941,392893),
 (139522,392942,391369),
 (139523,392942,392893),
 (139524,392942,391370),
 (139525,392943,392893),
 (139526,392944,391358),
 (139527,392944,392893),
 (139528,392945,391369),
 (139529,392945,392893),
 (139530,392946,392893),
 (139531,392947,392893),
 (139532,392948,392893),
 (139533,392949,392893),
 (139534,392950,391369),
 (139535,392950,392893),
 (139536,392951,392893),
 (139537,392952,392893),
 (139538,392953,392893),
 (139539,392954,392893),
 (139540,392955,392893),
 (139541,392956,391354),
 (139542,392956,392893),
 (139543,392957,391356),
 (139544,392957,392893),
 (139545,392958,392893),
 (139546,392959,392893),
 (139547,392960,392893),
 (139548,392961,392893),
 (139549,392962,392893),
 (139550,392963,391355),
 (139551,392963,392893),
 (139552,392964,392893),
 (139553,392965,392893),
 (139554,392966,392893),
 (139555,392967,392893),
 (139556,392968,392893),
 (139557,392969,392893),
 (139558,392970,392893),
 (139559,392971,391365),
 (139560,392971,392893),
 (139561,392972,391369),
 (139562,392972,392893),
 (139563,392972,391370),
 (139564,392973,392893),
 (139565,392974,392893),
 (139566,392975,391369),
 (139567,392975,392893),
 (139568,392976,392893),
 (139569,392977,392893),
 (139570,392978,392893),
 (139571,392978,391370),
 (139572,392979,392893),
 (139573,392980,392893),
 (139574,392981,392893),
 (139575,392982,392893),
 (139576,392983,392893),
 (139577,392983,391370),
 (139578,392984,392893),
 (139579,392985,392893),
 (139580,392986,392893),
 (139581,392987,392893),
 (139582,392988,392893),
 (139583,392989,391366),
 (139584,392989,392893),
 (139585,392990,391369),
 (139586,392990,392893),
 (139587,392991,392893),
 (139588,392992,392893),
 (139589,392993,392893),
 (139590,392993,391370),
 (139591,392994,392893),
 (139592,392995,391356),
 (139593,392995,392893),
 (139594,392996,391362),
 (139595,392996,392893),
 (139596,392997,392893),
 (139597,392998,392893),
 (139598,392998,391370),
 (139599,392999,391355),
 (139600,392999,392893),
 (139601,393000,392893),
 (139602,393001,392893),
 (139603,393002,393003),
 (139604,393004,392893),
 (139605,393005,392893),
 (139606,393006,392893),
 (139607,393007,391369),
 (139608,393007,392893),
 (139609,393008,392893),
 (139610,393009,392893),
 (139611,393010,392893),
 (139612,393011,392893),
 (139613,393012,391884),
 (139614,393012,393013),
 (139615,393012,391892),
 (139616,393014,393013),
 (139617,393015,393016),
 (139618,393017,391834),
 (139619,393017,393007),
 (139620,393017,393018),
 (139621,393019,391884),
 (139622,393019,393017),
 (139623,393019,393013),
 (139624,393020,393017),
 (139625,393020,393013),
 (139626,393020,391890),
 (139627,393021,393022),
 (139628,393021,393017),
 (139629,393024,393025),
 (139630,393024,391951),
 (139631,393026,393025),
 (139632,393026,391951),
 (139633,393027,393025),
 (139634,393028,393025),
 (139635,393028,391952),
 (139636,393029,392893),
 (139637,393030,392893),
 (139638,393032,392893),
 (139639,393033,392444),
 (139640,393033,393034),
 (139641,393033,392203),
 (139642,393033,393029),
 (139643,393035,392893),
 (139644,393036,392893),
 (139645,393037,392893),
 (139646,393038,393035),
 (139647,393038,393036),
 (139648,393038,393037),
 (139649,393039,393040),
 (139650,393041,391486),
 (139651,393041,393040),
 (139652,393042,393040),
 (139653,393043,393040),
 (139654,393044,391928),
 (139655,393044,393045),
 (139656,393044,393046),
 (139657,393044,393047),
 (139658,393044,393048),
 (139659,393049,391924),
 (139660,393049,393047),
 (139661,393049,393048),
 (139662,393050,391924),
 (139663,393050,393045),
 (139664,393051,391551),
 (139665,393051,392386),
 (139666,393051,391839),
 (139667,393051,391840),
 (139668,393051,393052),
 (139669,393051,393053),
 (139670,393054,393046),
 (139671,393055,393022),
 (139672,393056,393057),
 (139673,393056,392917),
 (139674,393056,393058),
 (139675,393059,393057),
 (139676,393060,393057),
 (139677,393061,391834),
 (139678,393061,393062),
 (139679,393061,393063),
 (139680,393064,391886),
 (139681,393064,393065),
 (139682,393066,393065),
 (139683,393067,391884),
 (139684,393067,393065),
 (139685,393068,393069),
 (139686,393070,393071),
 (139687,393070,392890),
 (139688,393072,391925),
 (139689,393072,393073),
 (139690,393072,393074),
 (139691,393072,393075),
 (139692,393076,393073),
 (139693,393076,393074),
 (139694,393076,393075),
 (139695,393077,393075),
 (139696,393078,393075),
 (139697,393079,393080),
 (139698,393081,393082),
 (139699,393081,393079),
 (139700,393083,393084),
 (139701,393083,393085),
 (139702,393086,393079),
 (139703,393087,393084),
 (139704,393087,393085),
 (139705,393088,393081),
 (139706,393089,393090),
 (139707,393092,391834),
 (139708,393092,391500),
 (139709,393092,393091),
 (139710,393093,391834),
 (139711,393093,392869),
 (139712,393093,393094),
 (139713,393093,392872),
 (139714,393095,392051),
 (139715,393095,393096),
 (139716,393095,392015),
 (139717,393095,392001),
 (139718,393095,393097),
 (139719,393098,393057),
 (139720,393098,393099),
 (139721,393100,393101),
 (139722,393100,393102),
 (139723,393100,393103),
 (139724,393100,393104),
 (139725,393105,393106),
 (139726,393107,393108),
 (139727,393107,393109),
 (139728,393110,393071),
 (139729,393110,393109),
 (139730,393114,393115),
 (139731,393114,393116),
 (139732,393117,393114),
 (139733,393118,393119),
 (139734,393118,393120),
 (139735,393121,391479),
 (139736,393121,393119),
 (139737,393121,393122),
 (139738,393123,393119),
 (139739,393123,393124),
 (139740,393125,393126),
 (139741,393127,393128),
 (139742,393127,391834),
 (139743,393127,393129),
 (139744,393127,393130),
 (139745,393131,393132),
 (139746,393133,393132),
 (139747,393135,391486),
 (139748,393136,393135),
 (139749,393136,391486),
 (139750,393138,393139),
 (139751,393138,393140),
 (139752,393141,393138),
 (139753,393141,393142),
 (139754,393143,393142),
 (139755,393143,393144),
 (139756,393145,393146),
 (139757,393147,393142),
 (139758,393147,393139),
 (139759,393148,391834),
 (139760,393148,393149),
 (139761,393148,393150),
 (139762,393153,393154),
 (139763,393153,393155),
 (139764,393153,393156),
 (139765,393153,393157),
 (139766,393158,393159),
 (139767,393160,393159),
 (139768,393161,393162),
 (139769,393163,393162),
 (139770,393164,393162),
 (139771,393165,393162),
 (139772,393166,393167),
 (139773,393168,393169),
 (139774,393168,393170),
 (139775,393171,393170),
 (139776,393172,393173),
 (139777,393174,393173),
 (139778,393175,393169),
 (139779,393175,393176),
 (139780,393177,393176),
 (139781,393178,393179),
 (139782,393180,393179),
 (139783,393181,393182),
 (139784,393183,393182),
 (139785,393184,393182),
 (139786,393185,393186),
 (139787,393187,393188),
 (139788,393205,392893),
 (139789,393206,392893),
 (139790,393206,391898),
 (139791,393212,393213),
 (139792,393212,393214),
 (139793,393215,393214),
 (139794,393215,393213),
 (139795,393215,393216),
 (139796,393217,393213),
 (139797,393217,393216),
 (139798,393217,392271),
 (139799,393218,393214),
 (139800,393219,393216),
 (139801,393220,393214),
 (139802,393222,393214),
 (139803,393223,392261),
 (139804,393224,393214),
 (139805,393225,392261),
 (139806,393226,392261),
 (139807,393226,393213),
 (139808,393226,393227),
 (139809,393226,393228),
 (139810,393226,393229),
 (139811,393230,393227),
 (139812,393230,393228),
 (139813,393230,393229),
 (139814,393231,393232),
 (139815,393231,393233),
 (139816,393234,393235),
 (139817,393237,393238),
 (139818,393239,393237),
 (139819,393240,393241),
 (139820,393242,393241),
 (139821,393243,393241),
 (139822,393244,393245),
 (139823,393244,393227),
 (139824,393244,393228),
 (139825,393244,393229),
 (139826,393246,391834),
 (139827,393246,393247),
 (139828,393246,392503),
 (139829,393246,392495),
 (139830,393246,392504),
 (139831,393246,392505),
 (139832,393249,392511),
 (139833,393251,391834),
 (139834,393251,393252),
 (139835,393251,392503),
 (139836,393251,392495),
 (139837,393251,392505),
 (139838,393251,392507),
 (139839,393251,392497),
 (139840,393253,392509),
 (139841,393254,392511),
 (139842,393256,391834),
 (139843,393256,393257),
 (139844,393256,392503),
 (139845,393256,392505),
 (139846,393259,392511),
 (139847,393261,391834),
 (139848,393261,393262),
 (139849,393261,392505),
 (139850,393261,392507),
 (139851,393263,392509),
 (139852,393264,392511),
 (139853,393266,391834),
 (139854,393266,393267),
 (139855,393266,392503),
 (139856,393266,392507),
 (139857,393268,392509),
 (139858,393269,392511),
 (139859,393271,393272),
 (139860,393273,393274),
 (139861,393275,393276),
 (139862,393277,393276),
 (139863,393278,393279),
 (139864,393280,393281),
 (139865,393282,393281),
 (139866,393283,393284),
 (139867,393285,393284),
 (139868,393286,393266),
 (139869,393287,391362),
 (139870,393287,393288),
 (139871,393289,393288),
 (139872,393290,393288),
 (139873,393291,391362),
 (139874,393291,393288),
 (139875,393291,393292),
 (139876,393293,391362),
 (139877,393293,393288),
 (139878,393293,393294),
 (139879,393295,391362),
 (139880,393295,393296),
 (139881,393297,393298),
 (139882,393299,393297),
 (139883,393299,393290),
 (139884,393300,391891),
 (139885,393300,393298),
 (139886,393301,391891),
 (139887,393301,393298),
 (139888,393302,393303),
 (139889,393302,393304),
 (139890,393305,393306),
 (139891,393305,393304),
 (139892,393305,393307),
 (139893,393305,393308),
 (139894,393310,393311),
 (139895,393310,393312),
 (139896,393314,393311),
 (139897,393314,393312),
 (139898,393315,393312),
 (139899,393318,393319),
 (139900,393318,391442),
 (139901,393320,393311),
 (139902,393320,393312),
 (139903,393320,393321),
 (139904,393322,393311),
 (139905,393322,393312),
 (139906,393322,393321),
 (139907,393323,393312),
 (139908,393323,393321),
 (139909,393324,393312),
 (139910,393324,393321),
 (139911,393325,393321),
 (139912,393326,391440),
 (139913,393326,393312),
 (139914,393327,391440),
 (139915,393327,393312),
 (139916,393328,393312),
 (139917,393330,393312),
 (139918,393333,393326),
 (139919,393333,393334),
 (139920,393333,393335),
 (139921,393337,391803),
 (139922,393337,393338),
 (139923,393337,391797),
 (139924,393339,393340),
 (139925,393339,391804),
 (139926,393339,391797),
 (139927,393341,391834),
 (139928,393341,391948),
 (139929,393341,391939),
 (139930,393341,393342),
 (139931,393343,391950),
 (139932,393343,393344),
 (139933,393343,393345),
 (139934,393346,391950),
 (139935,393346,393344),
 (139936,393346,393345),
 (139937,393347,393348),
 (139938,393347,393349),
 (139939,393350,391964),
 (139940,393351,393350),
 (139941,393351,393349),
 (139942,393355,393356),
 (139943,393357,393358),
 (139944,393357,393359),
 (139945,393363,393364),
 (139946,393365,393366),
 (139947,393365,393361),
 (139948,393367,393368),
 (139949,393369,393370),
 (139950,393374,391890),
 (139951,393374,393375),
 (139952,393376,393371),
 (139953,393376,393374),
 (139954,393377,393371),
 (139955,393377,393375),
 (139956,393377,393378),
 (139957,393379,393380),
 (139958,393384,393385),
 (139959,393387,393388),
 (139960,393387,393389),
 (139961,393391,393392),
 (139962,393391,393393),
 (139963,393394,393393),
 (139964,393394,393392),
 (139965,393395,393393),
 (139966,393396,393397),
 (139967,393398,393399),
 (139968,393400,393401),
 (139969,393400,393402),
 (139970,393404,391834),
 (139971,393405,393404),
 (139972,393405,393406),
 (139973,393407,393408),
 (139974,393407,393409),
 (139975,393407,393410),
 (139976,393411,393412),
 (139977,393411,393408),
 (139978,393411,393409),
 (139979,393411,393410),
 (139980,393413,393412),
 (139981,393413,393409),
 (139982,393414,393412),
 (139983,393414,393410),
 (139984,393415,393416),
 (139985,393417,393418),
 (139986,393419,393418),
 (139987,393420,393421),
 (139988,393422,393423),
 (139989,393422,393411),
 (139990,393424,393418),
 (139991,393425,393418),
 (139992,393426,393418),
 (139993,393428,393424),
 (139994,393428,393429),
 (139995,393430,393408),
 (139996,393430,393409),
 (139997,393430,393410),
 (139998,393431,393416),
 (139999,393432,391892),
 (140000,393432,393433),
 (140001,393432,393434),
 (140002,393436,393437),
 (140003,393440,393441),
 (140004,393443,391890),
 (140005,393443,393444),
 (140006,393445,393446),
 (140007,393445,393447),
 (140008,393445,393448),
 (140009,393445,393449),
 (140010,393445,392065),
 (140011,393450,393451),
 (140012,393450,393452),
 (140013,393453,391485),
 (140014,393453,393454),
 (140015,393453,393455),
 (140016,393456,391485),
 (140017,393456,393455),
 (140018,393456,393453),
 (140019,393457,393458),
 (140020,393457,393459),
 (140021,393460,393461),
 (140022,393460,393462),
 (140023,393463,393416),
 (140024,393463,393421),
 (140025,393464,393421),
 (140026,393466,393467),
 (140027,393468,393469),
 (140028,393470,393471),
 (140029,393472,393471),
 (140030,393473,392065),
 (140031,393473,393447),
 (140032,393474,393475),
 (140033,393474,393476),
 (140034,393477,393475),
 (140035,393478,391485),
 (140036,393478,393475),
 (140037,393479,393475),
 (140038,393480,393475),
 (140039,393481,391946),
 (140040,393481,393475),
 (140041,393482,393475),
 (140042,393483,391948),
 (140043,393483,393475),
 (140044,393484,393479),
 (140045,393485,393480),
 (140046,393486,391834),
 (140047,393486,393483),
 (140048,393487,393479),
 (140049,393488,391834),
 (140050,393488,393483),
 (140051,393489,391834),
 (140052,393489,393315),
 (140053,393489,393490),
 (140054,393489,393316),
 (140055,393491,393489),
 (140056,393492,393489),
 (140057,393493,391834),
 (140058,393493,391939),
 (140059,393495,393496),
 (140060,393495,393497),
 (140061,393495,392052),
 (140062,393498,393475),
 (140063,393498,393499),
 (140064,393500,393501),
 (140065,393500,393502),
 (140066,393503,393501),
 (140067,393503,393504),
 (140068,393505,393501),
 (140069,393505,393506),
 (140070,393507,393501),
 (140071,393507,393508),
 (140072,393509,393461),
 (140073,393509,393510),
 (140074,393509,393511),
 (140075,393509,393512),
 (140076,393513,393461),
 (140077,393513,393510),
 (140078,393513,393511),
 (140079,393513,393514),
 (140080,393515,391485),
 (140081,393516,393513),
 (140082,393516,391485),
 (140083,393518,391797),
 (140084,393520,391369),
 (140085,393520,391870),
 (140086,393520,391877),
 (140087,393520,391711),
 (140088,393521,391709),
 (140089,393522,393523),
 (140090,393522,393524),
 (140091,393525,391486),
 (140092,393525,393526),
 (140093,393527,393528),
 (140094,393533,392450),
 (140095,393536,393535),
 (140096,393537,393535),
 (140097,393538,393537),
 (140098,393542,391834),
 (140099,393542,393543),
 (140100,393544,393543),
 (140101,393545,391356),
 (140102,393545,393543),
 (140103,393546,391834),
 (140104,393546,393543),
 (140105,393546,391370),
 (140106,393547,393543),
 (140107,393548,393543),
 (140108,393549,393132),
 (140109,393549,393007),
 (140110,393550,393132),
 (140111,393550,391834),
 (140112,393550,391901),
 (140113,393550,393010),
 (140114,393551,391897),
 (140115,393551,393013),
 (140116,393552,393019),
 (140117,393552,391886),
 (140118,393552,393013),
 (140119,393553,392450),
 (140120,393553,392432),
 (140121,393554,393553),
 (140122,393554,393547),
 (140123,393555,393553),
 (140124,393555,393547),
 (140125,393556,393557),
 (140126,393556,393547),
 (140127,393558,393559),
 (140128,393558,393560),
 (140129,393558,393561),
 (140130,393562,393559),
 (140131,393562,393560),
 (140132,393562,393563),
 (140133,393565,393541),
 (140134,393565,393566),
 (140135,393565,393109),
 (140136,393565,393567),
 (140137,393568,391355),
 (140138,393568,392893),
 (140139,393569,392893),
 (140140,393570,391363),
 (140141,393571,393570),
 (140142,393571,393572),
 (140143,393573,393574),
 (140144,393575,393570),
 (140145,393575,393576),
 (140146,393577,393578),
 (140147,393579,393580),
 (140148,393581,392959),
 (140149,393581,393580),
 (140150,393582,391834),
 (140151,393582,393115),
 (140152,393583,391834),
 (140153,393583,393119),
 (140154,393584,393568),
 (140155,393584,393585),
 (140156,393584,391834),
 (140157,393584,393569),
 (140158,393586,391354),
 (140159,393586,393587),
 (140160,393588,391356),
 (140161,393588,393587),
 (140162,393589,391369),
 (140163,393589,393587),
 (140164,393589,391370),
 (140165,393590,393587),
 (140166,393591,391356),
 (140167,393591,393587),
 (140168,393592,393587),
 (140169,393592,391370),
 (140170,393593,391362),
 (140171,393593,393587),
 (140172,393594,393587),
 (140173,393595,393587),
 (140174,393596,391356),
 (140175,393596,393587),
 (140176,393597,393587),
 (140177,393598,393587),
 (140178,393599,393587),
 (140179,393600,391369),
 (140180,393600,393587),
 (140181,393600,391370),
 (140182,393601,393587),
 (140183,393602,393587),
 (140184,393603,393587),
 (140185,393604,391356),
 (140186,393604,393587),
 (140187,393605,393587),
 (140188,393606,393587),
 (140189,393607,393587),
 (140190,393608,393587),
 (140191,393608,391370),
 (140192,393609,393587),
 (140193,393610,393587),
 (140194,393611,393587),
 (140195,393611,391370),
 (140196,393612,393587),
 (140197,393613,393587),
 (140198,393614,391369),
 (140199,393614,393587),
 (140200,393614,391370),
 (140201,393615,393587),
 (140202,393616,393587),
 (140203,393617,391369),
 (140204,393617,393587),
 (140205,393617,391370),
 (140206,393618,393587),
 (140207,393619,393587),
 (140208,393620,391369),
 (140209,393620,393587),
 (140210,393620,391370),
 (140211,393621,393587),
 (140212,393622,393587),
 (140213,393623,391369),
 (140214,393623,393587),
 (140215,393623,391370),
 (140216,393624,393587),
 (140217,393625,393587),
 (140218,393626,391369),
 (140219,393626,393587),
 (140220,393627,393020),
 (140221,393627,392946),
 (140222,393627,393062),
 (140223,393628,391890),
 (140224,393628,393629),
 (140225,393630,393629),
 (140226,393631,393632),
 (140227,393633,393634),
 (140228,393635,393636),
 (140229,393635,393637),
 (140230,393635,393638),
 (140231,393639,393640),
 (140232,393639,393637),
 (140233,393639,393638),
 (140234,393641,393642),
 (140235,393641,393637),
 (140236,393643,393644),
 (140237,393643,393637),
 (140238,393643,393638),
 (140239,393645,393603),
 (140240,393645,393646),
 (140241,393645,393637),
 (140242,393645,393647),
 (140243,393645,393648),
 (140244,393649,391480),
 (140245,393649,393597),
 (140246,393649,393650),
 (140247,393651,391363),
 (140248,393651,393587),
 (140249,393652,391480),
 (140250,393652,393651),
 (140251,393652,393653),
 (140252,393654,393655),
 (140253,393656,393657),
 (140254,393656,393658),
 (140255,393656,393659),
 (140256,393656,393660),
 (140257,393656,393661),
 (140258,393656,393662),
 (140259,393656,393663),
 (140260,393656,393664),
 (140261,393656,393665),
 (140262,393667,393668),
 (140263,393667,393669),
 (140264,393671,393672),
 (140265,393673,393671),
 (140266,393673,392767),
 (140267,393673,393674),
 (140268,393675,393673),
 (140269,393675,393676),
 (140270,393675,393677),
 (140271,393675,393678),
 (140272,393675,393671),
 (140273,393675,392767),
 (140274,393679,393680),
 (140275,393681,393674),
 (140276,393681,393676),
 (140277,393681,393682),
 (140278,393681,393683),
 (140279,393684,393674),
 (140280,393684,393676),
 (140281,393684,393685),
 (140282,393684,393686),
 (140283,393687,393674),
 (140284,393687,393688),
 (140285,393687,393689),
 (140286,393690,393691),
 (140287,393690,393692),
 (140288,393690,393693),
 (140289,393690,393694),
 (140290,393690,393695),
 (140291,393690,393696),
 (140292,393690,393697),
 (140293,393690,393698),
 (140294,393690,393699),
 (140295,393700,393701),
 (140296,393702,391369),
 (140297,393702,393701),
 (140298,393703,393701),
 (140299,393704,393705),
 (140300,393704,393693),
 (140301,393704,393694),
 (140302,393704,393695),
 (140303,393704,393696),
 (140304,393704,393706),
 (140305,393704,393707),
 (140306,393704,393708),
 (140307,393704,393709),
 (140308,393704,393710),
 (140309,393704,393711),
 (140310,393704,393712),
 (140311,393713,393693),
 (140312,393713,393694),
 (140313,393713,393714),
 (140314,393713,393705),
 (140315,393713,393695),
 (140316,393713,393709),
 (140317,393713,393706),
 (140318,393713,393707),
 (140319,393713,393708),
 (140320,393713,393711),
 (140321,393713,393712),
 (140322,393713,393710),
 (140323,393713,393715),
 (140324,393713,393692),
 (140325,393716,392243),
 (140326,393716,393717),
 (140327,393716,393718),
 (140328,393716,393719),
 (140329,393720,393721),
 (140330,393722,393723),
 (140331,393722,393724),
 (140332,393722,393547),
 (140333,393722,393000),
 (140334,393722,393725),
 (140335,393722,391834),
 (140336,393722,393605),
 (140337,393722,393726),
 (140338,393722,393727),
 (140339,393722,393728),
 (140340,393729,393730),
 (140341,393729,391834),
 (140342,393729,392575),
 (140343,393729,391831),
 (140344,393729,393731),
 (140345,393729,392585),
 (140346,393729,393722),
 (140347,393729,392782),
 (140348,393729,393732),
 (140349,393729,393733),
 (140350,393729,393734),
 (140351,393729,393735),
 (140352,393729,393736),
 (140353,393729,393737),
 (140354,393729,393738),
 (140355,393729,393739),
 (140356,393729,393740),
 (140357,393741,393729),
 (140358,393742,393743),
 (140359,393742,393744),
 (140360,393742,391834),
 (140361,393742,393745),
 (140362,393742,393746),
 (140363,393742,393747),
 (140364,393742,393748),
 (140365,393742,393729),
 (140366,393742,391833),
 (140367,393742,391356),
 (140368,393742,393749),
 (140369,393750,393732),
 (140370,393750,393734),
 (140371,393750,393751),
 (140372,393750,393731),
 (140373,393752,393743),
 (140374,393752,391834),
 (140375,393752,393750),
 (140376,393752,393746),
 (140377,393752,393747),
 (140378,393752,393748),
 (140379,393752,393745),
 (140380,393752,393744),
 (140381,393753,391834),
 (140382,393753,393754),
 (140383,393753,393755),
 (140384,393753,393756),
 (140385,393753,393757),
 (140386,393753,393758),
 (140387,393747,393731),
 (140388,393761,393762),
 (140389,393761,393763),
 (140390,393764,393765),
 (140391,393764,393766),
 (140392,393768,393769),
 (140393,393770,393769),
 (140394,393771,393772),
 (140395,393773,393774),
 (140396,393775,393776),
 (140397,393777,393778),
 (140398,393779,393780),
 (140399,393781,393780),
 (140400,392607,393782),
 (140401,393783,393784),
 (140402,393785,393748),
 (140403,393785,393732),
 (140404,393785,393786),
 (140405,393785,393730),
 (140406,393785,393734),
 (140407,393785,393731),
 (140408,393785,393747),
 (140409,393787,393748),
 (140410,393787,393786),
 (140411,393787,391834),
 (140412,393787,393734),
 (140413,393787,393731),
 (140414,393787,393747),
 (140415,393788,393748),
 (140416,393788,393732),
 (140417,393788,393786),
 (140418,393789,393790),
 (140419,393791,393734),
 (140420,393791,393731),
 (140421,393791,393790),
 (140422,393791,393747),
 (140423,393792,393735),
 (140424,393792,393721),
 (140425,393793,393792),
 (140426,393794,393792),
 (140427,393795,391834),
 (140428,393795,393796),
 (140429,393795,393794),
 (140430,393797,393795),
 (140431,393798,393799),
 (140432,393800,391834),
 (140433,393800,393796),
 (140434,393800,393795),
 (140435,393800,393798),
 (140436,393800,391833),
 (140437,393800,393750),
 (140438,393801,391834),
 (140439,393801,393802),
 (140440,393801,393741),
 (140441,393803,393804),
 (140442,393803,393805),
 (140443,393806,393804),
 (140444,393806,393735),
 (140445,393806,393796),
 (140446,393806,393807),
 (140447,393806,393808),
 (140448,393806,393799),
 (140449,393806,393809),
 (140450,393806,391442),
 (140451,393806,393810),
 (140452,393806,393793),
 (140453,393811,393812),
 (140454,393813,393732),
 (140455,393813,393799),
 (140456,393813,393808),
 (140457,393813,393809),
 (140458,393813,393741),
 (140459,393813,393735),
 (140460,393813,393747),
 (140461,393813,393750),
 (140462,393814,393732),
 (140463,393814,393806),
 (140464,393814,393813),
 (140465,393814,393735),
 (140466,393814,393804),
 (140467,393814,393795),
 (140468,393814,393805),
 (140469,393814,393811),
 (140470,393815,393742),
 (140471,393815,393811),
 (140472,393815,393802),
 (140473,393815,393785),
 (140474,393815,393791),
 (140475,393815,393747),
 (140476,393815,393750),
 (140477,393816,393795),
 (140478,393816,393740),
 (140479,393816,392575),
 (140480,393816,393736),
 (140481,393817,393812),
 (140482,393817,393747),
 (140483,393818,391834),
 (140484,393818,393819),
 (140485,393818,393820),
 (140486,393818,393821),
 (140487,393818,393822),
 (140488,393818,391832),
 (140489,393818,393750),
 (140490,393823,393818),
 (140491,393824,392575),
 (140492,393824,393818),
 (140493,393824,391833),
 (140494,393824,391832),
 (140495,393824,393819),
 (140496,393824,393820),
 (140497,393824,391442),
 (140498,393824,393821),
 (140499,393824,393822),
 (140500,393824,393669),
 (140501,393824,393742),
 (140502,393824,393752),
 (140503,393824,393811),
 (140504,393825,393824),
 (140505,393826,393824),
 (140506,393826,393826),
 (140507,393826,391833),
 (140508,393826,391832),
 (140509,393827,393804),
 (140510,393827,393809),
 (140511,393827,393750),
 (140512,393827,392575),
 (140513,393827,393805),
 (140514,393827,393828),
 (140515,393829,393818),
 (140516,393829,393741),
 (140517,393829,393804),
 (140518,393829,393827),
 (140519,393829,393799),
 (140520,393828,391834),
 (140521,393828,393750),
 (140522,393828,393820),
 (140523,393828,393796),
 (140524,393828,393741),
 (140525,393828,393747),
 (140526,393828,393752),
 (140527,393828,393826),
 (140528,393828,391833),
 (140529,393828,393829),
 (140530,393830,393828),
 (140531,393831,393832),
 (140532,393831,393833),
 (140533,393834,393835),
 (140534,393834,393836),
 (140535,393837,393831),
 (140536,393838,393839),
 (140537,393838,393840),
 (140538,393841,393842),
 (140539,393841,393843),
 (140540,393841,393844),
 (140541,393841,393845),
 (140542,393846,391834),
 (140543,393846,393847),
 (140544,393846,393842),
 (140545,393846,393843),
 (140546,393846,393845),
 (140547,393846,393848),
 (140548,393846,393844),
 (140549,393846,393849),
 (140550,393846,393668),
 (140551,393846,393850),
 (140552,393846,393841),
 (140553,393851,391831),
 (140554,393852,393845),
 (140555,393852,393848),
 (140556,393852,393853),
 (140557,393855,393854),
 (140558,393855,392765),
 (140559,393855,393856),
 (140560,393855,393857),
 (140561,393855,393858),
 (140562,393855,393859),
 (140563,393855,393860),
 (140564,393855,393861),
 (140565,393855,393862),
 (140566,393855,393863),
 (140567,393855,393864),
 (140568,393855,392748),
 (140569,393855,393865),
 (140570,393855,393866),
 (140571,393855,393867),
 (140572,393855,393868),
 (140573,393855,393869),
 (140574,393855,393870),
 (140575,393855,393871),
 (140576,393855,393872),
 (140577,393855,393873),
 (140578,393855,393874),
 (140579,393855,393875),
 (140580,393876,391834),
 (140581,393876,392790),
 (140582,393876,393877),
 (140583,393876,391833),
 (140584,393876,391832),
 (140585,393876,393855),
 (140586,393876,393878),
 (140587,393876,393825),
 (140588,393876,393879),
 (140589,393880,392585),
 (140590,393880,391831),
 (140591,393880,392790),
 (140592,393880,393823),
 (140593,393880,391833),
 (140594,393880,391834),
 (140595,393880,393796),
 (140596,393880,393800),
 (140597,393880,393750),
 (140598,393881,391480),
 (140599,393881,392089),
 (140600,393881,393882),
 (140601,393881,393883),
 (140602,393884,391480),
 (140603,393884,393882),
 (140604,393884,393883),
 (140605,393885,393886),
 (140606,393887,393888),
 (140607,393887,393889),
 (140608,393887,393890),
 (140609,393891,393892),
 (140610,393891,393893),
 (140611,393891,392569),
 (140612,393894,393891),
 (140613,393895,391803),
 (140614,393895,393894),
 (140615,393895,391804),
 (140616,393895,391797),
 (140617,393896,393891),
 (140618,393897,391803),
 (140619,393897,393896),
 (140620,393897,391797),
 (140621,393898,393892),
 (140622,393898,393893),
 (140623,393899,393893),
 (140624,393900,391803),
 (140625,393900,393899),
 (140626,393900,391797),
 (140627,393901,392569),
 (140628,393901,391464),
 (140629,393902,393903),
 (140630,393902,393904),
 (140631,393902,393905),
 (140632,393902,393906),
 (140633,393907,393902),
 (140634,393908,393902),
 (140635,393909,393902),
 (140636,393910,393911),
 (140637,393912,393911),
 (140638,393913,393911),
 (140639,393914,393911),
 (140640,393915,393916),
 (140641,393917,393910),
 (140642,393917,393918),
 (140643,393919,393918),
 (140644,393920,393914),
 (140645,393920,393918),
 (140646,393921,393922),
 (140647,393923,393924),
 (140648,393923,393925),
 (140649,393926,393923),
 (140650,393926,393918),
 (140651,393927,393928),
 (140652,393927,393929),
 (140653,393927,393930),
 (140654,393931,393927),
 (140655,393932,393933),
 (140656,393932,393934),
 (140657,393932,393935),
 (140658,393932,393936),
 (140659,393932,393937),
 (140660,393932,393938),
 (140661,393932,393939),
 (140662,393932,393940),
 (140663,393932,393941),
 (140664,393932,393942),
 (140665,393932,393943),
 (140666,393932,393944),
 (140667,393932,393945),
 (140668,393932,393946),
 (140669,393932,393947),
 (140670,393932,393948),
 (140671,393932,393949),
 (140672,393932,393950),
 (140673,393932,393951),
 (140674,393932,393952),
 (140675,393932,393953),
 (140676,393954,393955),
 (140677,393956,393957),
 (140678,393956,393958),
 (140679,393960,391442),
 (140680,393963,393957),
 (140681,393963,393958),
 (140682,393963,393943),
 (140683,393964,393963),
 (140684,393965,393954),
 (140685,393966,393964),
 (140686,393973,393974),
 (140687,393973,393975),
 (140688,393976,391679),
 (140689,393977,393978),
 (140690,393977,393979),
 (140691,393980,393977),
 (140692,393981,393935),
 (140693,393981,393937),
 (140694,393981,393952),
 (140695,393982,393935),
 (140696,393982,393952),
 (140697,393983,393945),
 (140698,393984,393945),
 (140699,393985,393956),
 (140700,393985,391693),
 (140701,393985,393986),
 (140702,393987,393985),
 (140703,393988,393989),
 (140704,393988,391370),
 (140705,393988,391354),
 (140706,393988,393990),
 (140707,393991,393988),
 (140708,393995,393985),
 (140709,393996,393985),
 (140710,393997,393985),
 (140711,394001,394002),
 (140712,394001,392503),
 (140713,394001,392495),
 (140714,394001,392504),
 (140715,394001,392505),
 (140716,394001,392506),
 (140717,394001,392507),
 (140718,394001,392497),
 (140719,394003,392509),
 (140720,394004,392511),
 (140721,394006,394007),
 (140722,394006,392503),
 (140723,394006,392495),
 (140724,394006,392504),
 (140725,394008,392509),
 (140726,394009,392511),
 (140727,394011,394012),
 (140728,394011,392503),
 (140729,394011,392505),
 (140730,394011,392507),
 (140731,394013,392509),
 (140732,394014,392511),
 (140733,394016,394017),
 (140734,394016,392503),
 (140735,394016,392505),
 (140736,394018,392509),
 (140737,394019,392511),
 (140738,394021,394022);
INSERT INTO `emmcfs`.`call_tree` VALUES  (140739,394021,392503),
 (140740,394021,392505),
 (140741,394021,392507),
 (140742,394023,392509),
 (140743,394024,392511),
 (140744,394026,394027),
 (140745,394028,394029),
 (140746,394028,394030),
 (140747,394031,394032),
 (140748,394031,394033),
 (140749,394034,391486),
 (140750,394034,393040),
 (140751,394034,394011),
 (140752,394035,394026),
 (140753,394035,394011),
 (140754,394036,394037),
 (140755,394036,394038),
 (140756,394039,394037),
 (140757,394039,394038),
 (140758,394040,394038),
 (140759,394040,394041),
 (140760,394042,394043),
 (140761,394042,392452),
 (140762,394042,394044),
 (140763,394047,394044),
 (140764,394047,394048),
 (140765,394049,394044),
 (140766,394049,394048),
 (140767,394050,394044),
 (140768,394050,394051),
 (140769,394052,394037),
 (140770,394052,394053),
 (140771,394052,394054),
 (140772,394055,394037),
 (140773,394055,394053),
 (140774,394055,394054),
 (140775,394056,394054),
 (140776,394057,394058),
 (140777,394057,394059),
 (140778,394060,394061),
 (140779,394060,394059),
 (140780,394062,394063),
 (140781,394064,394065),
 (140782,394066,394067),
 (140783,394069,394070),
 (140784,394071,394072),
 (140785,394073,394074),
 (140786,394073,394075),
 (140787,394076,394073),
 (140788,394077,394078),
 (140789,394077,394079),
 (140790,394077,394080),
 (140791,394081,394079),
 (140792,394081,394080),
 (140793,394082,391834),
 (140794,394082,394083),
 (140795,394084,394085),
 (140796,394084,391840),
 (140797,394086,394087),
 (140798,394086,394088),
 (140799,394089,394090),
 (140800,394089,394087),
 (140801,394091,394092),
 (140802,394091,394093),
 (140803,394091,394094),
 (140804,394091,394068),
 (140805,394095,394092),
 (140806,394095,394093),
 (140807,394095,394094),
 (140808,394095,394068),
 (140809,394097,394098),
 (140810,394099,393740),
 (140811,394099,394100),
 (140812,394101,394102),
 (140813,394103,394104),
 (140814,394103,394105),
 (140815,394106,394107),
 (140816,394108,394078),
 (140817,394108,394107),
 (140818,394109,394110),
 (140819,394109,394111),
 (140820,394109,394112),
 (140821,394113,394110),
 (140822,394113,394114),
 (140823,394113,394115),
 (140824,394116,394110),
 (140825,394116,394117),
 (140826,394116,394118),
 (140827,394119,391901),
 (140828,394119,394120),
 (140829,394119,391890),
 (140830,394119,394121),
 (140831,394122,394123),
 (140832,394124,394123),
 (140833,394125,394126),
 (140834,394127,394128),
 (140835,394141,394131),
 (140836,394142,394137),
 (140837,394145,394143),
 (140838,394146,394147),
 (140839,394148,391440),
 (140840,394149,391442),
 (140841,394150,391442),
 (140842,394154,394152),
 (140843,394155,394153),
 (140844,394160,394158),
 (140845,394161,394159),
 (140846,394166,394164),
 (140847,394167,394165),
 (140848,394170,394171),
 (140849,394170,394172),
 (140850,394170,394173),
 (140851,394170,394174),
 (140852,394170,394175),
 (140853,394170,394176),
 (140854,394177,394171),
 (140855,394177,394178),
 (140856,394177,394172),
 (140857,394177,394173),
 (140858,394177,394174),
 (140859,394177,394179),
 (140860,394177,394180),
 (140861,394181,394173),
 (140862,394181,394182),
 (140863,394184,394185),
 (140864,394186,391803),
 (140865,394186,394187),
 (140866,394186,394179),
 (140867,394186,394180),
 (140868,394189,394186),
 (140869,394189,394172),
 (140870,394189,394173),
 (140871,394191,394192),
 (140872,394193,394192),
 (140873,394193,394194),
 (140874,394195,394196),
 (140875,394197,394196),
 (140876,394197,394192),
 (140877,394198,394196),
 (140878,394198,394192),
 (140879,394198,394194),
 (140880,394199,394196),
 (140881,394200,394196),
 (140882,394202,394196),
 (140883,394203,394194),
 (140884,394204,394205),
 (140885,394206,394207),
 (140886,394208,394209),
 (140887,394210,394206),
 (140888,394210,391834),
 (140889,394210,391878),
 (140890,394210,391369),
 (140891,394210,394209),
 (140892,394210,391370),
 (140893,394210,391358),
 (140894,394211,391834),
 (140895,394211,394209),
 (140896,394211,391355),
 (140897,394212,394206),
 (140898,394212,391834),
 (140899,394212,391355),
 (140900,394212,394209),
 (140901,394213,394209),
 (140902,394214,394215),
 (140903,394214,394216),
 (140904,394217,394206),
 (140905,394217,394209),
 (140906,394218,394219),
 (140907,394218,394220),
 (140908,394222,394221),
 (140909,394222,394223),
 (140910,394224,394209),
 (140911,394224,391370),
 (140912,394228,394229),
 (140913,394228,394230),
 (140914,394231,394232),
 (140915,394231,394230),
 (140916,394233,394234),
 (140917,394233,394235),
 (140918,394236,394237),
 (140919,394238,394239),
 (140920,394240,394241),
 (140921,394240,394170),
 (140922,394242,394238),
 (140923,394243,394240),
 (140924,394244,391834),
 (140925,394244,394245),
 (140926,394244,394246),
 (140927,394244,394247),
 (140928,394248,394249),
 (140929,394250,394251),
 (140930,394250,393637),
 (140931,394250,393724),
 (140932,394252,394219),
 (140933,394252,394253),
 (140934,394254,394255),
 (140935,394256,394219),
 (140936,394256,394257),
 (140937,394258,394259),
 (140938,394260,394219),
 (140939,394260,394261),
 (140940,394262,394263),
 (140941,394264,394265),
 (140942,394266,394264),
 (140943,394266,394233),
 (140944,394267,394219),
 (140945,394267,394268),
 (140946,394269,394267),
 (140947,394269,394233),
 (140948,394270,394271),
 (140949,394272,394270),
 (140950,394273,394219),
 (140951,394273,394274),
 (140952,394275,394273),
 (140953,394275,394233),
 (140954,394276,394219),
 (140955,394276,394277),
 (140956,394276,394278),
 (140957,394279,394271),
 (140958,394279,394278),
 (140959,394280,394281),
 (140960,394280,394104),
 (140961,394280,394282),
 (140962,394280,394278),
 (140963,394283,394284),
 (140964,394283,394285),
 (140965,394286,394287),
 (140966,394286,394285),
 (140967,394288,394219),
 (140968,394288,394289),
 (140969,394290,394288),
 (140970,394290,394233),
 (140971,394291,394292),
 (140972,394293,394291),
 (140973,394293,394294),
 (140974,394296,394297),
 (140975,394298,393738),
 (140976,394298,394299),
 (140977,394309,394234),
 (140978,394309,394310),
 (140979,394311,394310),
 (140980,394312,394313),
 (140981,394314,394219),
 (140982,394314,394315),
 (140983,394316,394315),
 (140984,394317,391369),
 (140985,394317,394318),
 (140986,394317,391370),
 (140987,394317,394171),
 (140988,394317,394179),
 (140989,394317,393057),
 (140990,394317,393543),
 (140991,394317,393727),
 (140992,394317,394319),
 (140993,394317,394320),
 (140994,394317,394321),
 (140995,394317,394322),
 (140996,394323,394318),
 (140997,394323,391370),
 (140998,394323,394171),
 (140999,394323,392893),
 (141000,394323,392896),
 (141001,394323,393057),
 (141002,394323,391354),
 (141003,394323,394320),
 (141004,394323,394321),
 (141005,394323,394322),
 (141006,394324,394318),
 (141007,394324,394179),
 (141008,394324,391874),
 (141009,394324,392893),
 (141010,394324,393000),
 (141011,394324,393001),
 (141012,394324,392896),
 (141013,394324,394322),
 (141014,394325,394326),
 (141015,394325,394327),
 (141016,394325,394328),
 (141017,394325,394329),
 (141018,394330,394325),
 (141019,394330,394331),
 (141020,394330,394332),
 (141021,394330,394333),
 (141022,394330,393699),
 (141023,394334,394325),
 (141024,394334,394331),
 (141025,394334,394335),
 (141026,394334,394333),
 (141027,394334,394322),
 (141028,394334,394336),
 (141029,394334,394337),
 (141030,394338,392311),
 (141031,394338,394335),
 (141032,394338,393699),
 (141033,394338,394322),
 (141034,394338,394320),
 (141035,394338,394336),
 (141036,394338,394337),
 (141037,394339,392311),
 (141038,394339,394325),
 (141039,394339,394340),
 (141040,394339,394333),
 (141041,394339,393699),
 (141042,394339,394337),
 (141043,394342,394343),
 (141044,394342,394344),
 (141045,394345,394346),
 (141046,394345,392767),
 (141047,394345,393672),
 (141048,394345,392585),
 (141049,394345,394347),
 (141050,394345,394348),
 (141051,394345,394349),
 (141052,394345,393669),
 (141053,394345,393805),
 (141054,394345,394343),
 (141055,394345,392790),
 (141056,394345,394344),
 (141057,394345,394350),
 (141058,394345,393709),
 (141059,394345,393711),
 (141060,394345,393697),
 (141061,394345,394351),
 (141062,394345,394352),
 (141063,394345,394353),
 (141064,394345,393825),
 (141065,394345,394354),
 (141066,394355,394346),
 (141067,394355,393672),
 (141068,394355,392585),
 (141069,394355,391831),
 (141070,394355,393823),
 (141071,394355,394352),
 (141072,394355,394348),
 (141073,394356,394346),
 (141074,394356,392790),
 (141075,394356,394355),
 (141076,394356,393797),
 (141077,394356,394350),
 (141078,394356,393709),
 (141079,394356,394344),
 (141080,394356,393711),
 (141081,394356,393712),
 (141082,394357,392767),
 (141083,394357,394355),
 (141084,394357,393797),
 (141085,394357,394347),
 (141086,394357,393709),
 (141087,394357,393712),
 (141088,394357,394358),
 (141089,394357,394359),
 (141090,394357,393747),
 (141091,394357,393750),
 (141092,394357,394360),
 (141093,394361,393670),
 (141094,394361,394362),
 (141095,394361,392767),
 (141096,394361,392765),
 (141097,394361,392585),
 (141098,394361,394352),
 (141099,394361,394353),
 (141100,394361,393750),
 (141101,394361,393797),
 (141102,394361,394347),
 (141103,394361,394344),
 (141104,394361,394363),
 (141105,394361,394359),
 (141106,394361,393709),
 (141107,394361,393711),
 (141108,394361,393830),
 (141109,394361,394364),
 (141110,394361,393710),
 (141111,394361,392744),
 (141112,394365,394366),
 (141113,394365,394367),
 (141114,394368,394369),
 (141115,394368,394367),
 (141116,394381,392583),
 (141117,394381,394378),
 (141118,394381,392187),
 (141119,394381,393699),
 (141120,394381,391831),
 (141121,394381,394382),
 (141122,394381,394383),
 (141123,394381,394384),
 (141124,394381,394385),
 (141125,394386,394387),
 (141126,394388,394381),
 (141127,394388,394383),
 (141128,394388,394384),
 (141129,394388,394382),
 (141130,394388,394389),
 (141131,394388,394390),
 (141132,394388,394391),
 (141133,394388,394392),
 (141134,394393,394382),
 (141135,394393,394383),
 (141136,394393,393659),
 (141137,394393,393771),
 (141138,394393,394389),
 (141139,394393,394390),
 (141140,394393,393773),
 (141141,394393,394391),
 (141142,394393,394392),
 (141143,394393,393657),
 (141144,394393,394388),
 (141145,394394,391834),
 (141146,394394,393657),
 (141147,394394,394392),
 (141148,394394,394393),
 (141149,394396,394392),
 (141150,394397,394392),
 (141151,394397,393658),
 (141152,394398,394392),
 (141153,394399,394392),
 (141154,394400,393812),
 (141155,394401,393658),
 (141156,394401,393659),
 (141157,394401,393771),
 (141158,394401,394391),
 (141159,394401,394392),
 (141160,394401,394398),
 (141161,394401,394397),
 (141162,394401,394400),
 (141163,394401,393661),
 (141164,394401,394395),
 (141165,394401,394396),
 (141166,394401,394399),
 (141167,394402,394392),
 (141168,394403,394392),
 (141169,394404,394405),
 (141170,394404,394406),
 (141171,394404,394401),
 (141172,394407,394405),
 (141173,394407,394406),
 (141174,394407,394401),
 (141175,394409,394408),
 (141176,394358,394410),
 (141177,394358,392053),
 (141178,394358,394416),
 (141179,394358,391362),
 (141180,394358,392061),
 (141181,394363,392053),
 (141182,394363,394404),
 (141183,394363,392061),
 (141184,394363,393727),
 (141185,394421,394415),
 (141186,394421,394405),
 (141187,394421,394406),
 (141188,394421,394394),
 (141189,394421,394416),
 (141190,394421,394417),
 (141191,394422,394417),
 (141192,394422,394418),
 (141193,394422,394423),
 (141194,394422,394419),
 (141195,394422,394421),
 (141196,394424,394409),
 (141197,394424,393658),
 (141198,394424,394418),
 (141199,394425,392585),
 (141200,394425,394410),
 (141201,394425,394426),
 (141202,394425,394427),
 (141203,394425,394428),
 (141204,394425,394429),
 (141205,394425,393709),
 (141206,394425,392052),
 (141207,394425,394430),
 (141208,394425,394431),
 (141209,394425,393562),
 (141210,394425,391833),
 (141211,394425,392835),
 (141212,394425,394419),
 (141213,394425,394432),
 (141214,394425,394433),
 (141215,394425,394422),
 (141216,394425,394434),
 (141217,394435,391834),
 (141218,394435,394413),
 (141219,394435,394434),
 (141220,394435,394411),
 (141221,394435,394415),
 (141222,394435,394436),
 (141223,394435,393740),
 (141224,394435,394430),
 (141225,394437,393846),
 (141226,394438,393690),
 (141227,394438,392726),
 (141228,394438,393693),
 (141229,394438,393694),
 (141230,394438,393714),
 (141231,394438,394364),
 (141232,394438,394432),
 (141233,394438,393699),
 (141234,394438,393704),
 (141235,393874,393670),
 (141236,393874,394362),
 (141237,393874,393714),
 (141238,393874,392726),
 (141239,393874,394427),
 (141240,393874,393709),
 (141241,393874,393708),
 (141242,393874,393710),
 (141243,393874,393698),
 (141244,394440,393562),
 (141245,394440,392782),
 (141246,394441,394440),
 (141247,394441,394442),
 (141248,394441,394443),
 (141249,394441,393856),
 (141250,394441,394444),
 (141251,394445,393562),
 (141252,394445,394446),
 (141253,394445,394447),
 (141254,394445,392782),
 (141255,394445,394442),
 (141256,394445,393675),
 (141257,394445,394448),
 (141258,394445,393760),
 (141259,394445,394444),
 (141260,394449,392643),
 (141261,394449,392787),
 (141262,394449,394450),
 (141263,394449,394451),
 (141264,394449,392790),
 (141265,394449,392635),
 (141266,394449,394452),
 (141267,394449,394453),
 (141268,394449,393849),
 (141269,394449,393880),
 (141270,394449,393668),
 (141271,394449,391833),
 (141272,394449,391832),
 (141273,394449,393797),
 (141274,394449,393842),
 (141275,394449,393856),
 (141276,394449,393865),
 (141277,394449,393878),
 (141278,394449,394441),
 (141279,394449,394446),
 (141280,394449,394447),
 (141281,394449,394454),
 (141282,394449,393843),
 (141283,394449,393845),
 (141284,394449,394439),
 (141285,394449,393669),
 (141286,394449,393800),
 (141287,394449,394455),
 (141288,394456,392767),
 (141289,394456,393847),
 (141290,394456,392585),
 (141291,394456,392623),
 (141292,394456,393853),
 (141293,394456,393843),
 (141294,394456,393848),
 (141295,394456,392624),
 (141296,394456,393844),
 (141297,394456,394453),
 (141298,394456,393668),
 (141299,394456,393797),
 (141300,394456,393750),
 (141301,394456,393740),
 (141302,394456,393667),
 (141303,394456,393856),
 (141304,394456,393865),
 (141305,394456,393878),
 (141306,394456,394441),
 (141307,394456,394457),
 (141308,394456,393808),
 (141309,394456,394455),
 (141310,394456,394458),
 (141311,394459,394460),
 (141312,394459,394461),
 (141313,394459,393562),
 (141314,394459,394462),
 (141315,394459,392782),
 (141316,394459,391833),
 (141317,394459,394463),
 (141318,394459,391554),
 (141319,394459,391834),
 (141320,394459,393738),
 (141321,394464,393562),
 (141322,394464,394460),
 (141323,394464,394462),
 (141324,394464,391832),
 (141325,394464,394442),
 (141326,394464,394463),
 (141327,394464,394461),
 (141328,394464,393760),
 (141329,394464,394444),
 (141330,394464,393738),
 (141331,394465,392787),
 (141332,394465,392767),
 (141333,394465,393851),
 (141334,394465,393852),
 (141335,394465,392790),
 (141336,394465,394351),
 (141337,394465,394353),
 (141338,394465,393830),
 (141339,394465,394354),
 (141340,394465,393670),
 (141341,394465,394445),
 (141342,394465,394464),
 (141343,394465,394466),
 (141344,394465,394467),
 (141345,394468,394362),
 (141346,394468,394364),
 (141347,394468,394360),
 (141348,394468,394357),
 (141349,394469,394362),
 (141350,394469,393708),
 (141351,393726,393670),
 (141352,393726,394362),
 (141353,393726,394468),
 (141354,393726,392724),
 (141355,393726,393700),
 (141356,393726,392761),
 (141357,393726,394472),
 (141358,393726,393607),
 (141359,393726,393645),
 (141360,393726,393606),
 (141361,394473,394474),
 (141362,394473,394475),
 (141363,394476,394477),
 (141364,394476,394475),
 (141365,394478,394479),
 (141366,394480,393730),
 (141367,394480,392782),
 (141368,394480,394460),
 (141369,394480,394462),
 (141370,394480,394481),
 (141371,394480,394482),
 (141372,394480,394483),
 (141373,394480,394484),
 (141374,394480,394485),
 (141375,394480,394475),
 (141376,394486,393723),
 (141377,394486,392767),
 (141378,394486,394487),
 (141379,394486,393849),
 (141380,394486,393681),
 (141381,394486,394480),
 (141382,394486,394485),
 (141383,394489,394490),
 (141384,394492,394493),
 (141385,394494,394465),
 (141386,394495,394496),
 (141387,394495,392759),
 (141388,394495,392643),
 (141389,394495,393723),
 (141390,394495,394475),
 (141391,394497,394498),
 (141392,394497,394499),
 (141393,394497,394500),
 (141394,394497,394475),
 (141395,394497,392727),
 (141396,394497,394501),
 (141397,394502,392787),
 (141398,394502,394503),
 (141399,394502,394504),
 (141400,394502,394505),
 (141401,394502,392724),
 (141402,394502,394506),
 (141403,394502,394507),
 (141404,394508,394509),
 (141405,394508,394475),
 (141406,394510,393672),
 (141407,394510,392787),
 (141408,394510,394465),
 (141409,394510,394351),
 (141410,394510,393849),
 (141411,394510,394353),
 (141412,394510,392790),
 (141413,394510,392623),
 (141414,394510,392624),
 (141415,394510,394354),
 (141416,394510,393797),
 (141417,394510,393850),
 (141418,394510,393830),
 (141419,394510,393750),
 (141420,394510,393876),
 (141421,394510,393670),
 (141422,394510,394511),
 (141423,394510,393740),
 (141424,394510,394512),
 (141425,394510,394434),
 (141426,394510,394513),
 (141427,394514,393853),
 (141428,394514,393667),
 (141429,394514,394515),
 (141430,394514,393856),
 (141431,394516,394514),
 (141432,394516,391833),
 (141433,394516,391832),
 (141434,394516,393740),
 (141435,394517,393562),
 (141436,394517,391833),
 (141437,394517,391554),
 (141438,394517,393675),
 (141439,394517,393760),
 (141440,394518,394517),
 (141441,394518,394440),
 (141442,394518,393675),
 (141443,394518,391834),
 (141444,394518,394442),
 (141445,394518,393760),
 (141446,394519,392787),
 (141447,394519,392635),
 (141448,394519,392767),
 (141449,394519,392765),
 (141450,394519,393849),
 (141451,394519,394353),
 (141452,394519,392623),
 (141453,394519,393853),
 (141454,394519,393750),
 (141455,394519,394455),
 (141456,394519,394518),
 (141457,394519,393805),
 (141458,394519,393740),
 (141459,394519,394512),
 (141460,394519,392243),
 (141461,394519,392244),
 (141462,394519,392749),
 (141463,394519,392726),
 (141464,394519,394520),
 (141465,394519,394354),
 (141466,394519,394467),
 (141467,394521,394493),
 (141468,394521,392787),
 (141469,394521,394522),
 (141470,394523,394524),
 (141471,394525,394526),
 (141472,394527,392767),
 (141473,394527,391831),
 (141474,394527,394528),
 (141475,394527,394529),
 (141476,394527,392748),
 (141477,394527,392761),
 (141478,394527,394530),
 (141479,394527,393872),
 (141480,394527,393716),
 (141481,394527,394499),
 (141482,394527,394531),
 (141483,394527,394532),
 (141484,394527,394533),
 (141485,394527,394534),
 (141486,394527,394535),
 (141487,394527,394536),
 (141488,394527,394537),
 (141489,394527,394538),
 (141490,394527,393705),
 (141491,394527,393708),
 (141492,394527,393710),
 (141493,394527,393879),
 (141494,394527,394539),
 (141495,394493,394540),
 (141496,394493,392623),
 (141497,394493,394527),
 (141498,394493,392627),
 (141499,394493,392575),
 (141500,394493,394511),
 (141501,394493,394541),
 (141502,394493,394520),
 (141503,394467,392767),
 (141504,394467,394440),
 (141505,394467,394353),
 (141506,394467,393846),
 (141507,394467,394511),
 (141508,394467,391438),
 (141509,394467,393855),
 (141510,394467,393747),
 (141511,394467,393750),
 (141512,394467,394354),
 (141513,394467,391834),
 (141514,394507,392767),
 (141515,394507,393874),
 (141516,394507,394428),
 (141517,394507,394542),
 (141518,394507,394543),
 (141519,394507,394545),
 (141520,394546,391834),
 (141521,394546,393856),
 (141522,394546,393878),
 (141523,394546,394446),
 (141524,394546,394447),
 (141525,394546,394442),
 (141526,394546,392187),
 (141527,394546,394454),
 (141528,394546,393670),
 (141529,394546,393842),
 (141530,394546,392765),
 (141531,394546,393857),
 (141532,394546,393858),
 (141533,394546,393859),
 (141534,394546,393862),
 (141535,394546,393861),
 (141536,394546,392243),
 (141537,394546,393869),
 (141538,394546,393868),
 (141539,394546,393866),
 (141540,394546,392244),
 (141541,394546,394531),
 (141542,394546,394533),
 (141543,394546,394534),
 (141544,394546,394536),
 (141545,394546,394538),
 (141546,394546,392782),
 (141547,394546,394535),
 (141548,394546,394438),
 (141549,394546,394532),
 (141550,394546,394537),
 (141551,394546,394444),
 (141552,394546,393750),
 (141553,394431,393672),
 (141554,394431,392585),
 (141555,394431,391831),
 (141556,394431,393559),
 (141557,394431,392726),
 (141558,394431,394545),
 (141559,394431,394546),
 (141560,394431,393879),
 (141561,394431,393740),
 (141562,394431,394549),
 (141563,393769,394473),
 (141564,394552,394486),
 (141565,394553,394488),
 (141566,394559,394456),
 (141567,394562,394492),
 (141568,394564,394510),
 (141569,394565,394566),
 (141570,394567,394568),
 (141571,394569,394570),
 (141572,394571,394502),
 (141573,394572,394573),
 (141574,394575,394576),
 (141575,394572,394577),
 (141576,394578,394524),
 (141577,394579,394580),
 (141578,394581,394526),
 (141579,394582,394583),
 (141580,394584,394585),
 (141581,394587,394588),
 (141582,394589,394590),
 (141583,394591,394592),
 (141584,394451,394593),
 (141585,394594,394595),
 (141586,394594,394596),
 (141587,394594,394597),
 (141588,394594,393671),
 (141589,394598,394599),
 (141590,394598,394600),
 (141591,394601,394602),
 (141592,394601,394603),
 (141593,394601,392801),
 (141594,394601,394604),
 (141595,394601,394605),
 (141596,394606,394607),
 (141597,394606,394608),
 (141598,394606,394609),
 (141599,394610,394611),
 (141600,394610,394612),
 (141601,394610,394607),
 (141602,394610,394608),
 (141603,394610,394613),
 (141604,394610,394614),
 (141605,394610,394615),
 (141606,394610,394616),
 (141607,394610,394617),
 (141608,394610,394618),
 (141609,394610,394619),
 (141610,394610,394620),
 (141611,394621,394469),
 (141612,393684,392450),
 (141613,393684,394428),
 (141614,393684,393693),
 (141615,393684,393694),
 (141616,393684,393695),
 (141617,393684,393709),
 (141618,393681,394319),
 (141619,393681,394606),
 (141620,393681,394330),
 (141621,393681,393709),
 (141622,394628,394613),
 (141623,394628,394617),
 (141624,394628,394615),
 (141625,394628,392450),
 (141626,394628,392432),
 (141627,394628,394623),
 (141628,394629,392432),
 (141629,394629,393571),
 (141630,394629,394338),
 (141631,394629,394623),
 (141632,394629,393637),
 (141633,394629,394624),
 (141634,394629,393694),
 (141635,394629,393696),
 (141636,394629,393709),
 (141637,394629,394625),
 (141638,394629,394442),
 (141639,394629,394611),
 (141640,394629,394620),
 (141641,394629,394619),
 (141642,394629,393699),
 (141643,394629,394618),
 (141644,394629,394628),
 (141645,394629,394613),
 (141646,394630,394631),
 (141647,394630,392585),
 (141648,394630,394614),
 (141649,394630,394603),
 (141650,394630,394632),
 (141651,394630,394616),
 (141652,394630,393696),
 (141653,394630,393709),
 (141654,394630,394601),
 (141655,394630,392432),
 (141656,394630,394609),
 (141657,394630,394604),
 (141658,394630,394319),
 (141659,394630,393571),
 (141660,394630,393637),
 (141661,394637,394487),
 (141662,394637,394638),
 (141663,394637,394639),
 (141664,394637,394627),
 (141665,394637,394631),
 (141666,394637,392015),
 (141667,394637,394640),
 (141668,394637,393674),
 (141669,394641,393674),
 (141670,393686,394633),
 (141671,394642,393732),
 (141672,394642,393759),
 (141673,394642,394434),
 (141674,394642,393740),
 (141675,394643,394460),
 (141676,394643,394462),
 (141677,394644,394447),
 (141678,394645,392583),
 (141679,394645,394646),
 (141680,394645,394512),
 (141681,394647,394646),
 (141682,394648,393874),
 (141683,394648,393730),
 (141684,394648,394544),
 (141685,394648,394460),
 (141686,394648,394462),
 (141687,394648,394545),
 (141688,394648,394446),
 (141689,394648,394447),
 (141690,394648,394649),
 (141691,394648,394650),
 (141692,394648,394339),
 (141693,394648,393637),
 (141694,394648,394651),
 (141695,394652,394648),
 (141696,394653,394652),
 (141697,394654,394655),
 (141698,394654,394444),
 (141699,394654,394656),
 (141700,394657,393849),
 (141701,394657,394435),
 (141702,394657,394644),
 (141703,394657,394654),
 (141704,394659,394660),
 (141705,394659,393672),
 (141706,394659,394661),
 (141707,394659,394662),
 (141708,394659,394663),
 (141709,394659,394664),
 (141710,394659,394470),
 (141711,394659,394665),
 (141712,394659,394666),
 (141713,394659,394667),
 (141714,394659,394668),
 (141715,394659,394669),
 (141716,394659,394670),
 (141717,394659,394671),
 (141718,394659,394672),
 (141719,394659,394673),
 (141720,394674,394675),
 (141721,394674,394676),
 (141722,394674,394677),
 (141723,394674,394678),
 (141724,394680,394679),
 (141725,394681,394682),
 (141726,394681,394683),
 (141727,394681,392187),
 (141728,394681,393699),
 (141729,394681,394684),
 (141730,394681,394685),
 (141731,394681,394686),
 (141732,394681,394687),
 (141733,394688,394689),
 (141734,394688,394690),
 (141735,394688,392187),
 (141736,394688,394691),
 (141737,394688,394432),
 (141738,394688,394427),
 (141739,394688,394692),
 (141740,394688,394693),
 (141741,394688,394694),
 (141742,394688,394695),
 (141743,394688,394470),
 (141744,394688,394696),
 (141745,394688,394697),
 (141746,394688,394698),
 (141747,394688,394699),
 (141748,394688,394433),
 (141749,394688,394700),
 (141750,394688,394426),
 (141751,394688,394701),
 (141752,394688,394672),
 (141753,394688,394702),
 (141754,394703,391833),
 (141755,394703,392187),
 (141756,394703,393571),
 (141757,394703,394650),
 (141758,394703,394704),
 (141759,394703,394339),
 (141760,394703,394688),
 (141761,394703,394655),
 (141762,394703,394651),
 (141763,394706,394428),
 (141764,394706,394655),
 (141765,394706,394705),
 (141766,394706,394650),
 (141767,394706,391442),
 (141768,394706,394339),
 (141769,394706,394651),
 (141770,394706,394656),
 (141771,394707,394708),
 (141772,394707,394470),
 (141773,394707,393721),
 (141774,394707,394709),
 (141775,394707,393741),
 (141776,394707,391832),
 (141777,394707,393732),
 (141778,394707,394710),
 (141779,394707,393748),
 (141780,394707,394711),
 (141781,394707,393743),
 (141782,394707,393753),
 (141783,394712,394713),
 (141784,394712,394431),
 (141785,394712,394623),
 (141786,394712,391833),
 (141787,394712,393740),
 (141788,394712,391832),
 (141789,394712,394707),
 (141790,394712,393819),
 (141791,394712,394714),
 (141792,394712,394434),
 (141793,394712,392187),
 (141794,394712,393699),
 (141795,394715,394713),
 (141796,394715,394623),
 (141797,394715,391833),
 (141798,394715,394707),
 (141799,394715,393819),
 (141800,394715,394716),
 (141801,394715,394352),
 (141802,394717,394446),
 (141803,394717,394447),
 (141804,394717,394431),
 (141805,394717,394623),
 (141806,394718,394623),
 (141807,394718,391832),
 (141808,394718,394460),
 (141809,394718,394462),
 (141810,394718,394463),
 (141811,394718,392001),
 (141812,394718,392052),
 (141813,394719,392585),
 (141814,394719,394623),
 (141815,394719,394594),
 (141816,394719,392187),
 (141817,394719,394720),
 (141818,394719,394721),
 (141819,394719,394722),
 (141820,394719,394723),
 (141821,394719,394715),
 (141822,394719,394718),
 (141823,394719,394431),
 (141824,394719,394724),
 (141825,394719,394725),
 (141826,394719,394434),
 (141827,394719,394425),
 (141828,394719,394717),
 (141829,394719,394435),
 (141830,394719,394726),
 (141831,394719,394654),
 (141832,394719,393740),
 (141833,394727,394728),
 (141834,394729,394646),
 (141835,394729,394730),
 (141836,394729,394731),
 (141837,394729,394732),
 (141838,394733,394734),
 (141839,394733,394732),
 (141840,394738,394657),
 (141841,394739,394653),
 (141842,394741,394658),
 (141843,394742,394659),
 (141844,394743,394744),
 (141845,394745,394729),
 (141846,394746,394733),
 (141847,393820,393841),
 (141848,393820,394342),
 (141849,394540,391438),
 (141850,394540,394747);
UNLOCK TABLES;
/*!40000 ALTER TABLE `call_tree` ENABLE KEYS */;


--
-- Definition of table `emmcfs`.`element`
--

DROP TABLE IF EXISTS `emmcfs`.`element`;
CREATE TABLE  `emmcfs`.`element` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(300) NOT NULL DEFAULT '',
  `type` text,
  `path` text,
  `line_start` int(10) unsigned DEFAULT NULL,
  `line_end` int(10) unsigned DEFAULT NULL,
  `code` text,
  `comment` text,
  `pmccabe` varchar(4) DEFAULT NULL,
  `pmccabe_sum` varchar(4) DEFAULT NULL,
  `prevent` text,
  `prevent_description` text,
  PRIMARY KEY (`id`,`name`) /* USING BTREE */
) ENGINE=MyISAM AUTO_INCREMENT=394748 DEFAULT CHARSET=latin1 COMMENT='Function, Struct, Variable';

--
-- Dumping data for table `emmcfs`.`element`
--

/*!40000 ALTER TABLE `element` DISABLE KEYS */;
LOCK TABLES `element` WRITE;
INSERT INTO `emmcfs`.`element` VALUES  (391349,'jump_label_apply_nops()','D:','/usr/src/linux-2.6.37/include/linux/jump_label.h',54,57,NULL,NULL,NULL,NULL,'',''),
 (391350,'jump_label_text_reserved()','D:','/usr/src/linux-2.6.37/include/linux/jump_label.h',59,62,NULL,NULL,NULL,NULL,'',''),
 (391351,'jump_label_lock()','D:','/usr/src/linux-2.6.37/include/linux/jump_label.h',64,64,NULL,NULL,NULL,NULL,'',''),
 (391352,'jump_label_unlock()','D:','/usr/src/linux-2.6.37/include/linux/jump_label.h',65,65,NULL,NULL,NULL,NULL,'',''),
 (391353,'__static_cpu_has()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/cpufeature.h',318,359,NULL,NULL,NULL,NULL,'',''),
 (391354,'set_bit()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/bitops.h',59,71,NULL,NULL,NULL,NULL,'',''),
 (391355,'__set_bit()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/bitops.h',82,85,NULL,NULL,NULL,NULL,'',''),
 (391356,'clear_bit()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/bitops.h',97,109,NULL,NULL,NULL,NULL,'',''),
 (391357,'clear_bit_unlock()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/bitops.h',119,123,NULL,NULL,NULL,NULL,'',''),
 (391358,'__clear_bit()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/bitops.h',125,128,NULL,NULL,NULL,NULL,'',''),
 (391359,'__clear_bit_unlock()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/bitops.h',142,146,NULL,NULL,NULL,NULL,'',''),
 (391360,'__change_bit()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/bitops.h',160,163,NULL,NULL,NULL,NULL,'',''),
 (391361,'change_bit()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/bitops.h',174,185,NULL,NULL,NULL,NULL,'',''),
 (391362,'test_and_set_bit()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/bitops.h',195,203,NULL,NULL,NULL,NULL,'',''),
 (391363,'test_and_set_bit_lock()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/bitops.h',212,216,NULL,NULL,NULL,NULL,'',''),
 (391364,'__test_and_set_bit()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/bitops.h',227,236,NULL,NULL,NULL,NULL,'',''),
 (391365,'test_and_clear_bit()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/bitops.h',246,255,NULL,NULL,NULL,NULL,'',''),
 (391366,'__test_and_clear_bit()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/bitops.h',266,275,NULL,NULL,NULL,NULL,'',''),
 (391367,'__test_and_change_bit()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/bitops.h',278,288,NULL,NULL,NULL,NULL,'',''),
 (391368,'test_and_change_bit()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/bitops.h',298,307,NULL,NULL,NULL,NULL,'',''),
 (391369,'constant_test_bit()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/bitops.h',309,313,NULL,NULL,NULL,NULL,'',''),
 (391370,'variable_test_bit()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/bitops.h',315,325,NULL,NULL,NULL,NULL,'',''),
 (391371,'__ffs()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/bitops.h',347,353,NULL,NULL,NULL,NULL,'',''),
 (391372,'ffz()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/bitops.h',361,367,NULL,NULL,NULL,NULL,'',''),
 (391373,'__fls()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/bitops.h',375,381,NULL,NULL,NULL,NULL,'',''),
 (391374,'ffs()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/bitops.h',395,409,NULL,NULL,NULL,NULL,'',''),
 (391375,'fls()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/bitops.h',422,436,NULL,NULL,NULL,NULL,'',''),
 (391376,'sched_find_first_bit()','D:','/usr/src/linux-2.6.37/include/asm-generic/bitops/sched.h',12,29,NULL,NULL,NULL,NULL,'',''),
 (391377,'__arch_hweight32()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/arch_hweight.h',24,33,NULL,NULL,NULL,NULL,'',''),
 (391378,'__arch_hweight16()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/arch_hweight.h',35,38,NULL,NULL,NULL,NULL,'',''),
 (391379,'__arch_hweight8()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/arch_hweight.h',40,43,NULL,NULL,NULL,NULL,'',''),
 (391380,'__arch_hweight64()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/arch_hweight.h',45,59,NULL,NULL,NULL,NULL,'',''),
 (391381,'fls64()','D:','/usr/src/linux-2.6.37/include/asm-generic/bitops/fls64.h',18,24,NULL,NULL,NULL,NULL,'',''),
 (391382,'__arch_swab32()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/swab.h',7,26,NULL,NULL,NULL,NULL,'',''),
 (391383,'__arch_swab64()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/swab.h',29,58,NULL,NULL,NULL,NULL,'',''),
 (391384,'v.u','S:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (391385,'__fswab16()','D:','/usr/src/linux-2.6.37/include/linux/swab.h',46,53,NULL,NULL,NULL,NULL,'',''),
 (391386,'__fswab32()','D:','/usr/src/linux-2.6.37/include/linux/swab.h',55,62,NULL,NULL,NULL,NULL,'',''),
 (391387,'__fswab64()','D:','/usr/src/linux-2.6.37/include/linux/swab.h',64,75,NULL,NULL,NULL,NULL,'',''),
 (391388,'__fswahw32()','D:','/usr/src/linux-2.6.37/include/linux/swab.h',77,84,NULL,NULL,NULL,NULL,'',''),
 (391389,'__fswahb32()','D:','/usr/src/linux-2.6.37/include/linux/swab.h',86,93,NULL,NULL,NULL,NULL,'',''),
 (391390,'__swab16p()','D:','/usr/src/linux-2.6.37/include/linux/swab.h',148,155,NULL,NULL,NULL,NULL,'',''),
 (391391,'__swab32p()','D:','/usr/src/linux-2.6.37/include/linux/swab.h',161,168,NULL,NULL,NULL,NULL,'',''),
 (391392,'__swab64p()','D:','/usr/src/linux-2.6.37/include/linux/swab.h',174,181,NULL,NULL,NULL,NULL,'',''),
 (391393,'__swahw32p()','D:','/usr/src/linux-2.6.37/include/linux/swab.h',189,196,NULL,NULL,NULL,NULL,'',''),
 (391394,'__swahb32p()','D:','/usr/src/linux-2.6.37/include/linux/swab.h',204,211,NULL,NULL,NULL,NULL,'',''),
 (391395,'__swab16s()','D:','/usr/src/linux-2.6.37/include/linux/swab.h',217,224,NULL,NULL,NULL,NULL,'',''),
 (391396,'__swab32s()','D:','/usr/src/linux-2.6.37/include/linux/swab.h',229,236,NULL,NULL,NULL,NULL,'',''),
 (391397,'__swab64s()','D:','/usr/src/linux-2.6.37/include/linux/swab.h',242,249,NULL,NULL,NULL,NULL,'',''),
 (391398,'__swahw32s()','D:','/usr/src/linux-2.6.37/include/linux/swab.h',257,264,NULL,NULL,NULL,NULL,'',''),
 (391399,'__swahb32s()','D:','/usr/src/linux-2.6.37/include/linux/swab.h',272,279,NULL,NULL,NULL,NULL,'',''),
 (391400,'__cpu_to_le64p()','D:','/usr/src/linux-2.6.37/include/linux/byteorder/little_endian.h',43,46,NULL,NULL,NULL,NULL,'',''),
 (391401,'__le64_to_cpup()','D:','/usr/src/linux-2.6.37/include/linux/byteorder/little_endian.h',47,50,NULL,NULL,NULL,NULL,'',''),
 (391402,'__cpu_to_le32p()','D:','/usr/src/linux-2.6.37/include/linux/byteorder/little_endian.h',51,54,NULL,NULL,NULL,NULL,'',''),
 (391403,'__le32_to_cpup()','D:','/usr/src/linux-2.6.37/include/linux/byteorder/little_endian.h',55,58,NULL,NULL,NULL,NULL,'',''),
 (391404,'__cpu_to_le16p()','D:','/usr/src/linux-2.6.37/include/linux/byteorder/little_endian.h',59,62,NULL,NULL,NULL,NULL,'',''),
 (391405,'__le16_to_cpup()','D:','/usr/src/linux-2.6.37/include/linux/byteorder/little_endian.h',63,66,NULL,NULL,NULL,NULL,'',''),
 (391406,'__cpu_to_be64p()','D:','/usr/src/linux-2.6.37/include/linux/byteorder/little_endian.h',67,70,NULL,NULL,NULL,NULL,'',''),
 (391407,'__be64_to_cpup()','D:','/usr/src/linux-2.6.37/include/linux/byteorder/little_endian.h',71,74,NULL,NULL,NULL,NULL,'',''),
 (391408,'__cpu_to_be32p()','D:','/usr/src/linux-2.6.37/include/linux/byteorder/little_endian.h',75,78,NULL,NULL,NULL,NULL,'',''),
 (391409,'__be32_to_cpup()','D:','/usr/src/linux-2.6.37/include/linux/byteorder/little_endian.h',79,82,NULL,NULL,NULL,NULL,'',''),
 (391410,'__cpu_to_be16p()','D:','/usr/src/linux-2.6.37/include/linux/byteorder/little_endian.h',83,86,NULL,NULL,NULL,NULL,'',''),
 (391411,'__be16_to_cpup()','D:','/usr/src/linux-2.6.37/include/linux/byteorder/little_endian.h',87,90,NULL,NULL,NULL,NULL,'',''),
 (391412,'le16_add_cpu()','D:','/usr/src/linux-2.6.37/include/linux/byteorder/generic.h',143,146,NULL,NULL,NULL,NULL,'',''),
 (391413,'le32_add_cpu()','D:','/usr/src/linux-2.6.37/include/linux/byteorder/generic.h',148,151,NULL,NULL,NULL,NULL,'',''),
 (391414,'le64_add_cpu()','D:','/usr/src/linux-2.6.37/include/linux/byteorder/generic.h',153,156,NULL,NULL,NULL,NULL,'',''),
 (391415,'be16_add_cpu()','D:','/usr/src/linux-2.6.37/include/linux/byteorder/generic.h',158,161,NULL,NULL,NULL,NULL,'',''),
 (391416,'be32_add_cpu()','D:','/usr/src/linux-2.6.37/include/linux/byteorder/generic.h',163,166,NULL,NULL,NULL,NULL,'',''),
 (391417,'be64_add_cpu()','D:','/usr/src/linux-2.6.37/include/linux/byteorder/generic.h',168,171,NULL,NULL,NULL,NULL,'',''),
 (391418,'get_bitmask_order()','D:','/usr/src/linux-2.6.37/include/linux/bitops.h',29,35,NULL,NULL,NULL,NULL,'',''),
 (391419,'get_count_order()','D:','/usr/src/linux-2.6.37/include/linux/bitops.h',37,45,NULL,NULL,NULL,NULL,'',''),
 (391420,'hweight_long()','D:','/usr/src/linux-2.6.37/include/linux/bitops.h',47,50,NULL,NULL,NULL,NULL,'',''),
 (391421,'rol32()','D:','/usr/src/linux-2.6.37/include/linux/bitops.h',57,60,NULL,NULL,NULL,NULL,'',''),
 (391422,'ror32()','D:','/usr/src/linux-2.6.37/include/linux/bitops.h',67,70,NULL,NULL,NULL,NULL,'',''),
 (391423,'rol16()','D:','/usr/src/linux-2.6.37/include/linux/bitops.h',77,80,NULL,NULL,NULL,NULL,'',''),
 (391424,'ror16()','D:','/usr/src/linux-2.6.37/include/linux/bitops.h',87,90,NULL,NULL,NULL,NULL,'',''),
 (391425,'rol8()','D:','/usr/src/linux-2.6.37/include/linux/bitops.h',97,100,NULL,NULL,NULL,NULL,'',''),
 (391426,'ror8()','D:','/usr/src/linux-2.6.37/include/linux/bitops.h',107,110,NULL,NULL,NULL,NULL,'',''),
 (391427,'fls_long()','D:','/usr/src/linux-2.6.37/include/linux/bitops.h',112,117,NULL,NULL,NULL,NULL,'',''),
 (391428,'__ffs64()','D:','/usr/src/linux-2.6.37/include/linux/bitops.h',127,136,NULL,NULL,NULL,NULL,'',''),
 (391429,'__memcpy()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/string_32.h',32,45,NULL,NULL,NULL,NULL,'',''),
 (391430,'__constant_memcpy()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/string_32.h',51,142,NULL,NULL,NULL,NULL,'',''),
 (391431,'__memset_generic()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/string_32.h',207,216,NULL,NULL,NULL,NULL,'',''),
 (391432,'__constant_c_memset()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/string_32.h',226,242,NULL,NULL,NULL,NULL,'',''),
 (391433,'__constant_c_and_count_memset()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/string_32.h',256,311,NULL,NULL,NULL,NULL,'',''),
 (391434,'strstrip()','D:','/usr/src/linux-2.6.37/include/linux/string.h',69,72,NULL,NULL,NULL,NULL,'',''),
 (391435,'strim()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (391436,'strstarts()','D:','/usr/src/linux-2.6.37/include/linux/string.h',141,144,NULL,NULL,NULL,NULL,'',''),
 (391437,'strncmp()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (391438,'strlen()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (391439,'clear_page()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/page_32.h',39,42,NULL,NULL,NULL,NULL,'',''),
 (391440,'__builtin_memset()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (391441,'copy_page()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/page_32.h',44,47,NULL,NULL,NULL,NULL,'',''),
 (391442,'__builtin_memcpy()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (391443,'clear_user_page()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/page.h',20,24,NULL,NULL,NULL,NULL,'',''),
 (391444,'copy_user_page()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/page.h',26,30,NULL,NULL,NULL,NULL,'',''),
 (391445,'get_order()','D:','/usr/src/linux-2.6.37/include/asm-generic/getorder.h',9,20,NULL,NULL,NULL,NULL,'',''),
 (391446,'regs_return_value()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/ptrace.h',149,152,NULL,NULL,NULL,NULL,'',''),
 (391447,'pt_regs.ax','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (391448,'user_mode()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/ptrace.h',161,168,NULL,NULL,NULL,NULL,'',''),
 (391449,'pt_regs.cs','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (391450,'user_mode_vm()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/ptrace.h',170,178,NULL,NULL,NULL,NULL,'',''),
 (391451,'pt_regs.flags','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (391452,'v8086_mode()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/ptrace.h',180,187,NULL,NULL,NULL,NULL,'',''),
 (391453,'kernel_stack_pointer()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/ptrace.h',196,203,NULL,NULL,NULL,NULL,'',''),
 (391454,'pt_regs.sp','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (391455,'instruction_pointer()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/ptrace.h',205,208,NULL,NULL,NULL,NULL,'',''),
 (391456,'pt_regs.ip','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (391457,'frame_pointer()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/ptrace.h',210,213,NULL,NULL,NULL,NULL,'',''),
 (391458,'pt_regs.bp','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (391459,'user_stack_pointer()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/ptrace.h',215,218,NULL,NULL,NULL,NULL,'',''),
 (391460,'regs_get_register()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/ptrace.h',235,240,NULL,NULL,NULL,NULL,'',''),
 (391461,'regs_within_kernel_stack()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/ptrace.h',259,264,NULL,NULL,NULL,NULL,'',''),
 (391462,'regs_get_kernel_stack_nth()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/ptrace.h',277,285,NULL,NULL,NULL,NULL,'',''),
 (391463,'__ilog2_u32()','D:','/usr/src/linux-2.6.37/include/linux/log2.h',31,35,NULL,NULL,NULL,NULL,'',''),
 (391464,'__ilog2_u64()','D:','/usr/src/linux-2.6.37/include/linux/log2.h',39,43,NULL,NULL,NULL,NULL,'',''),
 (391465,'is_power_of_2()','D:','/usr/src/linux-2.6.37/include/linux/log2.h',51,55,NULL,NULL,NULL,NULL,'',''),
 (391466,'__roundup_pow_of_two()','D:','/usr/src/linux-2.6.37/include/linux/log2.h',60,64,NULL,NULL,NULL,NULL,'',''),
 (391467,'__rounddown_pow_of_two()','D:','/usr/src/linux-2.6.37/include/linux/log2.h',69,73,NULL,NULL,NULL,NULL,'',''),
 (391468,'no_printk()','D:','/usr/src/linux-2.6.37/include/linux/printk.h',124,125,NULL,NULL,NULL,NULL,'',''),
 (391469,'console_silent()','D:','/usr/src/linux-2.6.37/include/linux/printk.h',133,136,NULL,NULL,NULL,NULL,'',''),
 (391470,'console_printk[]','G:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (391471,'console_printk','g:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (391472,'console_verbose()','D:','/usr/src/linux-2.6.37/include/linux/printk.h',138,142,NULL,NULL,NULL,NULL,'',''),
 (391473,'ddebug_remove_module()','D:','/usr/src/linux-2.6.37/include/linux/dynamic_debug.h',79,82,NULL,NULL,NULL,NULL,'',''),
 (391474,'div_u64_rem()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/div64.h',36,53,NULL,NULL,NULL,NULL,'',''),
 (391475,'d.v64','S:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (391476,'d.v32[]','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (391477,'d.v32','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (391478,'__might_sleep()','D:','/usr/src/linux-2.6.37/include/linux/kernel.h',137,138,NULL,NULL,NULL,NULL,'',''),
 (391479,'might_fault()','D:','/usr/src/linux-2.6.37/include/linux/kernel.h',157,160,NULL,NULL,NULL,NULL,'',''),
 (391480,'_cond_resched()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (391481,'pack_hex_byte()','D:','/usr/src/linux-2.6.37/include/linux/kernel.h',258,263,NULL,NULL,NULL,NULL,'',''),
 (391482,'hex_asc[]','g:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (391483,'hex_asc','g:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (391484,'____trace_printk_check_format()','D:','/usr/src/linux-2.6.37/include/linux/kernel.h',310,313,NULL,NULL,NULL,NULL,'',''),
 (391485,'get_current()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/current.h',12,15,NULL,NULL,NULL,NULL,'',''),
 (391486,'__bad_percpu_size()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (391487,'set_64bit()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/cmpxchg_32.h',73,85,NULL,NULL,NULL,NULL,'',''),
 (391488,'__cmpxchg64()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/cmpxchg_32.h',164,175,NULL,NULL,NULL,NULL,'',''),
 (391489,'__cmpxchg64_local()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/cmpxchg_32.h',177,188,NULL,NULL,NULL,NULL,'',''),
 (391490,'native_save_fl()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/irqflags.h',11,27,NULL,NULL,NULL,NULL,'',''),
 (391491,'native_restore_fl()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/irqflags.h',29,35,NULL,NULL,NULL,NULL,'',''),
 (391492,'native_irq_disable()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/irqflags.h',37,40,NULL,NULL,NULL,NULL,'',''),
 (391493,'native_irq_enable()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/irqflags.h',42,45,NULL,NULL,NULL,NULL,'',''),
 (391494,'native_safe_halt()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/irqflags.h',47,50,NULL,NULL,NULL,NULL,'',''),
 (391495,'native_halt()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/irqflags.h',52,55,NULL,NULL,NULL,NULL,'',''),
 (391496,'native_make_pgd()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/pgtable_types.h',191,194,NULL,NULL,NULL,NULL,'',''),
 (391497,'pgd_t.pgd','S:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (391498,'native_pgd_val()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/pgtable_types.h',196,199,NULL,NULL,NULL,NULL,'',''),
 (391499,'pgd_flags()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/pgtable_types.h',201,204,NULL,NULL,NULL,NULL,'',''),
 (391500,'pgd_none()','D:','/usr/src/linux-2.6.37/include/asm-generic/pgtable-nopud.h',25,25,NULL,NULL,NULL,NULL,'',''),
 (391501,'pgd_bad()','D:','/usr/src/linux-2.6.37/include/asm-generic/pgtable-nopud.h',26,26,NULL,NULL,NULL,NULL,'',''),
 (391502,'pgd_present()','D:','/usr/src/linux-2.6.37/include/asm-generic/pgtable-nopud.h',27,27,NULL,NULL,NULL,NULL,'',''),
 (391503,'pgd_clear()','D:','/usr/src/linux-2.6.37/include/asm-generic/pgtable-nopud.h',28,28,NULL,NULL,NULL,NULL,'',''),
 (391504,'pud_offset()','D:','/usr/src/linux-2.6.37/include/asm-generic/pgtable-nopud.h',38,41,NULL,NULL,NULL,NULL,'',''),
 (391505,'native_pud_val()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/pgtable_types.h',221,224,NULL,NULL,NULL,NULL,'',''),
 (391506,'pud_t.pgd','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (391507,'native_make_pmd()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/pgtable_types.h',230,233,NULL,NULL,NULL,NULL,'',''),
 (391508,'pmd_t.pmd','S:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (391509,'native_pmd_val()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/pgtable_types.h',235,238,NULL,NULL,NULL,NULL,'',''),
 (391510,'pud_flags()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/pgtable_types.h',248,251,NULL,NULL,NULL,NULL,'',''),
 (391511,'pmd_flags()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/pgtable_types.h',253,256,NULL,NULL,NULL,NULL,'',''),
 (391512,'native_make_pte()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/pgtable_types.h',258,261,NULL,NULL,NULL,NULL,'',''),
 (391513,'pte_t.pte','S:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (391514,'native_pte_val()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/pgtable_types.h',263,266,NULL,NULL,NULL,NULL,'',''),
 (391515,'pte_flags()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/pgtable_types.h',268,271,NULL,NULL,NULL,NULL,'',''),
 (391516,'bitmap_zero()','D:','/usr/src/linux-2.6.37/include/linux/bitmap.h',154,162,NULL,NULL,NULL,NULL,'',''),
 (391517,'bitmap_fill()','D:','/usr/src/linux-2.6.37/include/linux/bitmap.h',164,172,NULL,NULL,NULL,NULL,'',''),
 (391518,'bitmap_copy()','D:','/usr/src/linux-2.6.37/include/linux/bitmap.h',174,183,NULL,NULL,NULL,NULL,'',''),
 (391519,'bitmap_and()','D:','/usr/src/linux-2.6.37/include/linux/bitmap.h',185,191,NULL,NULL,NULL,NULL,'',''),
 (391520,'__bitmap_and()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (391521,'bitmap_or()','D:','/usr/src/linux-2.6.37/include/linux/bitmap.h',193,200,NULL,NULL,NULL,NULL,'',''),
 (391522,'__bitmap_or()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (391523,'bitmap_xor()','D:','/usr/src/linux-2.6.37/include/linux/bitmap.h',202,209,NULL,NULL,NULL,NULL,'',''),
 (391524,'__bitmap_xor()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (391525,'bitmap_andnot()','D:','/usr/src/linux-2.6.37/include/linux/bitmap.h',211,217,NULL,NULL,NULL,NULL,'',''),
 (391526,'__bitmap_andnot()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (391527,'bitmap_complement()','D:','/usr/src/linux-2.6.37/include/linux/bitmap.h',219,226,NULL,NULL,NULL,NULL,'',''),
 (391528,'__bitmap_complement()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (391529,'bitmap_equal()','D:','/usr/src/linux-2.6.37/include/linux/bitmap.h',228,235,NULL,NULL,NULL,NULL,'',''),
 (391530,'__bitmap_equal()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (391531,'bitmap_intersects()','D:','/usr/src/linux-2.6.37/include/linux/bitmap.h',237,244,NULL,NULL,NULL,NULL,'',''),
 (391532,'__bitmap_intersects()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (391533,'bitmap_subset()','D:','/usr/src/linux-2.6.37/include/linux/bitmap.h',246,253,NULL,NULL,NULL,NULL,'',''),
 (391534,'__bitmap_subset()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (391535,'bitmap_empty()','D:','/usr/src/linux-2.6.37/include/linux/bitmap.h',255,261,NULL,NULL,NULL,NULL,'',''),
 (391536,'__bitmap_empty()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (391537,'bitmap_full()','D:','/usr/src/linux-2.6.37/include/linux/bitmap.h',263,269,NULL,NULL,NULL,NULL,'',''),
 (391538,'__bitmap_full()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (391539,'bitmap_weight()','D:','/usr/src/linux-2.6.37/include/linux/bitmap.h',271,276,NULL,NULL,NULL,NULL,'',''),
 (391540,'__bitmap_weight()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (391541,'bitmap_shift_right()','D:','/usr/src/linux-2.6.37/include/linux/bitmap.h',278,285,NULL,NULL,NULL,NULL,'',''),
 (391542,'__bitmap_shift_right()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (391543,'bitmap_shift_left()','D:','/usr/src/linux-2.6.37/include/linux/bitmap.h',287,294,NULL,NULL,NULL,NULL,'',''),
 (391544,'__bitmap_shift_left()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (391545,'bitmap_parse()','D:','/usr/src/linux-2.6.37/include/linux/bitmap.h',296,300,NULL,NULL,NULL,NULL,'',''),
 (391546,'__bitmap_parse()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (391547,'cpumask_check()','D:','/usr/src/linux-2.6.37/include/linux/cpumask.h',104,110,NULL,NULL,NULL,NULL,'',''),
 (391548,'cpumask_first()','D:','/usr/src/linux-2.6.37/include/linux/cpumask.h',157,160,NULL,NULL,NULL,NULL,'',''),
 (391549,'find_first_bit()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (391550,'cpumask.bits','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (391551,'cpumask_next()','D:','/usr/src/linux-2.6.37/include/linux/cpumask.h',169,175,NULL,NULL,NULL,NULL,'',''),
 (391552,'find_next_bit()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (391553,'cpumask_next_zero()','D:','/usr/src/linux-2.6.37/include/linux/cpumask.h',184,190,NULL,NULL,NULL,NULL,'',''),
 (391554,'find_next_zero_bit()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (391555,'cpumask_set_cpu()','D:','/usr/src/linux-2.6.37/include/linux/cpumask.h',254,257,NULL,NULL,NULL,NULL,'',''),
 (391556,'cpumask_clear_cpu()','D:','/usr/src/linux-2.6.37/include/linux/cpumask.h',264,267,NULL,NULL,NULL,NULL,'',''),
 (391557,'cpumask_test_and_set_cpu()','D:','/usr/src/linux-2.6.37/include/linux/cpumask.h',286,289,NULL,NULL,NULL,NULL,'',''),
 (391558,'cpumask_test_and_clear_cpu()','D:','/usr/src/linux-2.6.37/include/linux/cpumask.h',298,301,NULL,NULL,NULL,NULL,'',''),
 (391559,'cpumask_setall()','D:','/usr/src/linux-2.6.37/include/linux/cpumask.h',307,310,NULL,NULL,NULL,NULL,'',''),
 (391560,'cpumask_clear()','D:','/usr/src/linux-2.6.37/include/linux/cpumask.h',316,319,NULL,NULL,NULL,NULL,'',''),
 (391561,'cpumask_and()','D:','/usr/src/linux-2.6.37/include/linux/cpumask.h',327,333,NULL,NULL,NULL,NULL,'',''),
 (391562,'cpumask_or()','D:','/usr/src/linux-2.6.37/include/linux/cpumask.h',341,346,NULL,NULL,NULL,NULL,'',''),
 (391563,'cpumask_xor()','D:','/usr/src/linux-2.6.37/include/linux/cpumask.h',354,360,NULL,NULL,NULL,NULL,'',''),
 (391564,'cpumask_andnot()','D:','/usr/src/linux-2.6.37/include/linux/cpumask.h',368,374,NULL,NULL,NULL,NULL,'',''),
 (391565,'cpumask_complement()','D:','/usr/src/linux-2.6.37/include/linux/cpumask.h',381,386,NULL,NULL,NULL,NULL,'',''),
 (391566,'cpumask_equal()','D:','/usr/src/linux-2.6.37/include/linux/cpumask.h',393,398,NULL,NULL,NULL,NULL,'',''),
 (391567,'cpumask_intersects()','D:','/usr/src/linux-2.6.37/include/linux/cpumask.h',405,410,NULL,NULL,NULL,NULL,'',''),
 (391568,'cpumask_subset()','D:','/usr/src/linux-2.6.37/include/linux/cpumask.h',417,422,NULL,NULL,NULL,NULL,'',''),
 (391569,'cpumask_empty()','D:','/usr/src/linux-2.6.37/include/linux/cpumask.h',428,431,NULL,NULL,NULL,NULL,'',''),
 (391570,'cpumask_full()','D:','/usr/src/linux-2.6.37/include/linux/cpumask.h',437,440,NULL,NULL,NULL,NULL,'',''),
 (391571,'cpumask_weight()','D:','/usr/src/linux-2.6.37/include/linux/cpumask.h',446,449,NULL,NULL,NULL,NULL,'',''),
 (391572,'cpumask_shift_right()','D:','/usr/src/linux-2.6.37/include/linux/cpumask.h',457,462,NULL,NULL,NULL,NULL,'',''),
 (391573,'cpumask_shift_left()','D:','/usr/src/linux-2.6.37/include/linux/cpumask.h',470,475,NULL,NULL,NULL,NULL,'',''),
 (391574,'cpumask_copy()','D:','/usr/src/linux-2.6.37/include/linux/cpumask.h',482,486,NULL,NULL,NULL,NULL,'',''),
 (391575,'cpumask_scnprintf()','D:','/usr/src/linux-2.6.37/include/linux/cpumask.h',529,533,NULL,NULL,NULL,NULL,'',''),
 (391576,'bitmap_scnprintf()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (391577,'cpumask_parse_user()','D:','/usr/src/linux-2.6.37/include/linux/cpumask.h',543,547,NULL,NULL,NULL,NULL,'',''),
 (391578,'bitmap_parse_user()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (391579,'cpulist_scnprintf()','D:','/usr/src/linux-2.6.37/include/linux/cpumask.h',558,563,NULL,NULL,NULL,NULL,'',''),
 (391580,'bitmap_scnlistprintf()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (391581,'cpulist_parse()','D:','/usr/src/linux-2.6.37/include/linux/cpumask.h',573,576,NULL,NULL,NULL,NULL,'',''),
 (391582,'bitmap_parselist()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (391583,'cpumask_size()','D:','/usr/src/linux-2.6.37/include/linux/cpumask.h',583,588,NULL,NULL,NULL,NULL,'',''),
 (391584,'alloc_cpumask_var()','D:','/usr/src/linux-2.6.37/include/linux/cpumask.h',620,623,NULL,NULL,NULL,NULL,'',''),
 (391585,'alloc_cpumask_var_node()','D:','/usr/src/linux-2.6.37/include/linux/cpumask.h',625,629,NULL,NULL,NULL,NULL,'',''),
 (391586,'zalloc_cpumask_var()','D:','/usr/src/linux-2.6.37/include/linux/cpumask.h',631,635,NULL,NULL,NULL,NULL,'',''),
 (391587,'zalloc_cpumask_var_node()','D:','/usr/src/linux-2.6.37/include/linux/cpumask.h',637,642,NULL,NULL,NULL,NULL,'',''),
 (391588,'alloc_bootmem_cpumask_var()','D:','/usr/src/linux-2.6.37/include/linux/cpumask.h',644,646,NULL,NULL,NULL,NULL,'',''),
 (391589,'free_cpumask_var()','D:','/usr/src/linux-2.6.37/include/linux/cpumask.h',648,650,NULL,NULL,NULL,NULL,'',''),
 (391590,'free_bootmem_cpumask_var()','D:','/usr/src/linux-2.6.37/include/linux/cpumask.h',652,654,NULL,NULL,NULL,NULL,'',''),
 (391591,'__check_is_bitmap()','D:','/usr/src/linux-2.6.37/include/linux/cpumask.h',692,695,NULL,NULL,NULL,NULL,'',''),
 (391592,'get_cpu_mask()','D:','/usr/src/linux-2.6.37/include/linux/cpumask.h',707,712,NULL,NULL,NULL,NULL,'',''),
 (391593,'cpu_bit_bitmap[]','g:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (391594,'cpu_bit_bitmap','g:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (391595,'__cpu_set()','D:','/usr/src/linux-2.6.37/include/linux/cpumask.h',811,814,NULL,NULL,NULL,NULL,'',''),
 (391596,'__cpu_clear()','D:','/usr/src/linux-2.6.37/include/linux/cpumask.h',817,820,NULL,NULL,NULL,NULL,'',''),
 (391597,'__cpus_setall()','D:','/usr/src/linux-2.6.37/include/linux/cpumask.h',823,826,NULL,NULL,NULL,NULL,'',''),
 (391598,'__cpus_clear()','D:','/usr/src/linux-2.6.37/include/linux/cpumask.h',829,832,NULL,NULL,NULL,NULL,'',''),
 (391599,'__cpu_test_and_set()','D:','/usr/src/linux-2.6.37/include/linux/cpumask.h',838,841,NULL,NULL,NULL,NULL,'',''),
 (391600,'__cpus_and()','D:','/usr/src/linux-2.6.37/include/linux/cpumask.h',844,848,NULL,NULL,NULL,NULL,'',''),
 (391601,'__cpus_or()','D:','/usr/src/linux-2.6.37/include/linux/cpumask.h',851,855,NULL,NULL,NULL,NULL,'',''),
 (391602,'__cpus_xor()','D:','/usr/src/linux-2.6.37/include/linux/cpumask.h',858,862,NULL,NULL,NULL,NULL,'',''),
 (391603,'__cpus_andnot()','D:','/usr/src/linux-2.6.37/include/linux/cpumask.h',866,870,NULL,NULL,NULL,NULL,'',''),
 (391604,'__cpus_equal()','D:','/usr/src/linux-2.6.37/include/linux/cpumask.h',873,877,NULL,NULL,NULL,NULL,'',''),
 (391605,'__cpus_intersects()','D:','/usr/src/linux-2.6.37/include/linux/cpumask.h',880,884,NULL,NULL,NULL,NULL,'',''),
 (391606,'__cpus_subset()','D:','/usr/src/linux-2.6.37/include/linux/cpumask.h',887,891,NULL,NULL,NULL,NULL,'',''),
 (391607,'__cpus_empty()','D:','/usr/src/linux-2.6.37/include/linux/cpumask.h',894,897,NULL,NULL,NULL,NULL,'',''),
 (391608,'__cpus_weight()','D:','/usr/src/linux-2.6.37/include/linux/cpumask.h',900,903,NULL,NULL,NULL,NULL,'',''),
 (391609,'__cpus_shift_left()','D:','/usr/src/linux-2.6.37/include/linux/cpumask.h',907,911,NULL,NULL,NULL,NULL,'',''),
 (391610,'paravirt_enabled()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/paravirt.h',16,19,NULL,NULL,NULL,NULL,'',''),
 (391611,'pv_info','g:','/usr/src/linux-2.6.37/arch/x86/include/asm/paravirt_types.h',63,68,NULL,NULL,NULL,NULL,'',''),
 (391612,'pv_info.paravirt_enabled','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (391613,'load_sp0()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/paravirt.h',21,25,NULL,NULL,NULL,NULL,'',''),
 (391614,'pv_cpu_ops','g:','/usr/src/linux-2.6.37/arch/x86/include/asm/paravirt_types.h',95,189,NULL,NULL,NULL,NULL,'',''),
 (391615,'pv_cpu_ops.load_sp0','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (391616,'__cpuid()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/paravirt.h',28,32,NULL,NULL,NULL,NULL,'',''),
 (391617,'pv_cpu_ops.cpuid','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (391618,'paravirt_get_debugreg()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/paravirt.h',37,40,NULL,NULL,NULL,NULL,'',''),
 (391619,'pv_cpu_ops.get_debugreg','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (391620,'set_debugreg()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/paravirt.h',42,45,NULL,NULL,NULL,NULL,'',''),
 (391621,'pv_cpu_ops.set_debugreg','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (391622,'clts()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/paravirt.h',47,50,NULL,NULL,NULL,NULL,'',''),
 (391623,'pv_cpu_ops.clts','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (391624,'read_cr0()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/paravirt.h',52,55,NULL,NULL,NULL,NULL,'',''),
 (391625,'pv_cpu_ops.read_cr0','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (391626,'write_cr0()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/paravirt.h',57,60,NULL,NULL,NULL,NULL,'',''),
 (391627,'pv_cpu_ops.write_cr0','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (391628,'read_cr2()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/paravirt.h',62,65,NULL,NULL,NULL,NULL,'',''),
 (391629,'pv_mmu_ops','g:','/usr/src/linux-2.6.37/arch/x86/include/asm/paravirt_types.h',222,314,NULL,NULL,NULL,NULL,'',''),
 (391630,'pv_mmu_ops.read_cr2','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (391631,'write_cr2()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/paravirt.h',67,70,NULL,NULL,NULL,NULL,'',''),
 (391632,'pv_mmu_ops.write_cr2','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (391633,'read_cr3()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/paravirt.h',72,75,NULL,NULL,NULL,NULL,'',''),
 (391634,'pv_mmu_ops.read_cr3','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (391635,'write_cr3()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/paravirt.h',77,80,NULL,NULL,NULL,NULL,'',''),
 (391636,'pv_mmu_ops.write_cr3','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (391637,'read_cr4()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/paravirt.h',82,85,NULL,NULL,NULL,NULL,'',''),
 (391638,'pv_cpu_ops.read_cr4','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (391639,'read_cr4_safe()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/paravirt.h',86,89,NULL,NULL,NULL,NULL,'',''),
 (391640,'pv_cpu_ops.read_cr4_safe','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (391641,'write_cr4()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/paravirt.h',91,94,NULL,NULL,NULL,NULL,'',''),
 (391642,'pv_cpu_ops.write_cr4','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (391643,'arch_safe_halt()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/paravirt.h',108,111,NULL,NULL,NULL,NULL,'',''),
 (391644,'pv_irq_ops','g:','/usr/src/linux-2.6.37/arch/x86/include/asm/paravirt_types.h',191,212,NULL,NULL,NULL,NULL,'',''),
 (391645,'pv_irq_ops.safe_halt','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (391646,'halt()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/paravirt.h',113,116,NULL,NULL,NULL,NULL,'',''),
 (391647,'wbinvd()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/paravirt.h',118,121,NULL,NULL,NULL,NULL,'',''),
 (391648,'pv_cpu_ops.wbinvd','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (391649,'paravirt_read_msr()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/paravirt.h',125,128,NULL,NULL,NULL,NULL,'',''),
 (391650,'pv_cpu_ops.read_msr','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (391651,'paravirt_rdmsr_regs()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/paravirt.h',130,133,NULL,NULL,NULL,NULL,'',''),
 (391652,'pv_cpu_ops.rdmsr_regs','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (391653,'paravirt_write_msr()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/paravirt.h',135,138,NULL,NULL,NULL,NULL,'',''),
 (391654,'pv_cpu_ops.write_msr','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (391655,'paravirt_wrmsr_regs()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/paravirt.h',140,143,NULL,NULL,NULL,NULL,'',''),
 (391656,'pv_cpu_ops.wrmsr_regs','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (391657,'rdmsrl_safe()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/paravirt.h',181,187,NULL,NULL,NULL,NULL,'',''),
 (391658,'rdmsrl_amd_safe()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/paravirt.h',188,201,NULL,NULL,NULL,NULL,'',''),
 (391659,'wrmsrl_amd_safe()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/paravirt.h',203,213,NULL,NULL,NULL,NULL,'',''),
 (391660,'paravirt_read_tsc()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/paravirt.h',215,218,NULL,NULL,NULL,NULL,'',''),
 (391661,'pv_cpu_ops.read_tsc','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (391662,'paravirt_sched_clock()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/paravirt.h',228,231,NULL,NULL,NULL,NULL,'',''),
 (391663,'pv_time_ops','g:','/usr/src/linux-2.6.37/arch/x86/include/asm/paravirt_types.h',90,93,NULL,NULL,NULL,NULL,'',''),
 (391664,'pv_time_ops.sched_clock','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (391665,'paravirt_read_pmc()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/paravirt.h',233,236,NULL,NULL,NULL,NULL,'',''),
 (391666,'pv_cpu_ops.read_pmc','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (391667,'paravirt_rdtscp()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/paravirt.h',245,248,NULL,NULL,NULL,NULL,'',''),
 (391668,'pv_cpu_ops.read_tscp','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (391669,'paravirt_alloc_ldt()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/paravirt.h',266,269,NULL,NULL,NULL,NULL,'',''),
 (391670,'pv_cpu_ops.alloc_ldt','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (391671,'paravirt_free_ldt()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/paravirt.h',271,274,NULL,NULL,NULL,NULL,'',''),
 (391672,'pv_cpu_ops.free_ldt','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (391673,'load_TR_desc()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/paravirt.h',276,279,NULL,NULL,NULL,NULL,'',''),
 (391674,'pv_cpu_ops.load_tr_desc','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (391675,'load_gdt()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/paravirt.h',280,283,NULL,NULL,NULL,NULL,'',''),
 (391676,'pv_cpu_ops.load_gdt','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (391677,'load_idt()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/paravirt.h',284,287,NULL,NULL,NULL,NULL,'',''),
 (391678,'pv_cpu_ops.load_idt','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (391679,'set_ldt()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/paravirt.h',288,291,NULL,NULL,NULL,NULL,'',''),
 (391680,'pv_cpu_ops.set_ldt','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (391681,'store_gdt()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/paravirt.h',292,295,NULL,NULL,NULL,NULL,'',''),
 (391682,'pv_cpu_ops.store_gdt','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (391683,'store_idt()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/paravirt.h',296,299,NULL,NULL,NULL,NULL,'',''),
 (391684,'pv_cpu_ops.store_idt','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (391685,'paravirt_store_tr()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/paravirt.h',300,303,NULL,NULL,NULL,NULL,'',''),
 (391686,'pv_cpu_ops.store_tr','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (391687,'load_TLS()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/paravirt.h',305,308,NULL,NULL,NULL,NULL,'',''),
 (391688,'pv_cpu_ops.load_tls','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (391689,'write_ldt_entry()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/paravirt.h',317,321,NULL,NULL,NULL,NULL,'',''),
 (391690,'pv_cpu_ops.write_ldt_entry','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (391691,'write_gdt_entry()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/paravirt.h',323,327,NULL,NULL,NULL,NULL,'',''),
 (391692,'pv_cpu_ops.write_gdt_entry','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (391693,'write_idt_entry()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/paravirt.h',329,332,NULL,NULL,NULL,NULL,'',''),
 (391694,'pv_cpu_ops.write_idt_entry','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (391695,'set_iopl_mask()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/paravirt.h',333,336,NULL,NULL,NULL,NULL,'',''),
 (391696,'pv_cpu_ops.set_iopl_mask','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (391697,'slow_down_io()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/paravirt.h',339,347,NULL,NULL,NULL,NULL,'',''),
 (391698,'pv_cpu_ops.io_delay','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (391699,'*pv_cpu_ops.io_delay()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (391700,'startup_ipi_hook()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/paravirt.h',350,355,NULL,NULL,NULL,NULL,'',''),
 (391701,'pv_apic_ops','g:','/usr/src/linux-2.6.37/arch/x86/include/asm/paravirt_types.h',214,220,NULL,NULL,NULL,NULL,'',''),
 (391702,'pv_apic_ops.startup_ipi_hook','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (391703,'paravirt_activate_mm()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/paravirt.h',358,362,NULL,NULL,NULL,NULL,'',''),
 (391704,'pv_mmu_ops.activate_mm','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (391705,'arch_dup_mmap()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/paravirt.h',364,368,NULL,NULL,NULL,NULL,'',''),
 (391706,'pv_mmu_ops.dup_mmap','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (391707,'arch_exit_mmap()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/paravirt.h',370,373,NULL,NULL,NULL,NULL,'',''),
 (391708,'pv_mmu_ops.exit_mmap','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (391709,'__flush_tlb()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/paravirt.h',375,378,NULL,NULL,NULL,NULL,'',''),
 (391710,'pv_mmu_ops.flush_tlb_user','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (391711,'__flush_tlb_global()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/paravirt.h',379,382,NULL,NULL,NULL,NULL,'',''),
 (391712,'pv_mmu_ops.flush_tlb_kernel','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (391713,'__flush_tlb_single()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/paravirt.h',383,386,NULL,NULL,NULL,NULL,'',''),
 (391714,'pv_mmu_ops.flush_tlb_single','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (391715,'flush_tlb_others()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/paravirt.h',388,393,NULL,NULL,NULL,NULL,'',''),
 (391716,'pv_mmu_ops.flush_tlb_others','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (391717,'paravirt_pgd_alloc()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/paravirt.h',395,398,NULL,NULL,NULL,NULL,'',''),
 (391718,'pv_mmu_ops.pgd_alloc','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (391719,'paravirt_pgd_free()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/paravirt.h',400,403,NULL,NULL,NULL,NULL,'',''),
 (391720,'pv_mmu_ops.pgd_free','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (391721,'paravirt_alloc_pte()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/paravirt.h',405,408,NULL,NULL,NULL,NULL,'',''),
 (391722,'pv_mmu_ops.alloc_pte','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (391723,'paravirt_release_pte()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/paravirt.h',409,412,NULL,NULL,NULL,NULL,'',''),
 (391724,'pv_mmu_ops.release_pte','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (391725,'paravirt_alloc_pmd()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/paravirt.h',414,417,NULL,NULL,NULL,NULL,'',''),
 (391726,'pv_mmu_ops.alloc_pmd','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (391727,'paravirt_release_pmd()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/paravirt.h',419,422,NULL,NULL,NULL,NULL,'',''),
 (391728,'pv_mmu_ops.release_pmd','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (391729,'paravirt_alloc_pud()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/paravirt.h',424,427,NULL,NULL,NULL,NULL,'',''),
 (391730,'pv_mmu_ops.alloc_pud','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (391731,'paravirt_release_pud()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/paravirt.h',428,431,NULL,NULL,NULL,NULL,'',''),
 (391732,'pv_mmu_ops.release_pud','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (391733,'pte_update()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/paravirt.h',433,437,NULL,NULL,NULL,NULL,'',''),
 (391734,'pv_mmu_ops.pte_update','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (391735,'pte_update_defer()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/paravirt.h',439,443,NULL,NULL,NULL,NULL,'',''),
 (391736,'pv_mmu_ops.pte_update_defer','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (391737,'__pte()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/paravirt.h',445,459,NULL,NULL,NULL,NULL,'',''),
 (391738,'pv_mmu_ops.make_pte','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (391739,'paravirt_callee_save.func','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (391740,'pte_val()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/paravirt.h',461,473,NULL,NULL,NULL,NULL,'',''),
 (391741,'pv_mmu_ops.pte_val','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (391742,'__pgd()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/paravirt.h',475,487,NULL,NULL,NULL,NULL,'',''),
 (391743,'pv_mmu_ops.make_pgd','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (391744,'pgd_val()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/paravirt.h',489,501,NULL,NULL,NULL,NULL,'',''),
 (391745,'pv_mmu_ops.pgd_val','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (391746,'ptep_modify_prot_start()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/paravirt.h',504,513,NULL,NULL,NULL,NULL,'',''),
 (391747,'pv_mmu_ops.ptep_modify_prot_start','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (391748,'ptep_modify_prot_commit()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/paravirt.h',515,524,NULL,NULL,NULL,NULL,'',''),
 (391749,'pv_mmu_ops.ptep_modify_prot_commit','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (391750,'*pv_mmu_ops.ptep_modify_prot_commit()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (391751,'set_pte()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/paravirt.h',526,534,NULL,NULL,NULL,NULL,'',''),
 (391752,'pv_mmu_ops.set_pte','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (391753,'set_pte_at()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/paravirt.h',536,544,NULL,NULL,NULL,NULL,'',''),
 (391754,'pv_mmu_ops.set_pte_at','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (391755,'*pv_mmu_ops.set_pte_at()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (391756,'set_pmd()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/paravirt.h',546,554,NULL,NULL,NULL,NULL,'',''),
 (391757,'pv_mmu_ops.set_pmd','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (391758,'__pmd()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/paravirt.h',557,569,NULL,NULL,NULL,NULL,'',''),
 (391759,'pv_mmu_ops.make_pmd','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (391760,'pmd_val()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/paravirt.h',571,583,NULL,NULL,NULL,NULL,'',''),
 (391761,'pv_mmu_ops.pmd_val','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (391762,'set_pud()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/paravirt.h',585,595,NULL,NULL,NULL,NULL,'',''),
 (391763,'pv_mmu_ops.set_pud','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (391764,'set_pte_atomic()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/paravirt.h',654,658,NULL,NULL,NULL,NULL,'',''),
 (391765,'pv_mmu_ops.set_pte_atomic','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (391766,'pte_clear()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/paravirt.h',660,664,NULL,NULL,NULL,NULL,'',''),
 (391767,'pv_mmu_ops.pte_clear','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (391768,'pmd_clear()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/paravirt.h',666,669,NULL,NULL,NULL,NULL,'',''),
 (391769,'pv_mmu_ops.pmd_clear','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (391770,'arch_start_context_switch()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/paravirt.h',689,692,NULL,NULL,NULL,NULL,'',''),
 (391771,'pv_cpu_ops.start_context_switch','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (391772,'arch_end_context_switch()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/paravirt.h',694,697,NULL,NULL,NULL,NULL,'',''),
 (391773,'pv_cpu_ops.end_context_switch','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (391774,'arch_enter_lazy_mmu_mode()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/paravirt.h',700,703,NULL,NULL,NULL,NULL,'',''),
 (391775,'pv_mmu_ops.lazy_mode','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (391776,'pv_lazy_ops.enter','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (391777,'arch_leave_lazy_mmu_mode()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/paravirt.h',705,708,NULL,NULL,NULL,NULL,'',''),
 (391778,'pv_lazy_ops.leave','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (391779,'__set_fixmap()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/paravirt.h',712,716,NULL,NULL,NULL,NULL,'',''),
 (391780,'pv_mmu_ops.set_fixmap','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (391781,'*pv_mmu_ops.set_fixmap()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (391782,'arch_spin_is_locked()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/paravirt.h',720,723,NULL,NULL,NULL,NULL,'',''),
 (391783,'pv_lock_ops','g:','/usr/src/linux-2.6.37/arch/x86/include/asm/paravirt_types.h',317,324,NULL,NULL,NULL,NULL,'',''),
 (391784,'pv_lock_ops.spin_is_locked','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (391785,'arch_spin_is_contended()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/paravirt.h',725,728,NULL,NULL,NULL,NULL,'',''),
 (391786,'pv_lock_ops.spin_is_contended','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (391787,'arch_spin_lock()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/paravirt.h',731,734,NULL,NULL,NULL,NULL,'',''),
 (391788,'pv_lock_ops.spin_lock','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (391789,'arch_spin_lock_flags()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/paravirt.h',736,740,NULL,NULL,NULL,NULL,'',''),
 (391790,'pv_lock_ops.spin_lock_flags','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (391791,'arch_spin_trylock()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/paravirt.h',742,745,NULL,NULL,NULL,NULL,'',''),
 (391792,'pv_lock_ops.spin_trylock','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (391793,'arch_spin_unlock()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/paravirt.h',747,750,NULL,NULL,NULL,NULL,'',''),
 (391794,'pv_lock_ops.spin_unlock','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (391795,'arch_local_save_flags()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/paravirt.h',827,830,NULL,NULL,NULL,NULL,'',''),
 (391796,'pv_irq_ops.save_fl','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (391797,'arch_local_irq_restore()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/paravirt.h',832,835,NULL,NULL,NULL,NULL,'',''),
 (391798,'pv_irq_ops.restore_fl','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (391799,'arch_local_irq_disable()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/paravirt.h',837,840,NULL,NULL,NULL,NULL,'',''),
 (391800,'pv_irq_ops.irq_disable','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (391801,'arch_local_irq_enable()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/paravirt.h',842,845,NULL,NULL,NULL,NULL,'',''),
 (391802,'pv_irq_ops.irq_enable','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (391803,'arch_local_irq_save()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/paravirt.h',847,854,NULL,NULL,NULL,NULL,'',''),
 (391804,'arch_irqs_disabled_flags()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/irqflags.h',154,157,NULL,NULL,NULL,NULL,'',''),
 (391805,'arch_irqs_disabled()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/irqflags.h',159,164,NULL,NULL,NULL,NULL,'',''),
 (391806,'get_limit()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/system.h',201,206,NULL,NULL,NULL,NULL,'',''),
 (391807,'native_clts()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/system.h',208,211,NULL,NULL,NULL,NULL,'',''),
 (391808,'native_read_cr0()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/system.h',222,227,NULL,NULL,NULL,NULL,'',''),
 (391809,'native_write_cr0()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/system.h',229,232,NULL,NULL,NULL,NULL,'',''),
 (391810,'native_read_cr2()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/system.h',234,239,NULL,NULL,NULL,NULL,'',''),
 (391811,'native_write_cr2()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/system.h',241,244,NULL,NULL,NULL,NULL,'',''),
 (391812,'native_read_cr3()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/system.h',246,251,NULL,NULL,NULL,NULL,'',''),
 (391813,'native_write_cr3()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/system.h',253,256,NULL,NULL,NULL,NULL,'',''),
 (391814,'native_read_cr4()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/system.h',258,263,NULL,NULL,NULL,NULL,'',''),
 (391815,'native_read_cr4_safe()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/system.h',265,279,NULL,NULL,NULL,NULL,'',''),
 (391816,'native_write_cr4()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/system.h',281,284,NULL,NULL,NULL,NULL,'',''),
 (391817,'native_wbinvd()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/system.h',300,303,NULL,NULL,NULL,NULL,'',''),
 (391818,'clflush()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/system.h',333,336,NULL,NULL,NULL,NULL,'',''),
 (391819,'rdtsc_barrier()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/system.h',454,458,NULL,NULL,NULL,NULL,'',''),
 (391820,'native_read_tscp()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/msr.h',42,48,NULL,NULL,NULL,NULL,'',''),
 (391821,'native_read_msr()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/msr.h',68,74,NULL,NULL,NULL,NULL,'',''),
 (391822,'native_read_msr_safe()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/msr.h',76,90,NULL,NULL,NULL,NULL,'',''),
 (391823,'native_write_msr()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/msr.h',92,96,NULL,NULL,NULL,NULL,'',''),
 (391824,'native_write_msr_safe()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/msr.h',99,114,NULL,NULL,NULL,NULL,'',''),
 (391825,'__native_read_tsc()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/msr.h',121,128,NULL,NULL,NULL,NULL,'',''),
 (391826,'native_read_pmc()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/msr.h',130,136,NULL,NULL,NULL,NULL,'',''),
 (391827,'div_u64()','D:','/usr/src/linux-2.6.37/include/linux/math64.h',78,82,NULL,NULL,NULL,NULL,'',''),
 (391828,'div_s64()','D:','/usr/src/linux-2.6.37/include/linux/math64.h',89,93,NULL,NULL,NULL,NULL,'',''),
 (391829,'div_s64_rem()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (391830,'__iter_div_u64_rem()','D:','/usr/src/linux-2.6.37/include/linux/math64.h',98,115,NULL,NULL,NULL,NULL,'',''),
 (391831,'ERR_PTR()','D:','/usr/src/linux-2.6.37/include/linux/err.h',22,25,NULL,NULL,NULL,NULL,'',''),
 (391832,'PTR_ERR()','D:','/usr/src/linux-2.6.37/include/linux/err.h',27,30,NULL,NULL,NULL,NULL,'',''),
 (391833,'IS_ERR()','D:','/usr/src/linux-2.6.37/include/linux/err.h',32,35,NULL,NULL,NULL,NULL,'',''),
 (391834,'__builtin_expect()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (391835,'IS_ERR_OR_NULL()','D:','/usr/src/linux-2.6.37/include/linux/err.h',37,40,NULL,NULL,NULL,NULL,'',''),
 (391836,'ERR_CAST()','D:','/usr/src/linux-2.6.37/include/linux/err.h',49,53,NULL,NULL,NULL,NULL,'',''),
 (391837,'current_text_addr()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/processor.h',38,45,NULL,NULL,NULL,NULL,'',''),
 (391838,'hlt_works()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/processor.h',152,159,NULL,NULL,NULL,NULL,'',''),
 (391839,'__per_cpu_offset[]','g:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (391840,'__per_cpu_offset','g:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (391841,'cpuinfo_x86.hlt_works_ok','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (391842,'native_cpuid()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/processor.h',178,188,NULL,NULL,NULL,NULL,'',''),
 (391843,'load_cr3()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/processor.h',190,193,NULL,NULL,NULL,NULL,'',''),
 (391844,'native_get_debugreg()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/processor.h',480,507,NULL,NULL,NULL,NULL,'',''),
 (391845,'native_set_debugreg()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/processor.h',509,533,NULL,NULL,NULL,NULL,'',''),
 (391846,'native_set_iopl_mask()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/processor.h',538,552,NULL,NULL,NULL,NULL,'',''),
 (391847,'native_load_sp0()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/processor.h',554,565,NULL,NULL,NULL,NULL,'',''),
 (391848,'tss_struct.x86_tss','S:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (391849,'x86_hw_tss.sp0','S:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (391850,'thread_struct.sp0','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (391851,'x86_hw_tss.ss1','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (391852,'thread_struct.sysenter_cs','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (391853,'native_swapgs()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/processor.h',567,572,NULL,NULL,NULL,NULL,'',''),
 (391854,'set_in_cr4()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/processor.h',605,613,NULL,NULL,NULL,NULL,'',''),
 (391855,'mmu_cr4_features','G:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (391856,'clear_in_cr4()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/processor.h',615,623,NULL,NULL,NULL,NULL,'',''),
 (391857,'cpuid()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/processor.h',648,655,NULL,NULL,NULL,NULL,'',''),
 (391858,'cpuid_count()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/processor.h',658,665,NULL,NULL,NULL,NULL,'',''),
 (391859,'cpuid_eax()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/processor.h',670,677,NULL,NULL,NULL,NULL,'',''),
 (391860,'cpuid_ebx()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/processor.h',679,686,NULL,NULL,NULL,NULL,'',''),
 (391861,'cpuid_ecx()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/processor.h',688,695,NULL,NULL,NULL,NULL,'',''),
 (391862,'cpuid_edx()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/processor.h',697,704,NULL,NULL,NULL,NULL,'',''),
 (391863,'rep_nop()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/processor.h',707,710,NULL,NULL,NULL,NULL,'',''),
 (391864,'cpu_relax()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/processor.h',712,715,NULL,NULL,NULL,NULL,'',''),
 (391865,'sync_core()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/processor.h',718,734,NULL,NULL,NULL,NULL,'',''),
 (391866,'__monitor()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/processor.h',736,742,NULL,NULL,NULL,NULL,'',''),
 (391867,'__mwait()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/processor.h',744,749,NULL,NULL,NULL,NULL,'',''),
 (391868,'__sti_mwait()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/processor.h',751,757,NULL,NULL,NULL,NULL,'',''),
 (391869,'get_debugctlmsr()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/processor.h',782,793,NULL,NULL,NULL,NULL,'',''),
 (391870,'boot_cpu_data','g:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (391871,'cpuinfo_x86.x86','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (391872,'update_debugctlmsr()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/processor.h',795,802,NULL,NULL,NULL,NULL,'',''),
 (391873,'prefetch()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/processor.h',835,841,NULL,NULL,NULL,NULL,'',''),
 (391874,'prefetchw()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/processor.h',848,854,NULL,NULL,NULL,NULL,'',''),
 (391875,'spin_lock_prefetch()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/processor.h',856,859,NULL,NULL,NULL,NULL,'',''),
 (391876,'get_aperfmperf()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/processor.h',983,989,NULL,NULL,NULL,NULL,'',''),
 (391877,'cpuinfo_x86.x86_capability','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (391878,'warn_slowpath_null()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (391879,'aperfmperf.aperf','S:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (391880,'aperfmperf.mperf','S:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (391881,'calc_aperfmperf_ratio()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/processor.h',993,1006,NULL,NULL,NULL,NULL,'',''),
 (391882,'div64_u64()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (391883,'ftrace_call_adjust()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/ftrace.h',38,46,NULL,NULL,NULL,NULL,'',''),
 (391884,'atomic_read()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/atomic.h',23,26,NULL,NULL,NULL,NULL,'',''),
 (391885,'atomic_t.counter','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (391886,'atomic_set()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/atomic.h',35,38,NULL,NULL,NULL,NULL,'',''),
 (391887,'atomic_add()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/atomic.h',47,52,NULL,NULL,NULL,NULL,'',''),
 (391888,'atomic_sub()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/atomic.h',61,66,NULL,NULL,NULL,NULL,'',''),
 (391889,'atomic_sub_and_test()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/atomic.h',77,85,NULL,NULL,NULL,NULL,'',''),
 (391890,'atomic_inc()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/atomic.h',93,97,NULL,NULL,NULL,NULL,'',''),
 (391891,'atomic_dec()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/atomic.h',105,109,NULL,NULL,NULL,NULL,'',''),
 (391892,'atomic_dec_and_test()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/atomic.h',119,127,NULL,NULL,NULL,NULL,'',''),
 (391893,'atomic_inc_and_test()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/atomic.h',137,145,NULL,NULL,NULL,NULL,'',''),
 (391894,'atomic_add_negative()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/atomic.h',156,164,NULL,NULL,NULL,NULL,'',''),
 (391895,'atomic_add_return()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/atomic.h',173,196,NULL,NULL,NULL,NULL,'',''),
 (391896,'atomic_sub_return()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/atomic.h',205,208,NULL,NULL,NULL,NULL,'',''),
 (391897,'atomic_cmpxchg()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/atomic.h',213,216,NULL,NULL,NULL,NULL,'',''),
 (391898,'__cmpxchg_wrong_size()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (391899,'atomic_xchg()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/atomic.h',218,221,NULL,NULL,NULL,NULL,'',''),
 (391900,'__xchg_wrong_size()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (391901,'atomic_add_unless()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/atomic.h',232,245,NULL,NULL,NULL,NULL,'',''),
 (391902,'atomic_dec_if_positive()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/atomic.h',256,270,NULL,NULL,NULL,NULL,'',''),
 (391903,'atomic_inc_short()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/atomic.h',279,283,NULL,NULL,NULL,NULL,'',''),
 (391904,'atomic64_cmpxchg()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/atomic64_32.h',35,38,NULL,NULL,NULL,NULL,'',''),
 (391905,'atomic64_t.counter','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (391906,'atomic64_xchg()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/atomic64_32.h',48,59,NULL,NULL,NULL,NULL,'',''),
 (391907,'atomic64_set()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/atomic64_32.h',68,77,NULL,NULL,NULL,NULL,'',''),
 (391908,'atomic64_read()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/atomic64_32.h',85,93,NULL,NULL,NULL,NULL,'',''),
 (391909,'atomic64_add_return()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/atomic64_32.h',102,109,NULL,NULL,NULL,NULL,'',''),
 (391910,'atomic64_sub_return()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/atomic64_32.h',114,121,NULL,NULL,NULL,NULL,'',''),
 (391911,'atomic64_inc_return()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/atomic64_32.h',123,132,NULL,NULL,NULL,NULL,'',''),
 (391912,'atomic64_dec_return()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/atomic64_32.h',134,143,NULL,NULL,NULL,NULL,'',''),
 (391913,'atomic64_add()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/atomic64_32.h',152,159,NULL,NULL,NULL,NULL,'',''),
 (391914,'atomic64_sub()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/atomic64_32.h',168,175,NULL,NULL,NULL,NULL,'',''),
 (391915,'atomic64_sub_and_test()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/atomic64_32.h',186,189,NULL,NULL,NULL,NULL,'',''),
 (391916,'atomic64_inc()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/atomic64_32.h',197,203,NULL,NULL,NULL,NULL,'',''),
 (391917,'atomic64_dec()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/atomic64_32.h',211,217,NULL,NULL,NULL,NULL,'',''),
 (391918,'atomic64_dec_and_test()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/atomic64_32.h',227,230,NULL,NULL,NULL,NULL,'',''),
 (391919,'atomic64_inc_and_test()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/atomic64_32.h',240,243,NULL,NULL,NULL,NULL,'',''),
 (391920,'atomic64_add_negative()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/atomic64_32.h',254,257,NULL,NULL,NULL,NULL,'',''),
 (391921,'atomic64_add_unless()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/atomic64_32.h',268,276,NULL,NULL,NULL,NULL,'',''),
 (391922,'atomic64_inc_not_zero()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/atomic64_32.h',279,288,NULL,NULL,NULL,NULL,'',''),
 (391923,'atomic64_dec_if_positive()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/atomic64_32.h',290,299,NULL,NULL,NULL,NULL,'',''),
 (391924,'atomic_long_read()','D:','/usr/src/linux-2.6.37/include/asm-generic/atomic-long.h',144,149,NULL,NULL,NULL,NULL,'',''),
 (391925,'atomic_long_set()','D:','/usr/src/linux-2.6.37/include/asm-generic/atomic-long.h',151,156,NULL,NULL,NULL,NULL,'',''),
 (391926,'atomic_long_inc()','D:','/usr/src/linux-2.6.37/include/asm-generic/atomic-long.h',158,163,NULL,NULL,NULL,NULL,'',''),
 (391927,'atomic_long_dec()','D:','/usr/src/linux-2.6.37/include/asm-generic/atomic-long.h',165,170,NULL,NULL,NULL,NULL,'',''),
 (391928,'atomic_long_add()','D:','/usr/src/linux-2.6.37/include/asm-generic/atomic-long.h',172,177,NULL,NULL,NULL,NULL,'',''),
 (391929,'atomic_long_sub()','D:','/usr/src/linux-2.6.37/include/asm-generic/atomic-long.h',179,184,NULL,NULL,NULL,NULL,'',''),
 (391930,'atomic_long_sub_and_test()','D:','/usr/src/linux-2.6.37/include/asm-generic/atomic-long.h',186,191,NULL,NULL,NULL,NULL,'',''),
 (391931,'atomic_long_dec_and_test()','D:','/usr/src/linux-2.6.37/include/asm-generic/atomic-long.h',193,198,NULL,NULL,NULL,NULL,'',''),
 (391932,'atomic_long_inc_and_test()','D:','/usr/src/linux-2.6.37/include/asm-generic/atomic-long.h',200,205,NULL,NULL,NULL,NULL,'','');
INSERT INTO `emmcfs`.`element` VALUES  (391933,'atomic_long_add_negative()','D:','/usr/src/linux-2.6.37/include/asm-generic/atomic-long.h',207,212,NULL,NULL,NULL,NULL,'',''),
 (391934,'atomic_long_add_return()','D:','/usr/src/linux-2.6.37/include/asm-generic/atomic-long.h',214,219,NULL,NULL,NULL,NULL,'',''),
 (391935,'atomic_long_sub_return()','D:','/usr/src/linux-2.6.37/include/asm-generic/atomic-long.h',221,226,NULL,NULL,NULL,NULL,'',''),
 (391936,'atomic_long_inc_return()','D:','/usr/src/linux-2.6.37/include/asm-generic/atomic-long.h',228,233,NULL,NULL,NULL,NULL,'',''),
 (391937,'atomic_long_dec_return()','D:','/usr/src/linux-2.6.37/include/asm-generic/atomic-long.h',235,240,NULL,NULL,NULL,NULL,'',''),
 (391938,'atomic_long_add_unless()','D:','/usr/src/linux-2.6.37/include/asm-generic/atomic-long.h',242,247,NULL,NULL,NULL,NULL,'',''),
 (391939,'current_thread_info()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/thread_info.h',182,186,NULL,NULL,NULL,NULL,'',''),
 (391940,'current_stack_pointer','g:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (391941,'set_restore_sigmask()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/thread_info.h',250,255,NULL,NULL,NULL,NULL,'',''),
 (391942,'thread_info.status','S:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (391943,'thread_info.flags','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (391944,'set_ti_thread_flag()','D:','/usr/src/linux-2.6.37/include/linux/thread_info.h',65,68,NULL,NULL,NULL,NULL,'',''),
 (391945,'clear_ti_thread_flag()','D:','/usr/src/linux-2.6.37/include/linux/thread_info.h',70,73,NULL,NULL,NULL,NULL,'',''),
 (391946,'test_and_set_ti_thread_flag()','D:','/usr/src/linux-2.6.37/include/linux/thread_info.h',75,78,NULL,NULL,NULL,NULL,'',''),
 (391947,'test_and_clear_ti_thread_flag()','D:','/usr/src/linux-2.6.37/include/linux/thread_info.h',80,83,NULL,NULL,NULL,NULL,'',''),
 (391948,'test_ti_thread_flag()','D:','/usr/src/linux-2.6.37/include/linux/thread_info.h',85,88,NULL,NULL,NULL,NULL,'',''),
 (391949,'prefetch_range()','D:','/usr/src/linux-2.6.37/include/linux/prefetch.h',53,62,NULL,NULL,NULL,NULL,'',''),
 (391950,'INIT_LIST_HEAD()','D:','/usr/src/linux-2.6.37/include/linux/list.h',24,28,NULL,NULL,NULL,NULL,'',''),
 (391951,'list_head.next','S:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (391952,'list_head.prev','S:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (391953,'__list_add()','D:','/usr/src/linux-2.6.37/include/linux/list.h',37,45,NULL,NULL,NULL,NULL,'',''),
 (391954,'list_add()','D:','/usr/src/linux-2.6.37/include/linux/list.h',60,63,NULL,NULL,NULL,NULL,'',''),
 (391955,'list_add_tail()','D:','/usr/src/linux-2.6.37/include/linux/list.h',74,77,NULL,NULL,NULL,NULL,'',''),
 (391956,'__list_del()','D:','/usr/src/linux-2.6.37/include/linux/list.h',86,90,NULL,NULL,NULL,NULL,'',''),
 (391957,'list_del()','D:','/usr/src/linux-2.6.37/include/linux/list.h',99,104,NULL,NULL,NULL,NULL,'',''),
 (391958,'list_replace()','D:','/usr/src/linux-2.6.37/include/linux/list.h',116,123,NULL,NULL,NULL,NULL,'',''),
 (391959,'list_replace_init()','D:','/usr/src/linux-2.6.37/include/linux/list.h',125,130,NULL,NULL,NULL,NULL,'',''),
 (391960,'list_del_init()','D:','/usr/src/linux-2.6.37/include/linux/list.h',136,140,NULL,NULL,NULL,NULL,'',''),
 (391961,'list_move()','D:','/usr/src/linux-2.6.37/include/linux/list.h',147,151,NULL,NULL,NULL,NULL,'',''),
 (391962,'list_move_tail()','D:','/usr/src/linux-2.6.37/include/linux/list.h',158,163,NULL,NULL,NULL,NULL,'',''),
 (391963,'list_is_last()','D:','/usr/src/linux-2.6.37/include/linux/list.h',170,174,NULL,NULL,NULL,NULL,'',''),
 (391964,'list_empty()','D:','/usr/src/linux-2.6.37/include/linux/list.h',180,183,NULL,NULL,NULL,NULL,'',''),
 (391965,'list_empty_careful()','D:','/usr/src/linux-2.6.37/include/linux/list.h',198,202,NULL,NULL,NULL,NULL,'',''),
 (391966,'list_rotate_left()','D:','/usr/src/linux-2.6.37/include/linux/list.h',208,216,NULL,NULL,NULL,NULL,'',''),
 (391967,'list_is_singular()','D:','/usr/src/linux-2.6.37/include/linux/list.h',222,225,NULL,NULL,NULL,NULL,'',''),
 (391968,'__list_cut_position()','D:','/usr/src/linux-2.6.37/include/linux/list.h',227,237,NULL,NULL,NULL,NULL,'',''),
 (391969,'list_cut_position()','D:','/usr/src/linux-2.6.37/include/linux/list.h',253,265,NULL,NULL,NULL,NULL,'',''),
 (391970,'__list_splice()','D:','/usr/src/linux-2.6.37/include/linux/list.h',267,279,NULL,NULL,NULL,NULL,'',''),
 (391971,'list_splice()','D:','/usr/src/linux-2.6.37/include/linux/list.h',286,291,NULL,NULL,NULL,NULL,'',''),
 (391972,'list_splice_tail()','D:','/usr/src/linux-2.6.37/include/linux/list.h',298,303,NULL,NULL,NULL,NULL,'',''),
 (391973,'list_splice_init()','D:','/usr/src/linux-2.6.37/include/linux/list.h',312,319,NULL,NULL,NULL,NULL,'',''),
 (391974,'list_splice_tail_init()','D:','/usr/src/linux-2.6.37/include/linux/list.h',329,336,NULL,NULL,NULL,NULL,'',''),
 (391975,'INIT_HLIST_NODE()','D:','/usr/src/linux-2.6.37/include/linux/list.h',568,572,NULL,NULL,NULL,NULL,'',''),
 (391976,'hlist_node.next','S:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (391977,'hlist_node.pprev','S:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (391978,'hlist_unhashed()','D:','/usr/src/linux-2.6.37/include/linux/list.h',574,577,NULL,NULL,NULL,NULL,'',''),
 (391979,'hlist_empty()','D:','/usr/src/linux-2.6.37/include/linux/list.h',579,582,NULL,NULL,NULL,NULL,'',''),
 (391980,'hlist_head.first','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (391981,'__hlist_del()','D:','/usr/src/linux-2.6.37/include/linux/list.h',584,591,NULL,NULL,NULL,NULL,'',''),
 (391982,'hlist_del()','D:','/usr/src/linux-2.6.37/include/linux/list.h',593,598,NULL,NULL,NULL,NULL,'',''),
 (391983,'hlist_del_init()','D:','/usr/src/linux-2.6.37/include/linux/list.h',600,606,NULL,NULL,NULL,NULL,'',''),
 (391984,'hlist_add_head()','D:','/usr/src/linux-2.6.37/include/linux/list.h',608,616,NULL,NULL,NULL,NULL,'',''),
 (391985,'hlist_add_before()','D:','/usr/src/linux-2.6.37/include/linux/list.h',619,626,NULL,NULL,NULL,NULL,'',''),
 (391986,'hlist_add_after()','D:','/usr/src/linux-2.6.37/include/linux/list.h',628,637,NULL,NULL,NULL,NULL,'',''),
 (391987,'hlist_add_fake()','D:','/usr/src/linux-2.6.37/include/linux/list.h',640,643,NULL,NULL,NULL,NULL,'',''),
 (391988,'hlist_move_list()','D:','/usr/src/linux-2.6.37/include/linux/list.h',649,656,NULL,NULL,NULL,NULL,'',''),
 (391989,'preempt_notifier_init()','D:','/usr/src/linux-2.6.37/include/linux/preempt.h',135,140,NULL,NULL,NULL,NULL,'',''),
 (391990,'preempt_notifier.link','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (391991,'preempt_notifier.ops','S:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (391992,'lockdep_off()','D:','/usr/src/linux-2.6.37/include/linux/lockdep.h',348,350,NULL,NULL,NULL,NULL,'',''),
 (391993,'lockdep_on()','D:','/usr/src/linux-2.6.37/include/linux/lockdep.h',352,354,NULL,NULL,NULL,NULL,'',''),
 (391994,'early_boot_irqs_off()','D:','/usr/src/linux-2.6.37/include/linux/lockdep.h',443,445,NULL,NULL,NULL,NULL,'',''),
 (391995,'early_boot_irqs_on()','D:','/usr/src/linux-2.6.37/include/linux/lockdep.h',446,448,NULL,NULL,NULL,NULL,'',''),
 (391996,'print_irqtrace_events()','D:','/usr/src/linux-2.6.37/include/linux/lockdep.h',449,451,NULL,NULL,NULL,NULL,'',''),
 (391997,'__ticket_spin_lock()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/spinlock.h',61,78,NULL,NULL,NULL,NULL,'',''),
 (391998,'__ticket_spin_trylock()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/spinlock.h',80,97,NULL,NULL,NULL,NULL,'',''),
 (391999,'__ticket_spin_unlock()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/spinlock.h',99,105,NULL,NULL,NULL,NULL,'',''),
 (392000,'__ticket_spin_is_locked()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/spinlock.h',161,166,NULL,NULL,NULL,NULL,'',''),
 (392001,'arch_spinlock.slock','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392002,'__ticket_spin_is_contended()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/spinlock.h',168,173,NULL,NULL,NULL,NULL,'',''),
 (392003,'arch_spin_unlock_wait()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/spinlock.h',211,215,NULL,NULL,NULL,NULL,'',''),
 (392004,'arch_read_can_lock()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/spinlock.h',235,238,NULL,NULL,NULL,NULL,'',''),
 (392005,'arch_rwlock_t.lock','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392006,'arch_write_can_lock()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/spinlock.h',244,247,NULL,NULL,NULL,NULL,'',''),
 (392007,'arch_read_lock()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/spinlock.h',249,256,NULL,NULL,NULL,NULL,'',''),
 (392008,'arch_write_lock()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/spinlock.h',258,265,NULL,NULL,NULL,NULL,'',''),
 (392009,'arch_read_trylock()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/spinlock.h',267,275,NULL,NULL,NULL,NULL,'',''),
 (392010,'arch_write_trylock()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/spinlock.h',277,285,NULL,NULL,NULL,NULL,'',''),
 (392011,'arch_read_unlock()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/spinlock.h',287,290,NULL,NULL,NULL,NULL,'',''),
 (392012,'arch_write_unlock()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/spinlock.h',292,296,NULL,NULL,NULL,NULL,'',''),
 (392013,'smp_mb__after_lock()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/spinlock.h',306,306,NULL,NULL,NULL,NULL,'',''),
 (392014,'do_raw_spin_lock()','D:','/usr/src/linux-2.6.37/include/linux/spinlock.h',137,141,NULL,NULL,NULL,NULL,'',''),
 (392015,'raw_spinlock.raw_lock','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392016,'do_raw_spin_lock_flags()','D:','/usr/src/linux-2.6.37/include/linux/spinlock.h',143,148,NULL,NULL,NULL,NULL,'',''),
 (392017,'do_raw_spin_trylock()','D:','/usr/src/linux-2.6.37/include/linux/spinlock.h',150,153,NULL,NULL,NULL,NULL,'',''),
 (392018,'do_raw_spin_unlock()','D:','/usr/src/linux-2.6.37/include/linux/spinlock.h',155,159,NULL,NULL,NULL,NULL,'',''),
 (392019,'__raw_spin_trylock()','D:','/usr/src/linux-2.6.37/include/linux/spinlock_api_smp.h',86,95,NULL,NULL,NULL,NULL,'',''),
 (392020,'__raw_spin_lock_irqsave()','D:','/usr/src/linux-2.6.37/include/linux/spinlock_api_smp.h',104,122,NULL,NULL,NULL,NULL,'',''),
 (392021,'__raw_spin_lock_irq()','D:','/usr/src/linux-2.6.37/include/linux/spinlock_api_smp.h',124,130,NULL,NULL,NULL,NULL,'',''),
 (392022,'__raw_spin_lock_bh()','D:','/usr/src/linux-2.6.37/include/linux/spinlock_api_smp.h',132,138,NULL,NULL,NULL,NULL,'',''),
 (392023,'local_bh_disable()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392024,'__raw_spin_lock()','D:','/usr/src/linux-2.6.37/include/linux/spinlock_api_smp.h',140,145,NULL,NULL,NULL,NULL,'',''),
 (392025,'__raw_spin_unlock()','D:','/usr/src/linux-2.6.37/include/linux/spinlock_api_smp.h',149,154,NULL,NULL,NULL,NULL,'',''),
 (392026,'__raw_spin_unlock_irqrestore()','D:','/usr/src/linux-2.6.37/include/linux/spinlock_api_smp.h',156,163,NULL,NULL,NULL,NULL,'',''),
 (392027,'__raw_spin_unlock_irq()','D:','/usr/src/linux-2.6.37/include/linux/spinlock_api_smp.h',165,171,NULL,NULL,NULL,NULL,'',''),
 (392028,'__raw_spin_unlock_bh()','D:','/usr/src/linux-2.6.37/include/linux/spinlock_api_smp.h',173,179,NULL,NULL,NULL,NULL,'',''),
 (392029,'local_bh_enable_ip()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392030,'__builtin_return_address()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392031,'__raw_spin_trylock_bh()','D:','/usr/src/linux-2.6.37/include/linux/spinlock_api_smp.h',181,192,NULL,NULL,NULL,NULL,'',''),
 (392032,'__raw_read_trylock()','D:','/usr/src/linux-2.6.37/include/linux/rwlock_api_smp.h',117,126,NULL,NULL,NULL,NULL,'',''),
 (392033,'rwlock_t.raw_lock','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392034,'__raw_write_trylock()','D:','/usr/src/linux-2.6.37/include/linux/rwlock_api_smp.h',128,137,NULL,NULL,NULL,NULL,'',''),
 (392035,'__raw_read_lock()','D:','/usr/src/linux-2.6.37/include/linux/rwlock_api_smp.h',146,151,NULL,NULL,NULL,NULL,'',''),
 (392036,'__raw_read_lock_irqsave()','D:','/usr/src/linux-2.6.37/include/linux/rwlock_api_smp.h',153,163,NULL,NULL,NULL,NULL,'',''),
 (392037,'__raw_read_lock_irq()','D:','/usr/src/linux-2.6.37/include/linux/rwlock_api_smp.h',165,171,NULL,NULL,NULL,NULL,'',''),
 (392038,'__raw_read_lock_bh()','D:','/usr/src/linux-2.6.37/include/linux/rwlock_api_smp.h',173,179,NULL,NULL,NULL,NULL,'',''),
 (392039,'__raw_write_lock_irqsave()','D:','/usr/src/linux-2.6.37/include/linux/rwlock_api_smp.h',181,191,NULL,NULL,NULL,NULL,'',''),
 (392040,'__raw_write_lock_irq()','D:','/usr/src/linux-2.6.37/include/linux/rwlock_api_smp.h',193,199,NULL,NULL,NULL,NULL,'',''),
 (392041,'__raw_write_lock_bh()','D:','/usr/src/linux-2.6.37/include/linux/rwlock_api_smp.h',201,207,NULL,NULL,NULL,NULL,'',''),
 (392042,'__raw_write_lock()','D:','/usr/src/linux-2.6.37/include/linux/rwlock_api_smp.h',209,214,NULL,NULL,NULL,NULL,'',''),
 (392043,'__raw_write_unlock()','D:','/usr/src/linux-2.6.37/include/linux/rwlock_api_smp.h',218,223,NULL,NULL,NULL,NULL,'',''),
 (392044,'__raw_read_unlock()','D:','/usr/src/linux-2.6.37/include/linux/rwlock_api_smp.h',225,230,NULL,NULL,NULL,NULL,'',''),
 (392045,'__raw_read_unlock_irqrestore()','D:','/usr/src/linux-2.6.37/include/linux/rwlock_api_smp.h',232,239,NULL,NULL,NULL,NULL,'',''),
 (392046,'__raw_read_unlock_irq()','D:','/usr/src/linux-2.6.37/include/linux/rwlock_api_smp.h',241,247,NULL,NULL,NULL,NULL,'',''),
 (392047,'__raw_read_unlock_bh()','D:','/usr/src/linux-2.6.37/include/linux/rwlock_api_smp.h',249,255,NULL,NULL,NULL,NULL,'',''),
 (392048,'__raw_write_unlock_irqrestore()','D:','/usr/src/linux-2.6.37/include/linux/rwlock_api_smp.h',257,264,NULL,NULL,NULL,NULL,'',''),
 (392049,'__raw_write_unlock_irq()','D:','/usr/src/linux-2.6.37/include/linux/rwlock_api_smp.h',266,272,NULL,NULL,NULL,NULL,'',''),
 (392050,'__raw_write_unlock_bh()','D:','/usr/src/linux-2.6.37/include/linux/rwlock_api_smp.h',274,280,NULL,NULL,NULL,NULL,'',''),
 (392051,'spinlock_check()','D:','/usr/src/linux-2.6.37/include/linux/spinlock.h',272,275,NULL,NULL,NULL,NULL,'',''),
 (392052,'spinlock.rlock','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392053,'spin_lock()','D:','/usr/src/linux-2.6.37/include/linux/spinlock.h',283,286,NULL,NULL,NULL,NULL,'',''),
 (392054,'_raw_spin_lock()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392055,'spin_lock_bh()','D:','/usr/src/linux-2.6.37/include/linux/spinlock.h',288,291,NULL,NULL,NULL,NULL,'',''),
 (392056,'_raw_spin_lock_bh()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392057,'spin_trylock()','D:','/usr/src/linux-2.6.37/include/linux/spinlock.h',293,296,NULL,NULL,NULL,NULL,'',''),
 (392058,'_raw_spin_trylock()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392059,'spin_lock_irq()','D:','/usr/src/linux-2.6.37/include/linux/spinlock.h',308,311,NULL,NULL,NULL,NULL,'',''),
 (392060,'_raw_spin_lock_irq()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392061,'spin_unlock()','D:','/usr/src/linux-2.6.37/include/linux/spinlock.h',323,326,NULL,NULL,NULL,NULL,'',''),
 (392062,'spin_unlock_bh()','D:','/usr/src/linux-2.6.37/include/linux/spinlock.h',328,331,NULL,NULL,NULL,NULL,'',''),
 (392063,'_raw_spin_unlock_bh()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392064,'spin_unlock_irq()','D:','/usr/src/linux-2.6.37/include/linux/spinlock.h',333,336,NULL,NULL,NULL,NULL,'',''),
 (392065,'spin_unlock_irqrestore()','D:','/usr/src/linux-2.6.37/include/linux/spinlock.h',338,341,NULL,NULL,NULL,NULL,'',''),
 (392066,'_raw_spin_unlock_irqrestore()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392067,'spin_trylock_bh()','D:','/usr/src/linux-2.6.37/include/linux/spinlock.h',343,346,NULL,NULL,NULL,NULL,'',''),
 (392068,'_raw_spin_trylock_bh()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392069,'spin_trylock_irq()','D:','/usr/src/linux-2.6.37/include/linux/spinlock.h',348,351,NULL,NULL,NULL,NULL,'',''),
 (392070,'spin_unlock_wait()','D:','/usr/src/linux-2.6.37/include/linux/spinlock.h',358,361,NULL,NULL,NULL,NULL,'',''),
 (392071,'spin_is_locked()','D:','/usr/src/linux-2.6.37/include/linux/spinlock.h',363,366,NULL,NULL,NULL,NULL,'',''),
 (392072,'spin_is_contended()','D:','/usr/src/linux-2.6.37/include/linux/spinlock.h',368,371,NULL,NULL,NULL,NULL,'',''),
 (392073,'spin_can_lock()','D:','/usr/src/linux-2.6.37/include/linux/spinlock.h',373,376,NULL,NULL,NULL,NULL,'',''),
 (392074,'assert_spin_locked()','D:','/usr/src/linux-2.6.37/include/linux/spinlock.h',378,381,NULL,NULL,NULL,NULL,'',''),
 (392075,'init_waitqueue_entry()','D:','/usr/src/linux-2.6.37/include/linux/wait.h',98,103,NULL,NULL,NULL,NULL,'',''),
 (392076,'__wait_queue.flags','S:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392077,'__wait_queue.private','S:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392078,'__wait_queue.func','S:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392079,'default_wake_function','g:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392080,'init_waitqueue_func_entry()','D:','/usr/src/linux-2.6.37/include/linux/wait.h',105,111,NULL,NULL,NULL,NULL,'',''),
 (392081,'waitqueue_active()','D:','/usr/src/linux-2.6.37/include/linux/wait.h',113,116,NULL,NULL,NULL,NULL,'',''),
 (392082,'__wait_queue_head.task_list','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392083,'__add_wait_queue()','D:','/usr/src/linux-2.6.37/include/linux/wait.h',122,125,NULL,NULL,NULL,NULL,'',''),
 (392084,'__wait_queue.task_list','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392085,'__add_wait_queue_exclusive()','D:','/usr/src/linux-2.6.37/include/linux/wait.h',130,135,NULL,NULL,NULL,NULL,'',''),
 (392086,'__add_wait_queue_tail()','D:','/usr/src/linux-2.6.37/include/linux/wait.h',137,141,NULL,NULL,NULL,NULL,'',''),
 (392087,'__add_wait_queue_tail_exclusive()','D:','/usr/src/linux-2.6.37/include/linux/wait.h',143,148,NULL,NULL,NULL,NULL,'',''),
 (392088,'__remove_wait_queue()','D:','/usr/src/linux-2.6.37/include/linux/wait.h',150,154,NULL,NULL,NULL,NULL,'',''),
 (392089,'wait_on_bit()','D:','/usr/src/linux-2.6.37/include/linux/wait.h',634,640,NULL,NULL,NULL,NULL,'',''),
 (392090,'out_of_line_wait_on_bit()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392091,'wait_on_bit_lock()','D:','/usr/src/linux-2.6.37/include/linux/wait.h',658,664,NULL,NULL,NULL,NULL,'',''),
 (392092,'out_of_line_wait_on_bit_lock()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392093,'write_seqlock()','D:','/usr/src/linux-2.6.37/include/linux/seqlock.h',60,65,NULL,NULL,NULL,NULL,'',''),
 (392094,'seqlock_t.lock','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392095,'seqlock_t.sequence','S:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392096,'write_sequnlock()','D:','/usr/src/linux-2.6.37/include/linux/seqlock.h',67,72,NULL,NULL,NULL,NULL,'',''),
 (392097,'write_tryseqlock()','D:','/usr/src/linux-2.6.37/include/linux/seqlock.h',74,83,NULL,NULL,NULL,NULL,'',''),
 (392098,'read_seqbegin()','D:','/usr/src/linux-2.6.37/include/linux/seqlock.h',86,99,NULL,NULL,NULL,NULL,'',''),
 (392099,'read_seqretry()','D:','/usr/src/linux-2.6.37/include/linux/seqlock.h',106,111,NULL,NULL,NULL,NULL,'',''),
 (392100,'read_seqcount_begin()','D:','/usr/src/linux-2.6.37/include/linux/seqlock.h',129,141,NULL,NULL,NULL,NULL,'',''),
 (392101,'seqcount.sequence','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392102,'read_seqcount_retry()','D:','/usr/src/linux-2.6.37/include/linux/seqlock.h',146,151,NULL,NULL,NULL,NULL,'',''),
 (392103,'write_seqcount_begin()','D:','/usr/src/linux-2.6.37/include/linux/seqlock.h',158,162,NULL,NULL,NULL,NULL,'',''),
 (392104,'write_seqcount_end()','D:','/usr/src/linux-2.6.37/include/linux/seqlock.h',164,168,NULL,NULL,NULL,NULL,'',''),
 (392105,'__node_set()','D:','/usr/src/linux-2.6.37/include/linux/nodemask.h',100,103,NULL,NULL,NULL,NULL,'',''),
 (392106,'nodemask_t.bits','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392107,'__node_clear()','D:','/usr/src/linux-2.6.37/include/linux/nodemask.h',106,109,NULL,NULL,NULL,NULL,'',''),
 (392108,'__nodes_setall()','D:','/usr/src/linux-2.6.37/include/linux/nodemask.h',112,115,NULL,NULL,NULL,NULL,'',''),
 (392109,'__nodes_clear()','D:','/usr/src/linux-2.6.37/include/linux/nodemask.h',118,121,NULL,NULL,NULL,NULL,'',''),
 (392110,'__node_test_and_set()','D:','/usr/src/linux-2.6.37/include/linux/nodemask.h',128,131,NULL,NULL,NULL,NULL,'',''),
 (392111,'__nodes_and()','D:','/usr/src/linux-2.6.37/include/linux/nodemask.h',135,139,NULL,NULL,NULL,NULL,'',''),
 (392112,'__nodes_or()','D:','/usr/src/linux-2.6.37/include/linux/nodemask.h',143,147,NULL,NULL,NULL,NULL,'',''),
 (392113,'__nodes_xor()','D:','/usr/src/linux-2.6.37/include/linux/nodemask.h',151,155,NULL,NULL,NULL,NULL,'',''),
 (392114,'__nodes_andnot()','D:','/usr/src/linux-2.6.37/include/linux/nodemask.h',159,163,NULL,NULL,NULL,NULL,'',''),
 (392115,'__nodes_complement()','D:','/usr/src/linux-2.6.37/include/linux/nodemask.h',167,171,NULL,NULL,NULL,NULL,'',''),
 (392116,'__nodes_equal()','D:','/usr/src/linux-2.6.37/include/linux/nodemask.h',175,179,NULL,NULL,NULL,NULL,'',''),
 (392117,'__nodes_intersects()','D:','/usr/src/linux-2.6.37/include/linux/nodemask.h',183,187,NULL,NULL,NULL,NULL,'',''),
 (392118,'__nodes_subset()','D:','/usr/src/linux-2.6.37/include/linux/nodemask.h',191,195,NULL,NULL,NULL,NULL,'',''),
 (392119,'__nodes_empty()','D:','/usr/src/linux-2.6.37/include/linux/nodemask.h',198,201,NULL,NULL,NULL,NULL,'',''),
 (392120,'__nodes_full()','D:','/usr/src/linux-2.6.37/include/linux/nodemask.h',204,207,NULL,NULL,NULL,NULL,'',''),
 (392121,'__nodes_weight()','D:','/usr/src/linux-2.6.37/include/linux/nodemask.h',210,213,NULL,NULL,NULL,NULL,'',''),
 (392122,'__nodes_shift_right()','D:','/usr/src/linux-2.6.37/include/linux/nodemask.h',217,221,NULL,NULL,NULL,NULL,'',''),
 (392123,'__nodes_shift_left()','D:','/usr/src/linux-2.6.37/include/linux/nodemask.h',225,229,NULL,NULL,NULL,NULL,'',''),
 (392124,'__first_node()','D:','/usr/src/linux-2.6.37/include/linux/nodemask.h',235,238,NULL,NULL,NULL,NULL,'',''),
 (392125,'__next_node()','D:','/usr/src/linux-2.6.37/include/linux/nodemask.h',241,244,NULL,NULL,NULL,NULL,'',''),
 (392126,'init_nodemask_of_node()','D:','/usr/src/linux-2.6.37/include/linux/nodemask.h',246,250,NULL,NULL,NULL,NULL,'',''),
 (392127,'__first_unset_node()','D:','/usr/src/linux-2.6.37/include/linux/nodemask.h',264,268,NULL,NULL,NULL,NULL,'',''),
 (392128,'find_first_zero_bit()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392129,'__nodemask_scnprintf()','D:','/usr/src/linux-2.6.37/include/linux/nodemask.h',298,302,NULL,NULL,NULL,NULL,'',''),
 (392130,'__nodemask_parse_user()','D:','/usr/src/linux-2.6.37/include/linux/nodemask.h',306,310,NULL,NULL,NULL,NULL,'',''),
 (392131,'__nodelist_scnprintf()','D:','/usr/src/linux-2.6.37/include/linux/nodemask.h',314,318,NULL,NULL,NULL,NULL,'',''),
 (392132,'__nodelist_parse()','D:','/usr/src/linux-2.6.37/include/linux/nodemask.h',321,324,NULL,NULL,NULL,NULL,'',''),
 (392133,'__node_remap()','D:','/usr/src/linux-2.6.37/include/linux/nodemask.h',328,332,NULL,NULL,NULL,NULL,'',''),
 (392134,'bitmap_bitremap()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392135,'__nodes_remap()','D:','/usr/src/linux-2.6.37/include/linux/nodemask.h',336,340,NULL,NULL,NULL,NULL,'',''),
 (392136,'bitmap_remap()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392137,'__nodes_onto()','D:','/usr/src/linux-2.6.37/include/linux/nodemask.h',344,348,NULL,NULL,NULL,NULL,'',''),
 (392138,'bitmap_onto()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392139,'__nodes_fold()','D:','/usr/src/linux-2.6.37/include/linux/nodemask.h',352,356,NULL,NULL,NULL,NULL,'',''),
 (392140,'bitmap_fold()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392141,'node_state()','D:','/usr/src/linux-2.6.37/include/linux/nodemask.h',435,438,NULL,NULL,NULL,NULL,'',''),
 (392142,'node_set_state()','D:','/usr/src/linux-2.6.37/include/linux/nodemask.h',440,442,NULL,NULL,NULL,NULL,'',''),
 (392143,'node_clear_state()','D:','/usr/src/linux-2.6.37/include/linux/nodemask.h',444,446,NULL,NULL,NULL,NULL,'',''),
 (392144,'num_node_state()','D:','/usr/src/linux-2.6.37/include/linux/nodemask.h',448,451,NULL,NULL,NULL,NULL,'',''),
 (392145,'get_pageblock_migratetype()','D:','/usr/src/linux-2.6.37/include/linux/mmzone.h',52,55,NULL,NULL,NULL,NULL,'',''),
 (392146,'get_pageblock_flags_group()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392147,'is_file_lru()','D:','/usr/src/linux-2.6.37/include/linux/mmzone.h',145,148,NULL,NULL,NULL,NULL,'',''),
 (392148,'is_active_lru()','D:','/usr/src/linux-2.6.37/include/linux/mmzone.h',150,153,NULL,NULL,NULL,NULL,'',''),
 (392149,'is_unevictable_lru()','D:','/usr/src/linux-2.6.37/include/linux/mmzone.h',155,158,NULL,NULL,NULL,NULL,'',''),
 (392150,'zone_set_flag()','D:','/usr/src/linux-2.6.37/include/linux/mmzone.h',431,434,NULL,NULL,NULL,NULL,'',''),
 (392151,'zone.flags','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392152,'zone_test_and_set_flag()','D:','/usr/src/linux-2.6.37/include/linux/mmzone.h',436,439,NULL,NULL,NULL,NULL,'',''),
 (392153,'zone_clear_flag()','D:','/usr/src/linux-2.6.37/include/linux/mmzone.h',441,444,NULL,NULL,NULL,NULL,'',''),
 (392154,'zone_is_reclaim_congested()','D:','/usr/src/linux-2.6.37/include/linux/mmzone.h',446,449,NULL,NULL,NULL,NULL,'',''),
 (392155,'zone_is_reclaim_locked()','D:','/usr/src/linux-2.6.37/include/linux/mmzone.h',451,454,NULL,NULL,NULL,NULL,'',''),
 (392156,'zone_is_oom_locked()','D:','/usr/src/linux-2.6.37/include/linux/mmzone.h',456,459,NULL,NULL,NULL,NULL,'',''),
 (392157,'mutex_is_locked()','D:','/usr/src/linux-2.6.37/include/linux/mutex.h',124,127,NULL,NULL,NULL,NULL,'',''),
 (392158,'mutex.count','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392159,'__down_read()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/rwsem.h',117,129,NULL,NULL,NULL,NULL,'',''),
 (392160,'__down_read_trylock()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/rwsem.h',134,151,NULL,NULL,NULL,NULL,'',''),
 (392161,'__down_write_nested()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/rwsem.h',156,171,NULL,NULL,NULL,NULL,'',''),
 (392162,'__down_write()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/rwsem.h',173,176,NULL,NULL,NULL,NULL,'',''),
 (392163,'__down_write_trylock()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/rwsem.h',181,189,NULL,NULL,NULL,NULL,'',''),
 (392164,'rw_semaphore.count','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392165,'__up_read()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/rwsem.h',194,207,NULL,NULL,NULL,NULL,'',''),
 (392166,'__up_write()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/rwsem.h',212,225,NULL,NULL,NULL,NULL,'',''),
 (392167,'__downgrade_write()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/rwsem.h',230,245,NULL,NULL,NULL,NULL,'',''),
 (392168,'rwsem_atomic_add()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/rwsem.h',250,256,NULL,NULL,NULL,NULL,'',''),
 (392169,'rwsem_atomic_update()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/rwsem.h',261,271,NULL,NULL,NULL,NULL,'',''),
 (392170,'rwsem_is_locked()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/rwsem.h',273,276,NULL,NULL,NULL,NULL,'',''),
 (392171,'srcu_read_lock_held()','D:','/usr/src/linux-2.6.37/include/linux/srcu.h',103,106,NULL,NULL,NULL,NULL,'',''),
 (392172,'srcu_read_lock()','D:','/usr/src/linux-2.6.37/include/linux/srcu.h',149,155,NULL,NULL,NULL,NULL,'',''),
 (392173,'__srcu_read_lock()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392174,'srcu_read_unlock()','D:','/usr/src/linux-2.6.37/include/linux/srcu.h',164,169,NULL,NULL,NULL,NULL,'',''),
 (392175,'__srcu_read_unlock()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392176,'notifier_from_errno()','D:','/usr/src/linux-2.6.37/include/linux/notifier.h',165,171,NULL,NULL,NULL,NULL,'',''),
 (392177,'notifier_to_errno()','D:','/usr/src/linux-2.6.37/include/linux/notifier.h',174,178,NULL,NULL,NULL,NULL,'',''),
 (392178,'pgdat_resize_lock()','D:','/usr/src/linux-2.6.37/include/linux/memory_hotplug.h',171,171,NULL,NULL,NULL,NULL,'',''),
 (392179,'pgdat_resize_unlock()','D:','/usr/src/linux-2.6.37/include/linux/memory_hotplug.h',172,172,NULL,NULL,NULL,NULL,'',''),
 (392180,'pgdat_resize_init()','D:','/usr/src/linux-2.6.37/include/linux/memory_hotplug.h',173,173,NULL,NULL,NULL,NULL,'',''),
 (392181,'zone_span_seqbegin()','D:','/usr/src/linux-2.6.37/include/linux/memory_hotplug.h',175,178,NULL,NULL,NULL,NULL,'',''),
 (392182,'zone_span_seqretry()','D:','/usr/src/linux-2.6.37/include/linux/memory_hotplug.h',179,182,NULL,NULL,NULL,NULL,'',''),
 (392183,'zone_span_writelock()','D:','/usr/src/linux-2.6.37/include/linux/memory_hotplug.h',183,183,NULL,NULL,NULL,NULL,'',''),
 (392184,'zone_span_writeunlock()','D:','/usr/src/linux-2.6.37/include/linux/memory_hotplug.h',184,184,NULL,NULL,NULL,NULL,'',''),
 (392185,'zone_seqlock_init()','D:','/usr/src/linux-2.6.37/include/linux/memory_hotplug.h',185,185,NULL,NULL,NULL,NULL,'',''),
 (392186,'mhp_notimplemented()','D:','/usr/src/linux-2.6.37/include/linux/memory_hotplug.h',187,192,NULL,NULL,NULL,NULL,'',''),
 (392187,'printk()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392188,'dump_stack()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392189,'register_page_bootmem_info_node()','D:','/usr/src/linux-2.6.37/include/linux/memory_hotplug.h',194,196,NULL,NULL,NULL,NULL,'',''),
 (392190,'lock_memory_hotplug()','D:','/usr/src/linux-2.6.37/include/linux/memory_hotplug.h',198,198,NULL,NULL,NULL,NULL,'',''),
 (392191,'unlock_memory_hotplug()','D:','/usr/src/linux-2.6.37/include/linux/memory_hotplug.h',199,199,NULL,NULL,NULL,NULL,'',''),
 (392192,'is_mem_section_removable()','D:','/usr/src/linux-2.6.37/include/linux/memory_hotplug.h',208,212,NULL,NULL,NULL,NULL,'',''),
 (392193,'memory_present()','D:','/usr/src/linux-2.6.37/include/linux/mmzone.h',677,677,NULL,NULL,NULL,NULL,'',''),
 (392194,'local_memory_node()','D:','/usr/src/linux-2.6.37/include/linux/mmzone.h',683,683,NULL,NULL,NULL,NULL,'',''),
 (392195,'populated_zone()','D:','/usr/src/linux-2.6.37/include/linux/mmzone.h',695,698,NULL,NULL,NULL,NULL,'',''),
 (392196,'zone.present_pages','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392197,'zone_movable_is_highmem()','D:','/usr/src/linux-2.6.37/include/linux/mmzone.h',702,709,NULL,NULL,NULL,NULL,'',''),
 (392198,'movable_zone','g:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392199,'is_highmem_idx()','D:','/usr/src/linux-2.6.37/include/linux/mmzone.h',711,719,NULL,NULL,NULL,NULL,'',''),
 (392200,'is_normal_idx()','D:','/usr/src/linux-2.6.37/include/linux/mmzone.h',721,724,NULL,NULL,NULL,NULL,'',''),
 (392201,'is_highmem()','D:','/usr/src/linux-2.6.37/include/linux/mmzone.h',732,742,NULL,NULL,NULL,NULL,'',''),
 (392202,'zone.zone_pgdat','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392203,'pglist_data.node_zones','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392204,'is_normal()','D:','/usr/src/linux-2.6.37/include/linux/mmzone.h',744,747,NULL,NULL,NULL,NULL,'',''),
 (392205,'is_dma32()','D:','/usr/src/linux-2.6.37/include/linux/mmzone.h',749,756,NULL,NULL,NULL,NULL,'',''),
 (392206,'is_dma()','D:','/usr/src/linux-2.6.37/include/linux/mmzone.h',758,765,NULL,NULL,NULL,NULL,'',''),
 (392207,'zonelist_zone()','D:','/usr/src/linux-2.6.37/include/linux/mmzone.h',830,833,NULL,NULL,NULL,NULL,'',''),
 (392208,'zoneref.zone','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392209,'zonelist_zone_idx()','D:','/usr/src/linux-2.6.37/include/linux/mmzone.h',835,838,NULL,NULL,NULL,NULL,'',''),
 (392210,'zoneref.zone_idx','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392211,'zonelist_node_idx()','D:','/usr/src/linux-2.6.37/include/linux/mmzone.h',840,848,NULL,NULL,NULL,NULL,'',''),
 (392212,'first_zones_zonelist()','D:','/usr/src/linux-2.6.37/include/linux/mmzone.h',880,887,NULL,NULL,NULL,NULL,'',''),
 (392213,'next_zones_zonelist()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392214,'zonelist._zonerefs','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392215,'memmap_valid_within()','D:','/usr/src/linux-2.6.37/include/linux/mmzone.h',1138,1142,NULL,NULL,NULL,NULL,'',''),
 (392216,'early_memtest()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/e820.h',113,115,NULL,NULL,NULL,NULL,'',''),
 (392217,'is_ISA_range()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/e820.h',135,138,NULL,NULL,NULL,NULL,'',''),
 (392218,'resource_size()','D:','/usr/src/linux-2.6.37/include/linux/ioport.h',138,141,NULL,NULL,NULL,NULL,'',''),
 (392219,'resource.end','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392220,'resource.start','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392221,'resource_type()','D:','/usr/src/linux-2.6.37/include/linux/ioport.h',142,145,NULL,NULL,NULL,NULL,'',''),
 (392222,'resource.flags','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392223,'check_region()','D:','/usr/src/linux-2.6.37/include/linux/ioport.h',170,174,NULL,NULL,NULL,NULL,'',''),
 (392224,'__check_region()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392225,'ioport_resource','g:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392226,'get_smp_config()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/mpspec.h',62,65,NULL,NULL,NULL,NULL,'',''),
 (392227,'x86_init','g:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392228,'x86_init_ops.mpparse','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392229,'x86_init_mpparse.get_smp_config','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392230,'*x86_init_mpparse.get_smp_config()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392231,'early_get_smp_config()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/mpspec.h',67,70,NULL,NULL,NULL,NULL,'',''),
 (392232,'find_smp_config()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/mpspec.h',72,75,NULL,NULL,NULL,NULL,'',''),
 (392233,'x86_init_mpparse.find_smp_config','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392234,'*x86_init_mpparse.find_smp_config()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392235,'physids_coerce()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/mpspec.h',151,154,NULL,NULL,NULL,NULL,'',''),
 (392236,'physid_mask.mask[]','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392237,'physid_mask.mask','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392238,'physids_promote()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/mpspec.h',156,160,NULL,NULL,NULL,NULL,'',''),
 (392239,'physid_set_mask_of_physid()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/mpspec.h',170,174,NULL,NULL,NULL,NULL,'',''),
 (392240,'ssleep()','D:','/usr/src/linux-2.6.37/include/linux/delay.h',50,53,NULL,NULL,NULL,NULL,'',''),
 (392241,'msleep()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392242,'timespec_equal()','D:','/usr/src/linux-2.6.37/include/linux/time.h',45,49,NULL,NULL,NULL,NULL,'',''),
 (392243,'timespec.tv_sec','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392244,'timespec.tv_nsec','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392245,'timespec_compare()','D:','/usr/src/linux-2.6.37/include/linux/time.h',56,63,NULL,NULL,NULL,NULL,'',''),
 (392246,'timeval_compare()','D:','/usr/src/linux-2.6.37/include/linux/time.h',65,72,NULL,NULL,NULL,NULL,'',''),
 (392247,'timeval.tv_sec','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392248,'timeval.tv_usec','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392249,'timespec_add()','D:','/usr/src/linux-2.6.37/include/linux/time.h',89,96,NULL,NULL,NULL,NULL,'',''),
 (392250,'set_normalized_timespec()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392251,'timespec_sub()','D:','/usr/src/linux-2.6.37/include/linux/time.h',101,108,NULL,NULL,NULL,NULL,'',''),
 (392252,'arch_gettimeoffset()','D:','/usr/src/linux-2.6.37/include/linux/time.h',146,146,NULL,NULL,NULL,NULL,'',''),
 (392253,'timespec_to_ns()','D:','/usr/src/linux-2.6.37/include/linux/time.h',208,211,NULL,NULL,NULL,NULL,'',''),
 (392254,'timeval_to_ns()','D:','/usr/src/linux-2.6.37/include/linux/time.h',220,224,NULL,NULL,NULL,NULL,'',''),
 (392255,'timespec_add_ns()','D:','/usr/src/linux-2.6.37/include/linux/time.h',250,254,NULL,NULL,NULL,NULL,'',''),
 (392256,'get_cycles()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/tsc.h',22,33,NULL,NULL,NULL,NULL,'',''),
 (392257,'vget_cycles()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/tsc.h',35,46,NULL,NULL,NULL,NULL,'',''),
 (392258,'ntp_synced()','D:','/usr/src/linux-2.6.37/include/linux/timex.h',248,251,NULL,NULL,NULL,NULL,'',''),
 (392259,'time_status','g:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392260,'ktime_set()','D:','/usr/src/linux-2.6.37/include/linux/ktime.h',81,88,NULL,NULL,NULL,NULL,'',''),
 (392261,'ktime.tv64','S:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392262,'timespec_to_ktime()','D:','/usr/src/linux-2.6.37/include/linux/ktime.h',113,116,NULL,NULL,NULL,NULL,'',''),
 (392263,'timeval_to_ktime()','D:','/usr/src/linux-2.6.37/include/linux/ktime.h',119,122,NULL,NULL,NULL,NULL,'',''),
 (392264,'ktime_equal()','D:','/usr/src/linux-2.6.37/include/linux/ktime.h',287,290,NULL,NULL,NULL,NULL,'',''),
 (392265,'ktime_to_us()','D:','/usr/src/linux-2.6.37/include/linux/ktime.h',292,296,NULL,NULL,NULL,NULL,'',''),
 (392266,'ns_to_timeval()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392267,'ktime_to_ms()','D:','/usr/src/linux-2.6.37/include/linux/ktime.h',298,302,NULL,NULL,NULL,NULL,'',''),
 (392268,'ktime_us_delta()','D:','/usr/src/linux-2.6.37/include/linux/ktime.h',304,307,NULL,NULL,NULL,NULL,'',''),
 (392269,'ktime_add_us()','D:','/usr/src/linux-2.6.37/include/linux/ktime.h',309,312,NULL,NULL,NULL,NULL,'',''),
 (392270,'ktime_sub_us()','D:','/usr/src/linux-2.6.37/include/linux/ktime.h',314,317,NULL,NULL,NULL,NULL,'',''),
 (392271,'ns_to_ktime()','D:','/usr/src/linux-2.6.37/include/linux/ktime.h',336,340,NULL,NULL,NULL,NULL,'',''),
 (392272,'debug_object_init()','D:','/usr/src/linux-2.6.37/include/linux/debugobjects.h',77,78,NULL,NULL,NULL,NULL,'',''),
 (392273,'debug_object_init_on_stack()','D:','/usr/src/linux-2.6.37/include/linux/debugobjects.h',79,80,NULL,NULL,NULL,NULL,'',''),
 (392274,'debug_object_activate()','D:','/usr/src/linux-2.6.37/include/linux/debugobjects.h',81,82,NULL,NULL,NULL,NULL,'',''),
 (392275,'debug_object_deactivate()','D:','/usr/src/linux-2.6.37/include/linux/debugobjects.h',83,84,NULL,NULL,NULL,NULL,'',''),
 (392276,'debug_object_destroy()','D:','/usr/src/linux-2.6.37/include/linux/debugobjects.h',85,86,NULL,NULL,NULL,NULL,'',''),
 (392277,'debug_object_free()','D:','/usr/src/linux-2.6.37/include/linux/debugobjects.h',87,88,NULL,NULL,NULL,NULL,'',''),
 (392278,'debug_objects_early_init()','D:','/usr/src/linux-2.6.37/include/linux/debugobjects.h',90,90,NULL,NULL,NULL,NULL,'',''),
 (392279,'debug_objects_mem_init()','D:','/usr/src/linux-2.6.37/include/linux/debugobjects.h',91,91,NULL,NULL,NULL,NULL,'',''),
 (392280,'debug_check_no_obj_freed()','D:','/usr/src/linux-2.6.37/include/linux/debugobjects.h',97,98,NULL,NULL,NULL,NULL,'',''),
 (392281,'destroy_timer_on_stack()','D:','/usr/src/linux-2.6.37/include/linux/timer.h',131,131,NULL,NULL,NULL,NULL,'',''),
 (392282,'init_timer_on_stack_key()','D:','/usr/src/linux-2.6.37/include/linux/timer.h',132,137,NULL,NULL,NULL,NULL,'',''),
 (392283,'init_timer_key()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392284,'setup_timer_key()','D:','/usr/src/linux-2.6.37/include/linux/timer.h',140,149,NULL,NULL,NULL,NULL,'',''),
 (392285,'timer_list.function','S:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392286,'timer_list.data','S:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392287,'setup_timer_on_stack_key()','D:','/usr/src/linux-2.6.37/include/linux/timer.h',151,160,NULL,NULL,NULL,NULL,'',''),
 (392288,'timer_pending()','D:','/usr/src/linux-2.6.37/include/linux/timer.h',178,181,NULL,NULL,NULL,NULL,'',''),
 (392289,'timer_list.entry','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392290,'timer_stats_timer_set_start_info()','D:','/usr/src/linux-2.6.37/include/linux/timer.h',224,229,NULL,NULL,NULL,NULL,'',''),
 (392291,'timer_stats_active','g:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392292,'__timer_stats_timer_set_start_info()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392293,'timer_stats_timer_clear_start_info()','D:','/usr/src/linux-2.6.37/include/linux/timer.h',231,234,NULL,NULL,NULL,NULL,'',''),
 (392294,'timer_list.start_site','S:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392295,'to_delayed_work()','D:','/usr/src/linux-2.6.37/include/linux/workqueue.h',98,103,NULL,NULL,NULL,NULL,'',''),
 (392296,'__init_work()','D:','/usr/src/linux-2.6.37/include/linux/workqueue.h',166,166,NULL,NULL,NULL,NULL,'',''),
 (392297,'destroy_work_on_stack()','D:','/usr/src/linux-2.6.37/include/linux/workqueue.h',167,167,NULL,NULL,NULL,NULL,'',''),
 (392298,'work_static()','D:','/usr/src/linux-2.6.37/include/linux/workqueue.h',168,168,NULL,NULL,NULL,NULL,'',''),
 (392299,'alloc_ordered_workqueue()','D:','/usr/src/linux-2.6.37/include/linux/workqueue.h',333,337,NULL,NULL,NULL,NULL,'',''),
 (392300,'__alloc_workqueue_key()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392301,'cancel_delayed_work()','D:','/usr/src/linux-2.6.37/include/linux/workqueue.h',389,397,NULL,NULL,NULL,NULL,'',''),
 (392302,'del_timer_sync()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392303,'delayed_work.timer','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392304,'delayed_work.work','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392305,'work_struct.data','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392306,'__cancel_delayed_work()','D:','/usr/src/linux-2.6.37/include/linux/workqueue.h',404,412,NULL,NULL,NULL,NULL,'',''),
 (392307,'del_timer()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392308,'cancel_rearming_delayed_workqueue()','D:','/usr/src/linux-2.6.37/include/linux/workqueue.h',415,420,NULL,NULL,NULL,NULL,'',''),
 (392309,'cancel_delayed_work_sync()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392310,'cancel_rearming_delayed_work()','D:','/usr/src/linux-2.6.37/include/linux/workqueue.h',423,427,NULL,NULL,NULL,NULL,'',''),
 (392311,'init_completion()','D:','/usr/src/linux-2.6.37/include/linux/completion.h',73,77,NULL,NULL,NULL,NULL,'',''),
 (392312,'completion.done','S:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392313,'__init_waitqueue_head()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392314,'completion.wait','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392315,'disable_acpi()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/acpi.h',99,104,NULL,NULL,NULL,NULL,'',''),
 (392316,'acpi_disabled','G:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392317,'acpi_pci_disabled','G:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392318,'acpi_noirq','G:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392319,'acpi_noirq_set()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/acpi.h',108,108,NULL,NULL,NULL,NULL,'',''),
 (392320,'acpi_disable_pci()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/acpi.h',109,113,NULL,NULL,NULL,NULL,'',''),
 (392321,'acpi_processor_cstate_check()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/acpi.h',127,144,NULL,NULL,NULL,NULL,'',''),
 (392322,'cpuinfo_x86.x86_vendor','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392323,'cpuinfo_x86.x86_model','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392324,'cpuinfo_x86.x86_mask','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392325,'c1e_detected','g:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392326,'arch_has_acpi_pdc()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/acpi.h',146,151,NULL,NULL,NULL,NULL,'',''),
 (392327,'arch_acpi_set_pdc_bits()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/acpi.h',153,170,NULL,NULL,NULL,NULL,'',''),
 (392328,'acpi_fake_nodes()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/acpi.h',194,197,NULL,NULL,NULL,NULL,'',''),
 (392329,'fix_to_virt()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/fixmap.h',195,210,NULL,NULL,NULL,NULL,'',''),
 (392330,'__this_fixmap_does_not_exist()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392331,'__FIXADDR_TOP','g:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392332,'virt_to_fix()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/fixmap.h',212,216,NULL,NULL,NULL,NULL,'',''),
 (392333,'__set_fixmap_offset()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/fixmap.h',219,224,NULL,NULL,NULL,NULL,'',''),
 (392334,'default_inquire_remote_apic()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/apic.h',62,66,NULL,NULL,NULL,NULL,'',''),
 (392335,'apic_verbosity','g:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392336,'__inquire_remote_apic()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392337,'apic_from_smp_config()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/apic.h',76,79,NULL,NULL,NULL,NULL,'',''),
 (392338,'smp_found_config','g:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392339,'disable_apic','g:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392340,'is_vsmp_box()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/apic.h',91,94,NULL,NULL,NULL,NULL,'',''),
 (392341,'native_apic_mem_write()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/apic.h',101,108,NULL,NULL,NULL,NULL,'',''),
 (392342,'native_apic_mem_read()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/apic.h',110,113,NULL,NULL,NULL,NULL,'',''),
 (392343,'check_x2apic()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/apic.h',201,203,NULL,NULL,NULL,NULL,'',''),
 (392344,'enable_x2apic()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/apic.h',204,206,NULL,NULL,NULL,NULL,'',''),
 (392345,'x2apic_enabled()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/apic.h',207,210,NULL,NULL,NULL,NULL,'',''),
 (392346,'x2apic_force_phys()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/apic.h',211,213,NULL,NULL,NULL,NULL,'',''),
 (392347,'apic_is_clustered_box()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/apic.h',249,252,NULL,NULL,NULL,NULL,'',''),
 (392348,'apic_read()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/apic.h',375,378,NULL,NULL,NULL,NULL,'',''),
 (392349,'apic','g:','/usr/src/linux-2.6.37/arch/x86/include/asm/apic.h',283,357,NULL,NULL,NULL,NULL,'',''),
 (392350,'apic.read','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392351,'*apic.read()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392352,'apic_write()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/apic.h',380,383,NULL,NULL,NULL,NULL,'',''),
 (392353,'apic.write','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392354,'*apic.write()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392355,'apic_icr_read()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/apic.h',385,388,NULL,NULL,NULL,NULL,'',''),
 (392356,'apic.icr_read','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392357,'*apic.icr_read()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392358,'apic_icr_write()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/apic.h',390,393,NULL,NULL,NULL,NULL,'',''),
 (392359,'apic.icr_write','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392360,'*apic.icr_write()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392361,'apic_wait_icr_idle()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/apic.h',395,398,NULL,NULL,NULL,NULL,'',''),
 (392362,'apic.wait_icr_idle','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392363,'*apic.wait_icr_idle()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392364,'safe_apic_wait_icr_idle()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/apic.h',400,403,NULL,NULL,NULL,NULL,'',''),
 (392365,'apic.safe_wait_icr_idle','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392366,'*apic.safe_wait_icr_idle()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392367,'ack_APIC_irq()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/apic.h',416,425,NULL,NULL,NULL,NULL,'',''),
 (392368,'default_get_apic_id()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/apic.h',427,435,NULL,NULL,NULL,NULL,'',''),
 (392369,'default_wait_for_init_deassert()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/apic.h',459,464,NULL,NULL,NULL,NULL,'',''),
 (392370,'default_target_cpus()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/apic.h',475,482,NULL,NULL,NULL,NULL,'',''),
 (392371,'cpu_online_mask','g:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392372,'read_apic_id()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/apic.h',487,494,NULL,NULL,NULL,NULL,'',''),
 (392373,'apic.get_apic_id','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392374,'*apic.get_apic_id()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392375,'default_apic_id_registered()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/apic.h',513,516,NULL,NULL,NULL,NULL,'',''),
 (392376,'phys_cpu_present_map','g:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392377,'default_phys_pkg_id()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/apic.h',518,521,NULL,NULL,NULL,NULL,'',''),
 (392378,'default_cpu_mask_to_apicid()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/apic.h',527,531,NULL,NULL,NULL,NULL,'',''),
 (392379,'cpumask.bits[]','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392380,'default_cpu_mask_to_apicid_and()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/apic.h',533,542,NULL,NULL,NULL,NULL,'',''),
 (392381,'default_check_apicid_used()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/apic.h',544,547,NULL,NULL,NULL,NULL,'',''),
 (392382,'default_check_apicid_present()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/apic.h',549,552,NULL,NULL,NULL,NULL,'',''),
 (392383,'default_ioapic_phys_id_map()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/apic.h',554,557,NULL,NULL,NULL,NULL,'',''),
 (392384,'default_cpu_to_logical_apicid()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/apic.h',560,563,NULL,NULL,NULL,NULL,'',''),
 (392385,'__default_cpu_present_to_apicid()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/apic.h',565,571,NULL,NULL,NULL,NULL,'',''),
 (392386,'nr_cpu_ids','g:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392387,'cpu_present_mask','g:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392388,'__default_check_phys_apicid_present()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/apic.h',573,577,NULL,NULL,NULL,NULL,'',''),
 (392389,'default_cpu_present_to_apicid()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/apic.h',580,583,NULL,NULL,NULL,NULL,'',''),
 (392390,'default_check_phys_apicid_present()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/apic.h',585,589,NULL,NULL,NULL,NULL,'',''),
 (392391,'invalid_vm86_irq()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/irq_vectors.h',139,142,NULL,NULL,NULL,NULL,'',''),
 (392392,'cpu_sibling_mask()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/smp.h',29,32,NULL,NULL,NULL,NULL,'',''),
 (392393,'cpu_core_mask()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/smp.h',34,37,NULL,NULL,NULL,NULL,'',''),
 (392394,'smp_send_stop()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/smp.h',74,77,NULL,NULL,NULL,NULL,'',''),
 (392395,'smp_ops','g:','/usr/src/linux-2.6.37/arch/x86/include/asm/smp.h',48,63,NULL,NULL,NULL,NULL,'',''),
 (392396,'smp_ops.stop_other_cpus','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392397,'*smp_ops.stop_other_cpus()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392398,'stop_other_cpus()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/smp.h',79,82,NULL,NULL,NULL,NULL,'',''),
 (392399,'smp_prepare_boot_cpu()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/smp.h',84,87,NULL,NULL,NULL,NULL,'',''),
 (392400,'smp_ops.smp_prepare_boot_cpu','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392401,'*smp_ops.smp_prepare_boot_cpu()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392402,'smp_prepare_cpus()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/smp.h',89,92,NULL,NULL,NULL,NULL,'',''),
 (392403,'smp_ops.smp_prepare_cpus','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392404,'*smp_ops.smp_prepare_cpus()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392405,'smp_cpus_done()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/smp.h',94,97,NULL,NULL,NULL,NULL,'',''),
 (392406,'smp_ops.smp_cpus_done','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392407,'*smp_ops.smp_cpus_done()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392408,'__cpu_up()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/smp.h',99,102,NULL,NULL,NULL,NULL,'',''),
 (392409,'smp_ops.cpu_up','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392410,'*smp_ops.cpu_up()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392411,'__cpu_disable()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/smp.h',104,107,NULL,NULL,NULL,NULL,'',''),
 (392412,'smp_ops.cpu_disable','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392413,'*smp_ops.cpu_disable()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392414,'__cpu_die()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/smp.h',109,112,NULL,NULL,NULL,NULL,'',''),
 (392415,'smp_ops.cpu_die','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392416,'*smp_ops.cpu_die()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392417,'play_dead()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/smp.h',114,117,NULL,NULL,NULL,NULL,'',''),
 (392418,'smp_ops.play_dead','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392419,'*smp_ops.play_dead()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392420,'smp_send_reschedule()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/smp.h',119,122,NULL,NULL,NULL,NULL,'',''),
 (392421,'smp_ops.smp_send_reschedule','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392422,'*smp_ops.smp_send_reschedule()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392423,'arch_send_call_function_single_ipi()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/smp.h',124,127,NULL,NULL,NULL,NULL,'',''),
 (392424,'smp_ops.send_call_func_single_ipi','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392425,'*smp_ops.send_call_func_single_ipi()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392426,'arch_send_call_function_ipi_mask()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/smp.h',129,132,NULL,NULL,NULL,NULL,'',''),
 (392427,'smp_ops.send_call_func_ipi','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392428,'*smp_ops.send_call_func_ipi()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392429,'num_booting_cpus()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/smp.h',153,156,NULL,NULL,NULL,NULL,'',''),
 (392430,'cpu_callout_mask','g:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392431,'logical_smp_processor_id()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/smp.h',193,197,NULL,NULL,NULL,NULL,'',''),
 (392432,'numa_node_id()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/topology.h',165,168,NULL,NULL,NULL,NULL,'',''),
 (392433,'early_cpu_to_node()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/topology.h',174,177,NULL,NULL,NULL,NULL,'',''),
 (392434,'setup_node_to_cpumask_map()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/topology.h',179,179,NULL,NULL,NULL,NULL,'',''),
 (392435,'arch_fix_phys_package_id()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/topology.h',197,199,NULL,NULL,NULL,NULL,'',''),
 (392436,'get_mp_bus_to_node()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/topology.h',214,217,NULL,NULL,NULL,NULL,'',''),
 (392437,'set_mp_bus_to_node()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/topology.h',218,220,NULL,NULL,NULL,NULL,'',''),
 (392438,'numa_mem_id()','D:','/usr/src/linux-2.6.37/include/linux/topology.h',303,306,NULL,NULL,NULL,NULL,'',''),
 (392439,'allocflags_to_migratetype()','D:','/usr/src/linux-2.6.37/include/linux/gfp.h',142,152,NULL,NULL,NULL,NULL,'',''),
 (392440,'page_group_by_mobility_disabled','g:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392441,'gfp_zone()','D:','/usr/src/linux-2.6.37/include/linux/gfp.h',237,253,NULL,NULL,NULL,NULL,'',''),
 (392442,'gfp_zonelist()','D:','/usr/src/linux-2.6.37/include/linux/gfp.h',262,268,NULL,NULL,NULL,NULL,'',''),
 (392443,'node_zonelist()','D:','/usr/src/linux-2.6.37/include/linux/gfp.h',279,282,NULL,NULL,NULL,NULL,'',''),
 (392444,'contig_page_data','g:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392445,'pglist_data.node_zonelists','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392446,'arch_free_page()','D:','/usr/src/linux-2.6.37/include/linux/gfp.h',285,285,NULL,NULL,NULL,NULL,'',''),
 (392447,'arch_alloc_page()','D:','/usr/src/linux-2.6.37/include/linux/gfp.h',288,288,NULL,NULL,NULL,NULL,'',''),
 (392448,'__alloc_pages()','D:','/usr/src/linux-2.6.37/include/linux/gfp.h',295,300,NULL,NULL,NULL,NULL,'',''),
 (392449,'__alloc_pages_nodemask()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392450,'alloc_pages_node()','D:','/usr/src/linux-2.6.37/include/linux/gfp.h',302,310,NULL,NULL,NULL,NULL,'',''),
 (392451,'alloc_pages_exact_node()','D:','/usr/src/linux-2.6.37/include/linux/gfp.h',312,318,NULL,NULL,NULL,NULL,'',''),
 (392452,'kobject_name()','D:','/usr/src/linux-2.6.37/include/linux/kobject.h',80,83,NULL,NULL,NULL,NULL,'',''),
 (392453,'kobject.name','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392454,'to_kset()','D:','/usr/src/linux-2.6.37/include/linux/kobject.h',174,178,NULL,NULL,NULL,NULL,'',''),
 (392455,'kset_get()','D:','/usr/src/linux-2.6.37/include/linux/kobject.h',188,191,NULL,NULL,NULL,NULL,'',''),
 (392456,'kobject_get()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392457,'kset.kobj','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392458,'kset_put()','D:','/usr/src/linux-2.6.37/include/linux/kobject.h',193,196,NULL,NULL,NULL,NULL,'',''),
 (392459,'kobject_put()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392460,'get_ktype()','D:','/usr/src/linux-2.6.37/include/linux/kobject.h',198,201,NULL,NULL,NULL,NULL,'',''),
 (392461,'kobject.ktype','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392462,'kmemleak_init()','D:','/usr/src/linux-2.6.37/include/linux/kmemleak.h',59,61,NULL,NULL,NULL,NULL,'',''),
 (392463,'kmemleak_alloc()','D:','/usr/src/linux-2.6.37/include/linux/kmemleak.h',62,65,NULL,NULL,NULL,NULL,'',''),
 (392464,'kmemleak_alloc_recursive()','D:','/usr/src/linux-2.6.37/include/linux/kmemleak.h',66,70,NULL,NULL,NULL,NULL,'',''),
 (392465,'kmemleak_free()','D:','/usr/src/linux-2.6.37/include/linux/kmemleak.h',71,73,NULL,NULL,NULL,NULL,'',''),
 (392466,'kmemleak_free_part()','D:','/usr/src/linux-2.6.37/include/linux/kmemleak.h',74,76,NULL,NULL,NULL,NULL,'',''),
 (392467,'kmemleak_free_recursive()','D:','/usr/src/linux-2.6.37/include/linux/kmemleak.h',77,79,NULL,NULL,NULL,NULL,'',''),
 (392468,'kmemleak_not_leak()','D:','/usr/src/linux-2.6.37/include/linux/kmemleak.h',80,82,NULL,NULL,NULL,NULL,'',''),
 (392469,'kmemleak_ignore()','D:','/usr/src/linux-2.6.37/include/linux/kmemleak.h',83,85,NULL,NULL,NULL,NULL,'',''),
 (392470,'kmemleak_scan_area()','D:','/usr/src/linux-2.6.37/include/linux/kmemleak.h',86,88,NULL,NULL,NULL,NULL,'',''),
 (392471,'kmemleak_erase()','D:','/usr/src/linux-2.6.37/include/linux/kmemleak.h',89,91,NULL,NULL,NULL,NULL,'',''),
 (392472,'kmemleak_no_scan()','D:','/usr/src/linux-2.6.37/include/linux/kmemleak.h',92,94,NULL,NULL,NULL,NULL,'',''),
 (392473,'__rcu_read_lock_bh()','D:','/usr/src/linux-2.6.37/include/linux/rcupdate.h',72,75,NULL,NULL,NULL,NULL,'',''),
 (392474,'__rcu_read_unlock_bh()','D:','/usr/src/linux-2.6.37/include/linux/rcupdate.h',77,80,NULL,NULL,NULL,NULL,'',''),
 (392475,'local_bh_enable()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392476,'__rcu_read_lock()','D:','/usr/src/linux-2.6.37/include/linux/rcupdate.h',98,101,NULL,NULL,NULL,NULL,'',''),
 (392477,'__rcu_read_unlock()','D:','/usr/src/linux-2.6.37/include/linux/rcupdate.h',103,106,NULL,NULL,NULL,NULL,'',''),
 (392478,'synchronize_rcu()','D:','/usr/src/linux-2.6.37/include/linux/rcupdate.h',108,111,NULL,NULL,NULL,NULL,'',''),
 (392479,'synchronize_sched()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392480,'rcu_preempt_depth()','D:','/usr/src/linux-2.6.37/include/linux/rcupdate.h',113,116,NULL,NULL,NULL,NULL,'',''),
 (392481,'exit_rcu()','D:','/usr/src/linux-2.6.37/include/linux/rcutree.h',43,45,NULL,NULL,NULL,NULL,'',''),
 (392482,'synchronize_rcu_bh_expedited()','D:','/usr/src/linux-2.6.37/include/linux/rcutree.h',52,55,NULL,NULL,NULL,NULL,'',''),
 (392483,'synchronize_sched_expedited()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392484,'rcu_blocking_is_gp()','D:','/usr/src/linux-2.6.37/include/linux/rcutree.h',67,70,NULL,NULL,NULL,NULL,'',''),
 (392485,'init_rcu_head_on_stack()','D:','/usr/src/linux-2.6.37/include/linux/rcupdate.h',162,164,NULL,NULL,NULL,NULL,'',''),
 (392486,'destroy_rcu_head_on_stack()','D:','/usr/src/linux-2.6.37/include/linux/rcupdate.h',166,168,NULL,NULL,NULL,NULL,'',''),
 (392487,'rcu_read_lock_held()','D:','/usr/src/linux-2.6.37/include/linux/rcupdate.h',258,261,NULL,NULL,NULL,NULL,'',''),
 (392488,'rcu_read_lock_bh_held()','D:','/usr/src/linux-2.6.37/include/linux/rcupdate.h',263,266,NULL,NULL,NULL,NULL,'',''),
 (392489,'rcu_read_lock_sched_held()','D:','/usr/src/linux-2.6.37/include/linux/rcupdate.h',274,277,NULL,NULL,NULL,NULL,'',''),
 (392490,'rcu_read_lock()','D:','/usr/src/linux-2.6.37/include/linux/rcupdate.h',559,564,NULL,NULL,NULL,NULL,'',''),
 (392491,'rcu_read_unlock()','D:','/usr/src/linux-2.6.37/include/linux/rcupdate.h',581,586,NULL,NULL,NULL,NULL,'',''),
 (392492,'rcu_read_lock_bh()','D:','/usr/src/linux-2.6.37/include/linux/rcupdate.h',600,605,NULL,NULL,NULL,NULL,'',''),
 (392493,'rcu_read_unlock_bh()','D:','/usr/src/linux-2.6.37/include/linux/rcupdate.h',612,617,NULL,NULL,NULL,NULL,'',''),
 (392494,'rcu_read_lock_sched()','D:','/usr/src/linux-2.6.37/include/linux/rcupdate.h',627,632,NULL,NULL,NULL,NULL,'',''),
 (392495,'rcu_read_lock_sched_notrace()','D:','/usr/src/linux-2.6.37/include/linux/rcupdate.h',635,639,NULL,NULL,NULL,NULL,'',''),
 (392496,'rcu_read_unlock_sched()','D:','/usr/src/linux-2.6.37/include/linux/rcupdate.h',646,651,NULL,NULL,NULL,NULL,'',''),
 (392497,'rcu_read_unlock_sched_notrace()','D:','/usr/src/linux-2.6.37/include/linux/rcupdate.h',654,658,NULL,NULL,NULL,NULL,'',''),
 (392498,'debug_rcu_head_queue()','D:','/usr/src/linux-2.6.37/include/linux/rcupdate.h',771,773,NULL,NULL,NULL,NULL,'',''),
 (392499,'debug_rcu_head_unqueue()','D:','/usr/src/linux-2.6.37/include/linux/rcupdate.h',775,777,NULL,NULL,NULL,NULL,'',''),
 (392500,'tracepoint_synchronize_unregister()','D:','/usr/src/linux-2.6.37/include/linux/tracepoint.h',79,82,NULL,NULL,NULL,NULL,'',''),
 (392501,'trace_kmalloc()','D:','/usr/src/linux-2.6.37/include/trace/events/kmem.h',45,45,NULL,NULL,NULL,NULL,'',''),
 (392502,'__tracepoint_kmalloc','g:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392503,'tracepoint.state','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392504,'tracepoint.funcs','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392505,'tracepoint_func.func','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392506,'tracepoint_func.data','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392507,'(*virtual)()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392508,'register_trace_kmalloc()','D:','/usr/src/linux-2.6.37/include/trace/events/kmem.h',45,45,NULL,NULL,NULL,NULL,'',''),
 (392509,'tracepoint_probe_register()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392510,'unregister_trace_kmalloc()','D:','/usr/src/linux-2.6.37/include/trace/events/kmem.h',45,45,NULL,NULL,NULL,NULL,'',''),
 (392511,'tracepoint_probe_unregister()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392512,'check_trace_callback_type_kmalloc()','D:','/usr/src/linux-2.6.37/include/trace/events/kmem.h',45,45,NULL,NULL,NULL,NULL,'',''),
 (392513,'trace_kmem_cache_alloc()','D:','/usr/src/linux-2.6.37/include/trace/events/kmem.h',53,53,NULL,NULL,NULL,NULL,'',''),
 (392514,'__tracepoint_kmem_cache_alloc','g:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392515,'register_trace_kmem_cache_alloc()','D:','/usr/src/linux-2.6.37/include/trace/events/kmem.h',53,53,NULL,NULL,NULL,NULL,'',''),
 (392516,'unregister_trace_kmem_cache_alloc()','D:','/usr/src/linux-2.6.37/include/trace/events/kmem.h',53,53,NULL,NULL,NULL,NULL,'',''),
 (392517,'check_trace_callback_type_kmem_cache_alloc()','D:','/usr/src/linux-2.6.37/include/trace/events/kmem.h',53,53,NULL,NULL,NULL,NULL,'',''),
 (392518,'trace_kmalloc_node()','D:','/usr/src/linux-2.6.37/include/trace/events/kmem.h',99,99,NULL,NULL,NULL,NULL,'',''),
 (392519,'__tracepoint_kmalloc_node','g:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'','');
INSERT INTO `emmcfs`.`element` VALUES  (392520,'register_trace_kmalloc_node()','D:','/usr/src/linux-2.6.37/include/trace/events/kmem.h',99,99,NULL,NULL,NULL,NULL,'',''),
 (392521,'unregister_trace_kmalloc_node()','D:','/usr/src/linux-2.6.37/include/trace/events/kmem.h',99,99,NULL,NULL,NULL,NULL,'',''),
 (392522,'check_trace_callback_type_kmalloc_node()','D:','/usr/src/linux-2.6.37/include/trace/events/kmem.h',99,99,NULL,NULL,NULL,NULL,'',''),
 (392523,'trace_kmem_cache_alloc_node()','D:','/usr/src/linux-2.6.37/include/trace/events/kmem.h',108,108,NULL,NULL,NULL,NULL,'',''),
 (392524,'__tracepoint_kmem_cache_alloc_node','g:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392525,'register_trace_kmem_cache_alloc_node()','D:','/usr/src/linux-2.6.37/include/trace/events/kmem.h',108,108,NULL,NULL,NULL,NULL,'',''),
 (392526,'unregister_trace_kmem_cache_alloc_node()','D:','/usr/src/linux-2.6.37/include/trace/events/kmem.h',108,108,NULL,NULL,NULL,NULL,'',''),
 (392527,'check_trace_callback_type_kmem_cache_alloc_node()','D:','/usr/src/linux-2.6.37/include/trace/events/kmem.h',108,108,NULL,NULL,NULL,NULL,'',''),
 (392528,'trace_kfree()','D:','/usr/src/linux-2.6.37/include/trace/events/kmem.h',136,136,NULL,NULL,NULL,NULL,'',''),
 (392529,'__tracepoint_kfree','g:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392530,'register_trace_kfree()','D:','/usr/src/linux-2.6.37/include/trace/events/kmem.h',136,136,NULL,NULL,NULL,NULL,'',''),
 (392531,'unregister_trace_kfree()','D:','/usr/src/linux-2.6.37/include/trace/events/kmem.h',136,136,NULL,NULL,NULL,NULL,'',''),
 (392532,'check_trace_callback_type_kfree()','D:','/usr/src/linux-2.6.37/include/trace/events/kmem.h',136,136,NULL,NULL,NULL,NULL,'',''),
 (392533,'trace_kmem_cache_free()','D:','/usr/src/linux-2.6.37/include/trace/events/kmem.h',143,143,NULL,NULL,NULL,NULL,'',''),
 (392534,'__tracepoint_kmem_cache_free','g:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392535,'register_trace_kmem_cache_free()','D:','/usr/src/linux-2.6.37/include/trace/events/kmem.h',143,143,NULL,NULL,NULL,NULL,'',''),
 (392536,'unregister_trace_kmem_cache_free()','D:','/usr/src/linux-2.6.37/include/trace/events/kmem.h',143,143,NULL,NULL,NULL,NULL,'',''),
 (392537,'check_trace_callback_type_kmem_cache_free()','D:','/usr/src/linux-2.6.37/include/trace/events/kmem.h',143,143,NULL,NULL,NULL,NULL,'',''),
 (392538,'trace_mm_page_free_direct()','D:','/usr/src/linux-2.6.37/include/trace/events/kmem.h',150,150,NULL,NULL,NULL,NULL,'',''),
 (392539,'__tracepoint_mm_page_free_direct','g:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392540,'register_trace_mm_page_free_direct()','D:','/usr/src/linux-2.6.37/include/trace/events/kmem.h',150,150,NULL,NULL,NULL,NULL,'',''),
 (392541,'unregister_trace_mm_page_free_direct()','D:','/usr/src/linux-2.6.37/include/trace/events/kmem.h',150,150,NULL,NULL,NULL,NULL,'',''),
 (392542,'check_trace_callback_type_mm_page_free_direct()','D:','/usr/src/linux-2.6.37/include/trace/events/kmem.h',150,150,NULL,NULL,NULL,NULL,'',''),
 (392543,'trace_mm_pagevec_free()','D:','/usr/src/linux-2.6.37/include/trace/events/kmem.h',172,172,NULL,NULL,NULL,NULL,'',''),
 (392544,'__tracepoint_mm_pagevec_free','g:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392545,'register_trace_mm_pagevec_free()','D:','/usr/src/linux-2.6.37/include/trace/events/kmem.h',172,172,NULL,NULL,NULL,NULL,'',''),
 (392546,'unregister_trace_mm_pagevec_free()','D:','/usr/src/linux-2.6.37/include/trace/events/kmem.h',172,172,NULL,NULL,NULL,NULL,'',''),
 (392547,'check_trace_callback_type_mm_pagevec_free()','D:','/usr/src/linux-2.6.37/include/trace/events/kmem.h',172,172,NULL,NULL,NULL,NULL,'',''),
 (392548,'trace_mm_page_alloc()','D:','/usr/src/linux-2.6.37/include/trace/events/kmem.h',194,194,NULL,NULL,NULL,NULL,'',''),
 (392549,'__tracepoint_mm_page_alloc','g:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392550,'register_trace_mm_page_alloc()','D:','/usr/src/linux-2.6.37/include/trace/events/kmem.h',194,194,NULL,NULL,NULL,NULL,'',''),
 (392551,'unregister_trace_mm_page_alloc()','D:','/usr/src/linux-2.6.37/include/trace/events/kmem.h',194,194,NULL,NULL,NULL,NULL,'',''),
 (392552,'check_trace_callback_type_mm_page_alloc()','D:','/usr/src/linux-2.6.37/include/trace/events/kmem.h',194,194,NULL,NULL,NULL,NULL,'',''),
 (392553,'trace_mm_page_alloc_zone_locked()','D:','/usr/src/linux-2.6.37/include/trace/events/kmem.h',249,249,NULL,NULL,NULL,NULL,'',''),
 (392554,'__tracepoint_mm_page_alloc_zone_locked','g:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392555,'register_trace_mm_page_alloc_zone_locked()','D:','/usr/src/linux-2.6.37/include/trace/events/kmem.h',249,249,NULL,NULL,NULL,NULL,'',''),
 (392556,'unregister_trace_mm_page_alloc_zone_locked()','D:','/usr/src/linux-2.6.37/include/trace/events/kmem.h',249,249,NULL,NULL,NULL,NULL,'',''),
 (392557,'check_trace_callback_type_mm_page_alloc_zone_locked()','D:','/usr/src/linux-2.6.37/include/trace/events/kmem.h',249,249,NULL,NULL,NULL,NULL,'',''),
 (392558,'trace_mm_page_pcpu_drain()','D:','/usr/src/linux-2.6.37/include/trace/events/kmem.h',256,256,NULL,NULL,NULL,NULL,'',''),
 (392559,'__tracepoint_mm_page_pcpu_drain','g:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392560,'register_trace_mm_page_pcpu_drain()','D:','/usr/src/linux-2.6.37/include/trace/events/kmem.h',256,256,NULL,NULL,NULL,NULL,'',''),
 (392561,'unregister_trace_mm_page_pcpu_drain()','D:','/usr/src/linux-2.6.37/include/trace/events/kmem.h',256,256,NULL,NULL,NULL,NULL,'',''),
 (392562,'check_trace_callback_type_mm_page_pcpu_drain()','D:','/usr/src/linux-2.6.37/include/trace/events/kmem.h',256,256,NULL,NULL,NULL,NULL,'',''),
 (392563,'trace_mm_page_alloc_extfrag()','D:','/usr/src/linux-2.6.37/include/trace/events/kmem.h',267,267,NULL,NULL,NULL,NULL,'',''),
 (392564,'__tracepoint_mm_page_alloc_extfrag','g:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392565,'register_trace_mm_page_alloc_extfrag()','D:','/usr/src/linux-2.6.37/include/trace/events/kmem.h',267,267,NULL,NULL,NULL,NULL,'',''),
 (392566,'unregister_trace_mm_page_alloc_extfrag()','D:','/usr/src/linux-2.6.37/include/trace/events/kmem.h',267,267,NULL,NULL,NULL,NULL,'',''),
 (392567,'check_trace_callback_type_mm_page_alloc_extfrag()','D:','/usr/src/linux-2.6.37/include/trace/events/kmem.h',267,267,NULL,NULL,NULL,NULL,'',''),
 (392568,'kmalloc_index()','D:','/usr/src/linux-2.6.37/include/linux/slub_def.h',154,198,NULL,NULL,NULL,NULL,'',''),
 (392569,'____ilog2_NaN()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392570,'kmalloc_slab()','D:','/usr/src/linux-2.6.37/include/linux/slub_def.h',206,214,NULL,NULL,NULL,NULL,'',''),
 (392571,'kmalloc_caches[]','g:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392572,'kmalloc_caches','g:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392573,'kmalloc_large()','D:','/usr/src/linux-2.6.37/include/linux/slub_def.h',229,238,NULL,NULL,NULL,NULL,'',''),
 (392574,'__get_free_pages()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392575,'kmalloc()','D:','/usr/src/linux-2.6.37/include/linux/slub_def.h',240,262,NULL,NULL,NULL,NULL,'',''),
 (392576,'kmem_cache_alloc_notrace()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392577,'kmem_cache.size','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392578,'__kmalloc()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392579,'kcalloc()','D:','/usr/src/linux-2.6.37/include/linux/slab.h',226,231,NULL,NULL,NULL,NULL,'',''),
 (392580,'kmalloc_node()','D:','/usr/src/linux-2.6.37/include/linux/slab.h',244,247,NULL,NULL,NULL,NULL,'',''),
 (392581,'__kmalloc_node()','D:','/usr/src/linux-2.6.37/include/linux/slab.h',249,252,NULL,NULL,NULL,NULL,'',''),
 (392582,'kmem_cache_alloc_node()','D:','/usr/src/linux-2.6.37/include/linux/slab.h',256,260,NULL,NULL,NULL,NULL,'',''),
 (392583,'kmem_cache_alloc()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392584,'kmem_cache_zalloc()','D:','/usr/src/linux-2.6.37/include/linux/slab.h',311,314,NULL,NULL,NULL,NULL,'',''),
 (392585,'kzalloc()','D:','/usr/src/linux-2.6.37/include/linux/slab.h',321,324,NULL,NULL,NULL,NULL,'',''),
 (392586,'kzalloc_node()','D:','/usr/src/linux-2.6.37/include/linux/slab.h',332,335,NULL,NULL,NULL,NULL,'',''),
 (392587,'old_valid_dev()','D:','/usr/src/linux-2.6.37/include/linux/kdev_t.h',21,24,NULL,NULL,NULL,NULL,'',''),
 (392588,'old_encode_dev()','D:','/usr/src/linux-2.6.37/include/linux/kdev_t.h',26,29,NULL,NULL,NULL,NULL,'',''),
 (392589,'old_decode_dev()','D:','/usr/src/linux-2.6.37/include/linux/kdev_t.h',31,34,NULL,NULL,NULL,NULL,'',''),
 (392590,'new_valid_dev()','D:','/usr/src/linux-2.6.37/include/linux/kdev_t.h',36,39,NULL,NULL,NULL,NULL,'',''),
 (392591,'new_encode_dev()','D:','/usr/src/linux-2.6.37/include/linux/kdev_t.h',41,46,NULL,NULL,NULL,NULL,'',''),
 (392592,'new_decode_dev()','D:','/usr/src/linux-2.6.37/include/linux/kdev_t.h',48,53,NULL,NULL,NULL,NULL,'',''),
 (392593,'huge_valid_dev()','D:','/usr/src/linux-2.6.37/include/linux/kdev_t.h',55,58,NULL,NULL,NULL,NULL,'',''),
 (392594,'huge_encode_dev()','D:','/usr/src/linux-2.6.37/include/linux/kdev_t.h',60,63,NULL,NULL,NULL,NULL,'',''),
 (392595,'huge_decode_dev()','D:','/usr/src/linux-2.6.37/include/linux/kdev_t.h',65,68,NULL,NULL,NULL,NULL,'',''),
 (392596,'sysv_valid_dev()','D:','/usr/src/linux-2.6.37/include/linux/kdev_t.h',70,73,NULL,NULL,NULL,NULL,'',''),
 (392597,'sysv_encode_dev()','D:','/usr/src/linux-2.6.37/include/linux/kdev_t.h',75,78,NULL,NULL,NULL,NULL,'',''),
 (392598,'sysv_major()','D:','/usr/src/linux-2.6.37/include/linux/kdev_t.h',80,83,NULL,NULL,NULL,NULL,'',''),
 (392599,'sysv_minor()','D:','/usr/src/linux-2.6.37/include/linux/kdev_t.h',85,88,NULL,NULL,NULL,NULL,'',''),
 (392600,'__list_add_rcu()','D:','/usr/src/linux-2.6.37/include/linux/rculist.h',33,40,NULL,NULL,NULL,NULL,'',''),
 (392601,'list_add_rcu()','D:','/usr/src/linux-2.6.37/include/linux/rculist.h',58,61,NULL,NULL,NULL,NULL,'',''),
 (392602,'list_add_tail_rcu()','D:','/usr/src/linux-2.6.37/include/linux/rculist.h',79,83,NULL,NULL,NULL,NULL,'',''),
 (392603,'list_del_rcu()','D:','/usr/src/linux-2.6.37/include/linux/rculist.h',109,113,NULL,NULL,NULL,NULL,'',''),
 (392604,'hlist_del_init_rcu()','D:','/usr/src/linux-2.6.37/include/linux/rculist.h',135,141,NULL,NULL,NULL,NULL,'',''),
 (392605,'list_replace_rcu()','D:','/usr/src/linux-2.6.37/include/linux/rculist.h',151,159,NULL,NULL,NULL,NULL,'',''),
 (392606,'list_splice_init_rcu()','D:','/usr/src/linux-2.6.37/include/linux/rculist.h',178,214,NULL,NULL,NULL,NULL,'',''),
 (392607,'list_splice_init_rcu/sync()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392608,'hlist_del_rcu()','D:','/usr/src/linux-2.6.37/include/linux/rculist.h',314,318,NULL,NULL,NULL,NULL,'',''),
 (392609,'hlist_replace_rcu()','D:','/usr/src/linux-2.6.37/include/linux/rculist.h',327,338,NULL,NULL,NULL,NULL,'',''),
 (392610,'hlist_add_head_rcu()','D:','/usr/src/linux-2.6.37/include/linux/rculist.h',366,376,NULL,NULL,NULL,NULL,'',''),
 (392611,'hlist_add_before_rcu()','D:','/usr/src/linux-2.6.37/include/linux/rculist.h',396,403,NULL,NULL,NULL,NULL,'',''),
 (392612,'hlist_add_after_rcu()','D:','/usr/src/linux-2.6.37/include/linux/rculist.h',423,431,NULL,NULL,NULL,NULL,'',''),
 (392613,'partial_name_hash()','D:','/usr/src/linux-2.6.37/include/linux/dcache.h',53,57,NULL,NULL,NULL,NULL,'',''),
 (392614,'end_name_hash()','D:','/usr/src/linux-2.6.37/include/linux/dcache.h',63,66,NULL,NULL,NULL,NULL,'',''),
 (392615,'full_name_hash()','D:','/usr/src/linux-2.6.37/include/linux/dcache.h',69,76,NULL,NULL,NULL,NULL,'',''),
 (392616,'__d_drop()','D:','/usr/src/linux-2.6.37/include/linux/dcache.h',210,216,NULL,NULL,NULL,NULL,'',''),
 (392617,'dentry.d_flags','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392618,'dentry.d_hash','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392619,'d_drop()','D:','/usr/src/linux-2.6.37/include/linux/dcache.h',218,225,NULL,NULL,NULL,NULL,'',''),
 (392620,'dcache_lock','g:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392621,'dentry.d_lock','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392622,'dname_external()','D:','/usr/src/linux-2.6.37/include/linux/dcache.h',227,230,NULL,NULL,NULL,NULL,'',''),
 (392623,'dentry.d_name','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392624,'qstr.name','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392625,'dentry.d_iname','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392626,'d_add()','D:','/usr/src/linux-2.6.37/include/linux/dcache.h',276,280,NULL,NULL,NULL,NULL,'',''),
 (392627,'d_instantiate()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392628,'d_rehash()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392629,'d_add_unique()','D:','/usr/src/linux-2.6.37/include/linux/dcache.h',290,297,NULL,NULL,NULL,NULL,'',''),
 (392630,'d_instantiate_unique()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392631,'dget()','D:','/usr/src/linux-2.6.37/include/linux/dcache.h',337,344,NULL,NULL,NULL,NULL,'',''),
 (392632,'dentry.d_count','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392633,'d_unhashed()','D:','/usr/src/linux-2.6.37/include/linux/dcache.h',355,358,NULL,NULL,NULL,NULL,'',''),
 (392634,'d_unlinked()','D:','/usr/src/linux-2.6.37/include/linux/dcache.h',360,363,NULL,NULL,NULL,NULL,'',''),
 (392635,'dentry.d_parent','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392636,'cant_mount()','D:','/usr/src/linux-2.6.37/include/linux/dcache.h',365,368,NULL,NULL,NULL,NULL,'',''),
 (392637,'dont_mount()','D:','/usr/src/linux-2.6.37/include/linux/dcache.h',370,375,NULL,NULL,NULL,NULL,'',''),
 (392638,'dget_parent()','D:','/usr/src/linux-2.6.37/include/linux/dcache.h',377,385,NULL,NULL,NULL,NULL,'',''),
 (392639,'d_mountpoint()','D:','/usr/src/linux-2.6.37/include/linux/dcache.h',389,392,NULL,NULL,NULL,NULL,'',''),
 (392640,'dentry.d_mounted','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392641,'path_equal()','D:','/usr/src/linux-2.6.37/include/linux/path.h',15,18,NULL,NULL,NULL,NULL,'',''),
 (392642,'path.mnt','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392643,'path.dentry','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392644,'radix_tree_is_indirect_ptr()','D:','/usr/src/linux-2.6.37/include/linux/radix-tree.h',47,50,NULL,NULL,NULL,NULL,'',''),
 (392645,'radix_tree_deref_slot()','D:','/usr/src/linux-2.6.37/include/linux/radix-tree.h',143,146,NULL,NULL,NULL,NULL,'',''),
 (392646,'radix_tree_deref_retry()','D:','/usr/src/linux-2.6.37/include/linux/radix-tree.h',155,158,NULL,NULL,NULL,NULL,'',''),
 (392647,'radix_tree_replace_slot()','D:','/usr/src/linux-2.6.37/include/linux/radix-tree.h',168,172,NULL,NULL,NULL,NULL,'',''),
 (392648,'radix_tree_preload_end()','D:','/usr/src/linux-2.6.37/include/linux/radix-tree.h',210,213,NULL,NULL,NULL,NULL,'',''),
 (392649,'prio_tree_iter_init()','D:','/usr/src/linux-2.6.37/include/linux/prio_tree.h',49,56,NULL,NULL,NULL,NULL,'',''),
 (392650,'prio_tree_iter.root','S:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392651,'prio_tree_iter.r_index','S:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392652,'prio_tree_iter.h_index','S:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392653,'prio_tree_iter.cur','S:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392654,'prio_tree_empty()','D:','/usr/src/linux-2.6.37/include/linux/prio_tree.h',84,87,NULL,NULL,NULL,NULL,'',''),
 (392655,'prio_tree_root.prio_tree_node','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392656,'prio_tree_root()','D:','/usr/src/linux-2.6.37/include/linux/prio_tree.h',89,92,NULL,NULL,NULL,NULL,'',''),
 (392657,'prio_tree_node.parent','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392658,'prio_tree_left_empty()','D:','/usr/src/linux-2.6.37/include/linux/prio_tree.h',94,97,NULL,NULL,NULL,NULL,'',''),
 (392659,'prio_tree_node.left','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392660,'prio_tree_right_empty()','D:','/usr/src/linux-2.6.37/include/linux/prio_tree.h',99,102,NULL,NULL,NULL,NULL,'',''),
 (392661,'prio_tree_node.right','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392662,'get_pid()','D:','/usr/src/linux-2.6.37/include/linux/pid.h',75,80,NULL,NULL,NULL,NULL,'',''),
 (392663,'pid.count','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392664,'ns_of_pid()','D:','/usr/src/linux-2.6.37/include/linux/pid.h',135,141,NULL,NULL,NULL,NULL,'',''),
 (392665,'pid.numbers[]','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392666,'pid.numbers','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392667,'pid.level','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392668,'upid.ns','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392669,'pid_nr()','D:','/usr/src/linux-2.6.37/include/linux/pid.h',154,160,NULL,NULL,NULL,NULL,'',''),
 (392670,'upid.nr','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392671,'cap_combine()','D:','/usr/src/linux-2.6.37/include/linux/capability.h',439,445,NULL,NULL,NULL,NULL,'',''),
 (392672,'kernel_cap_struct.cap[]','S:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392673,'kernel_cap_struct.cap','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392674,'cap_intersect()','D:','/usr/src/linux-2.6.37/include/linux/capability.h',447,453,NULL,NULL,NULL,NULL,'',''),
 (392675,'cap_drop()','D:','/usr/src/linux-2.6.37/include/linux/capability.h',455,461,NULL,NULL,NULL,NULL,'',''),
 (392676,'cap_invert()','D:','/usr/src/linux-2.6.37/include/linux/capability.h',463,468,NULL,NULL,NULL,NULL,'',''),
 (392677,'cap_isclear()','D:','/usr/src/linux-2.6.37/include/linux/capability.h',470,478,NULL,NULL,NULL,NULL,'',''),
 (392678,'cap_issubset()','D:','/usr/src/linux-2.6.37/include/linux/capability.h',487,492,NULL,NULL,NULL,NULL,'',''),
 (392679,'cap_is_fs_cap()','D:','/usr/src/linux-2.6.37/include/linux/capability.h',496,500,NULL,NULL,NULL,NULL,'',''),
 (392680,'cap_drop_fs_set()','D:','/usr/src/linux-2.6.37/include/linux/capability.h',502,506,NULL,NULL,NULL,NULL,'',''),
 (392681,'cap_raise_fs_set()','D:','/usr/src/linux-2.6.37/include/linux/capability.h',508,514,NULL,NULL,NULL,NULL,'',''),
 (392682,'cap_drop_nfsd_set()','D:','/usr/src/linux-2.6.37/include/linux/capability.h',516,520,NULL,NULL,NULL,NULL,'',''),
 (392683,'cap_raise_nfsd_set()','D:','/usr/src/linux-2.6.37/include/linux/capability.h',522,528,NULL,NULL,NULL,NULL,'',''),
 (392684,'sema_init()','D:','/usr/src/linux-2.6.37/include/linux/semaphore.h',34,39,NULL,NULL,NULL,NULL,'',''),
 (392685,'percpu_counter_add()','D:','/usr/src/linux-2.6.37/include/linux/percpu_counter.h',45,48,NULL,NULL,NULL,NULL,'',''),
 (392686,'__percpu_counter_add()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392687,'percpu_counter_batch','g:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392688,'percpu_counter_sum_positive()','D:','/usr/src/linux-2.6.37/include/linux/percpu_counter.h',50,54,NULL,NULL,NULL,NULL,'',''),
 (392689,'__percpu_counter_sum()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392690,'percpu_counter_sum()','D:','/usr/src/linux-2.6.37/include/linux/percpu_counter.h',56,59,NULL,NULL,NULL,NULL,'',''),
 (392691,'percpu_counter_read()','D:','/usr/src/linux-2.6.37/include/linux/percpu_counter.h',61,64,NULL,NULL,NULL,NULL,'',''),
 (392692,'percpu_counter.count','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392693,'percpu_counter_read_positive()','D:','/usr/src/linux-2.6.37/include/linux/percpu_counter.h',71,79,NULL,NULL,NULL,NULL,'',''),
 (392694,'percpu_counter_initialized()','D:','/usr/src/linux-2.6.37/include/linux/percpu_counter.h',81,84,NULL,NULL,NULL,NULL,'',''),
 (392695,'percpu_counter.counters','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392696,'percpu_counter_inc()','D:','/usr/src/linux-2.6.37/include/linux/percpu_counter.h',158,161,NULL,NULL,NULL,NULL,'',''),
 (392697,'percpu_counter_dec()','D:','/usr/src/linux-2.6.37/include/linux/percpu_counter.h',163,166,NULL,NULL,NULL,NULL,'',''),
 (392698,'percpu_counter_sub()','D:','/usr/src/linux-2.6.37/include/linux/percpu_counter.h',168,171,NULL,NULL,NULL,NULL,'',''),
 (392699,'qtree_depth()','D:','/usr/src/linux-2.6.37/include/linux/dqblk_qtree.h',45,54,NULL,NULL,NULL,NULL,'',''),
 (392700,'qtree_mem_dqinfo.dqi_usable_bs','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392701,'info_dirty()','D:','/usr/src/linux-2.6.37/include/linux/quota.h',237,240,NULL,NULL,NULL,NULL,'',''),
 (392702,'mem_dqinfo.dqi_flags','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392703,'dqstats_inc()','D:','/usr/src/linux-2.6.37/include/linux/quota.h',262,265,NULL,NULL,NULL,NULL,'',''),
 (392704,'dqstats','g:','/usr/src/linux-2.6.37/include/linux/quota.h',254,257,NULL,NULL,NULL,NULL,'',''),
 (392705,'dqstats.counter[]','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392706,'dqstats.counter','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392707,'dqstats_dec()','D:','/usr/src/linux-2.6.37/include/linux/quota.h',267,270,NULL,NULL,NULL,NULL,'',''),
 (392708,'dquot_state_flag()','D:','/usr/src/linux-2.6.37/include/linux/quota.h',371,374,NULL,NULL,NULL,NULL,'',''),
 (392709,'dquot_generic_flag()','D:','/usr/src/linux-2.6.37/include/linux/quota.h',376,379,NULL,NULL,NULL,NULL,'',''),
 (392710,'iov_iter_init()','D:','/usr/src/linux-2.6.37/include/linux/fs.h',541,551,NULL,NULL,NULL,NULL,'',''),
 (392711,'iov_iter.iov','S:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392712,'iov_iter.nr_segs','S:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392713,'iov_iter.iov_offset','S:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392714,'iov_iter.count','S:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392715,'iov_iter_advance()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392716,'iov_iter_count()','D:','/usr/src/linux-2.6.37/include/linux/fs.h',553,556,NULL,NULL,NULL,NULL,'',''),
 (392717,'mapping_mapped()','D:','/usr/src/linux-2.6.37/include/linux/fs.h',704,708,NULL,NULL,NULL,NULL,'',''),
 (392718,'address_space.i_mmap','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392719,'address_space.i_mmap_nonlinear','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392720,'mapping_writably_mapped()','D:','/usr/src/linux-2.6.37/include/linux/fs.h',716,719,NULL,NULL,NULL,NULL,'',''),
 (392721,'address_space.i_mmap_writable','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392722,'inode_unhashed()','D:','/usr/src/linux-2.6.37/include/linux/fs.h',805,808,NULL,NULL,NULL,NULL,'',''),
 (392723,'inode.i_hash','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392724,'i_size_read()','D:','/usr/src/linux-2.6.37/include/linux/fs.h',840,861,NULL,NULL,NULL,NULL,'',''),
 (392725,'inode.i_size_seqcount','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392726,'inode.i_size','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392727,'i_size_write()','D:','/usr/src/linux-2.6.37/include/linux/fs.h',868,881,NULL,NULL,NULL,NULL,'',''),
 (392728,'iminor()','D:','/usr/src/linux-2.6.37/include/linux/fs.h',883,886,NULL,NULL,NULL,NULL,'',''),
 (392729,'inode.i_rdev','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392730,'imajor()','D:','/usr/src/linux-2.6.37/include/linux/fs.h',888,891,NULL,NULL,NULL,NULL,'',''),
 (392731,'ra_has_index()','D:','/usr/src/linux-2.6.37/include/linux/fs.h',920,924,NULL,NULL,NULL,NULL,'',''),
 (392732,'file_ra_state.start','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392733,'file_ra_state.size','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392734,'file_take_write()','D:','/usr/src/linux-2.6.37/include/linux/fs.h',1008,1008,NULL,NULL,NULL,NULL,'',''),
 (392735,'file_release_write()','D:','/usr/src/linux-2.6.37/include/linux/fs.h',1009,1009,NULL,NULL,NULL,NULL,'',''),
 (392736,'file_reset_write()','D:','/usr/src/linux-2.6.37/include/linux/fs.h',1010,1010,NULL,NULL,NULL,NULL,'',''),
 (392737,'file_check_state()','D:','/usr/src/linux-2.6.37/include/linux/fs.h',1011,1011,NULL,NULL,NULL,NULL,'',''),
 (392738,'file_check_writeable()','D:','/usr/src/linux-2.6.37/include/linux/fs.h',1012,1015,NULL,NULL,NULL,NULL,'',''),
 (392739,'nfs_compare_fh()','D:','/usr/src/linux-2.6.37/include/linux/nfs.h',146,149,NULL,NULL,NULL,NULL,'',''),
 (392740,'nfs_fh.size','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392741,'__builtin_memcmp()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392742,'nfs_fh.data','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392743,'nfs_copy_fh()','D:','/usr/src/linux-2.6.37/include/linux/nfs.h',151,155,NULL,NULL,NULL,NULL,'',''),
 (392744,'mark_inode_dirty()','D:','/usr/src/linux-2.6.37/include/linux/fs.h',1681,1684,NULL,NULL,NULL,NULL,'',''),
 (392745,'__mark_inode_dirty()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392746,'mark_inode_dirty_sync()','D:','/usr/src/linux-2.6.37/include/linux/fs.h',1686,1689,NULL,NULL,NULL,NULL,'',''),
 (392747,'inc_nlink()','D:','/usr/src/linux-2.6.37/include/linux/fs.h',1699,1702,NULL,NULL,NULL,NULL,'',''),
 (392748,'inode.i_nlink','S:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392749,'inode_inc_link_count()','D:','/usr/src/linux-2.6.37/include/linux/fs.h',1704,1708,NULL,NULL,NULL,NULL,'',''),
 (392750,'drop_nlink()','D:','/usr/src/linux-2.6.37/include/linux/fs.h',1721,1724,NULL,NULL,NULL,NULL,'',''),
 (392751,'clear_nlink()','D:','/usr/src/linux-2.6.37/include/linux/fs.h',1734,1737,NULL,NULL,NULL,NULL,'',''),
 (392752,'inode_dec_link_count()','D:','/usr/src/linux-2.6.37/include/linux/fs.h',1739,1743,NULL,NULL,NULL,NULL,'',''),
 (392753,'inode_inc_iversion()','D:','/usr/src/linux-2.6.37/include/linux/fs.h',1753,1758,NULL,NULL,NULL,NULL,'',''),
 (392754,'inode.i_lock','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392755,'inode.i_version','S:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392756,'file_accessed()','D:','/usr/src/linux-2.6.37/include/linux/fs.h',1761,1765,NULL,NULL,NULL,NULL,'',''),
 (392757,'file.f_flags','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392758,'touch_atime()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392759,'file.f_path','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392760,'sb_mark_dirty()','D:','/usr/src/linux-2.6.37/include/linux/fs.h',1830,1833,NULL,NULL,NULL,NULL,'',''),
 (392761,'super_block.s_dirt','S:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392762,'sb_mark_clean()','D:','/usr/src/linux-2.6.37/include/linux/fs.h',1834,1837,NULL,NULL,NULL,NULL,'',''),
 (392763,'sb_is_dirty()','D:','/usr/src/linux-2.6.37/include/linux/fs.h',1838,1841,NULL,NULL,NULL,NULL,'',''),
 (392764,'__mandatory_lock()','D:','/usr/src/linux-2.6.37/include/linux/fs.h',1885,1888,NULL,NULL,NULL,NULL,'',''),
 (392765,'inode.i_mode','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392766,'mandatory_lock()','D:','/usr/src/linux-2.6.37/include/linux/fs.h',1895,1898,NULL,NULL,NULL,NULL,'',''),
 (392767,'inode.i_sb','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392768,'super_block.s_flags','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392769,'locks_verify_locked()','D:','/usr/src/linux-2.6.37/include/linux/fs.h',1900,1905,NULL,NULL,NULL,NULL,'',''),
 (392770,'locks_mandatory_locked()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392771,'locks_verify_truncate()','D:','/usr/src/linux-2.6.37/include/linux/fs.h',1907,1919,NULL,NULL,NULL,NULL,'',''),
 (392772,'inode.i_flock','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392773,'locks_mandatory_area()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392774,'break_lease()','D:','/usr/src/linux-2.6.37/include/linux/fs.h',1921,1926,NULL,NULL,NULL,NULL,'',''),
 (392775,'__break_lease()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392776,'register_chrdev()','D:','/usr/src/linux-2.6.37/include/linux/fs.h',2065,2069,NULL,NULL,NULL,NULL,'',''),
 (392777,'__register_chrdev()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392778,'unregister_chrdev()','D:','/usr/src/linux-2.6.37/include/linux/fs.h',2071,2074,NULL,NULL,NULL,NULL,'',''),
 (392779,'__unregister_chrdev()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392780,'invalidate_remote_inode()','D:','/usr/src/linux-2.6.37/include/linux/fs.h',2126,2131,NULL,NULL,NULL,NULL,'',''),
 (392781,'invalidate_mapping_pages()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392782,'inode.i_mapping','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392783,'execute_ok()','D:','/usr/src/linux-2.6.37/include/linux/fs.h',2164,2167,NULL,NULL,NULL,NULL,'',''),
 (392784,'put_write_access()','D:','/usr/src/linux-2.6.37/include/linux/fs.h',2171,2174,NULL,NULL,NULL,NULL,'',''),
 (392785,'inode.i_writecount','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392786,'allow_write_access()','D:','/usr/src/linux-2.6.37/include/linux/fs.h',2175,2179,NULL,NULL,NULL,NULL,'',''),
 (392787,'dentry.d_inode','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392788,'insert_inode_hash()','D:','/usr/src/linux-2.6.37/include/linux/fs.h',2238,2241,NULL,NULL,NULL,NULL,'',''),
 (392789,'__insert_inode_hash()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392790,'inode.i_ino','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392791,'xip_truncate_page()','D:','/usr/src/linux-2.6.37/include/linux/fs.h',2304,2307,NULL,NULL,NULL,NULL,'',''),
 (392792,'blockdev_direct_IO()','D:','/usr/src/linux-2.6.37/include/linux/fs.h',2329,2337,NULL,NULL,NULL,NULL,'',''),
 (392793,'__blockdev_direct_IO()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392794,'parent_ino()','D:','/usr/src/linux-2.6.37/include/linux/fs.h',2445,2453,NULL,NULL,NULL,NULL,'',''),
 (392795,'__simple_attr_check_format()','D:','/usr/src/linux-2.6.37/include/linux/fs.h',2507,2511,NULL,NULL,NULL,NULL,'',''),
 (392796,'rb_set_parent()','D:','/usr/src/linux-2.6.37/include/linux/rbtree.h',123,126,NULL,NULL,NULL,NULL,'',''),
 (392797,'rb_node.rb_parent_color','S:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392798,'rb_set_color()','D:','/usr/src/linux-2.6.37/include/linux/rbtree.h',127,130,NULL,NULL,NULL,NULL,'',''),
 (392799,'rb_link_node()','D:','/usr/src/linux-2.6.37/include/linux/rbtree.h',160,167,NULL,NULL,NULL,NULL,'',''),
 (392800,'rb_node.rb_left','S:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392801,'rb_node.rb_right','S:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392802,'__debug_locks_off()','D:','/usr/src/linux-2.6.37/include/linux/debug_locks.h',14,17,NULL,NULL,NULL,NULL,'',''),
 (392803,'debug_locks','g:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392804,'debug_show_all_locks()','D:','/usr/src/linux-2.6.37/include/linux/debug_locks.h',56,58,NULL,NULL,NULL,NULL,'',''),
 (392805,'debug_show_held_locks()','D:','/usr/src/linux-2.6.37/include/linux/debug_locks.h',60,62,NULL,NULL,NULL,NULL,'',''),
 (392806,'debug_check_no_locks_freed()','D:','/usr/src/linux-2.6.37/include/linux/debug_locks.h',64,67,NULL,NULL,NULL,NULL,'',''),
 (392807,'debug_check_no_locks_held()','D:','/usr/src/linux-2.6.37/include/linux/debug_locks.h',69,72,NULL,NULL,NULL,NULL,'',''),
 (392808,'cap_resource()','D:','/usr/src/linux-2.6.37/include/linux/range.h',23,29,NULL,NULL,NULL,NULL,'',''),
 (392809,'pte_dirty()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/pgtable.h',87,90,NULL,NULL,NULL,NULL,'',''),
 (392810,'pte_young()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/pgtable.h',92,95,NULL,NULL,NULL,NULL,'',''),
 (392811,'pte_write()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/pgtable.h',97,100,NULL,NULL,NULL,NULL,'',''),
 (392812,'pte_file()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/pgtable.h',102,105,NULL,NULL,NULL,NULL,'',''),
 (392813,'pte_huge()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/pgtable.h',107,110,NULL,NULL,NULL,NULL,'',''),
 (392814,'pte_global()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/pgtable.h',112,115,NULL,NULL,NULL,NULL,'',''),
 (392815,'pte_exec()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/pgtable.h',117,120,NULL,NULL,NULL,NULL,'',''),
 (392816,'pte_special()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/pgtable.h',122,125,NULL,NULL,NULL,NULL,'',''),
 (392817,'pte_pfn()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/pgtable.h',127,130,NULL,NULL,NULL,NULL,'',''),
 (392818,'pmd_pfn()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/pgtable.h',132,135,NULL,NULL,NULL,NULL,'',''),
 (392819,'pmd_large()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/pgtable.h',139,143,NULL,NULL,NULL,NULL,'',''),
 (392820,'pte_set_flags()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/pgtable.h',145,150,NULL,NULL,NULL,NULL,'',''),
 (392821,'pte_clear_flags()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/pgtable.h',152,157,NULL,NULL,NULL,NULL,'',''),
 (392822,'pte_mkclean()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/pgtable.h',159,162,NULL,NULL,NULL,NULL,'',''),
 (392823,'pte_mkold()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/pgtable.h',164,167,NULL,NULL,NULL,NULL,'',''),
 (392824,'pte_wrprotect()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/pgtable.h',169,172,NULL,NULL,NULL,NULL,'',''),
 (392825,'pte_mkexec()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/pgtable.h',174,177,NULL,NULL,NULL,NULL,'',''),
 (392826,'pte_mkdirty()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/pgtable.h',179,182,NULL,NULL,NULL,NULL,'',''),
 (392827,'pte_mkyoung()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/pgtable.h',184,187,NULL,NULL,NULL,NULL,'',''),
 (392828,'pte_mkwrite()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/pgtable.h',189,192,NULL,NULL,NULL,NULL,'',''),
 (392829,'pte_mkhuge()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/pgtable.h',194,197,NULL,NULL,NULL,NULL,'',''),
 (392830,'pte_clrhuge()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/pgtable.h',199,202,NULL,NULL,NULL,NULL,'',''),
 (392831,'pte_mkglobal()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/pgtable.h',204,207,NULL,NULL,NULL,NULL,'',''),
 (392832,'pte_clrglobal()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/pgtable.h',209,212,NULL,NULL,NULL,NULL,'',''),
 (392833,'pte_mkspecial()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/pgtable.h',214,217,NULL,NULL,NULL,NULL,'',''),
 (392834,'massage_pgprot()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/pgtable.h',223,231,NULL,NULL,NULL,NULL,'',''),
 (392835,'pgprot.pgprot','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392836,'__supported_pte_mask','g:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392837,'pfn_pte()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/pgtable.h',233,237,NULL,NULL,NULL,NULL,'',''),
 (392838,'pfn_pmd()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/pgtable.h',239,243,NULL,NULL,NULL,NULL,'',''),
 (392839,'pte_modify()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/pgtable.h',245,257,NULL,NULL,NULL,NULL,'',''),
 (392840,'pgprot_modify()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/pgtable.h',261,266,NULL,NULL,NULL,NULL,'',''),
 (392841,'is_new_memtype_allowed()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/pgtable.h',272,296,NULL,NULL,NULL,NULL,'',''),
 (392842,'x86_platform','g:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392843,'x86_platform_ops.is_untracked_pat_range','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392844,'*x86_platform_ops.is_untracked_pat_range()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392845,'pgtable_cache_init()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/pgtable_32.h',31,31,NULL,NULL,NULL,NULL,'',''),
 (392846,'check_pgt_cache()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/pgtable_32.h',32,32,NULL,NULL,NULL,NULL,'',''),
 (392847,'native_set_pte()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/pgtable-3level.h',27,32,NULL,NULL,NULL,NULL,'',''),
 (392848,'pte_t.pte_high','S:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392849,'pte_t.pte_low','S:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392850,'native_set_pte_atomic()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/pgtable-3level.h',34,37,NULL,NULL,NULL,NULL,'',''),
 (392851,'native_set_pmd()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/pgtable-3level.h',39,42,NULL,NULL,NULL,NULL,'',''),
 (392852,'native_set_pud()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/pgtable-3level.h',44,47,NULL,NULL,NULL,NULL,'',''),
 (392853,'native_pte_clear()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/pgtable-3level.h',54,60,NULL,NULL,NULL,NULL,'',''),
 (392854,'native_pmd_clear()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/pgtable-3level.h',62,68,NULL,NULL,NULL,NULL,'',''),
 (392855,'pud_clear()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/pgtable-3level.h',70,89,NULL,NULL,NULL,NULL,'',''),
 (392856,'native_ptep_get_and_clear()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/pgtable-3level.h',92,102,NULL,NULL,NULL,NULL,'',''),
 (392857,'pte_none()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/pgtable.h',311,314,NULL,NULL,NULL,NULL,'',''),
 (392858,'pte_same()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/pgtable.h',317,320,NULL,NULL,NULL,NULL,'',''),
 (392859,'pte_present()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/pgtable.h',322,325,NULL,NULL,NULL,NULL,'',''),
 (392860,'pte_hidden()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/pgtable.h',327,330,NULL,NULL,NULL,NULL,'',''),
 (392861,'pmd_present()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/pgtable.h',332,335,NULL,NULL,NULL,NULL,'',''),
 (392862,'pmd_none()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/pgtable.h',337,342,NULL,NULL,NULL,NULL,'',''),
 (392863,'pmd_page_vaddr()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/pgtable.h',344,347,NULL,NULL,NULL,NULL,'',''),
 (392864,'pmd_index()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/pgtable.h',361,364,NULL,NULL,NULL,NULL,'',''),
 (392865,'pte_index()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/pgtable.h',381,384,NULL,NULL,NULL,NULL,'',''),
 (392866,'pte_offset_kernel()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/pgtable.h',386,389,NULL,NULL,NULL,NULL,'',''),
 (392867,'pmd_bad()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/pgtable.h',391,394,NULL,NULL,NULL,NULL,'',''),
 (392868,'pages_to_mb()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/pgtable.h',396,399,NULL,NULL,NULL,NULL,'',''),
 (392869,'pud_none()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/pgtable.h',405,408,NULL,NULL,NULL,NULL,'',''),
 (392870,'pud_present()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/pgtable.h',410,413,NULL,NULL,NULL,NULL,'',''),
 (392871,'pud_page_vaddr()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/pgtable.h',415,418,NULL,NULL,NULL,NULL,'',''),
 (392872,'pmd_offset()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/pgtable.h',427,430,NULL,NULL,NULL,NULL,'',''),
 (392873,'pud_large()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/pgtable.h',432,436,NULL,NULL,NULL,NULL,'',''),
 (392874,'pud_bad()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/pgtable.h',438,441,NULL,NULL,NULL,NULL,'',''),
 (392875,'native_local_ptep_get_and_clear()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/pgtable.h',518,525,NULL,NULL,NULL,NULL,'',''),
 (392876,'native_set_pte_at()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/pgtable.h',527,531,NULL,NULL,NULL,NULL,'',''),
 (392877,'ptep_get_and_clear()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/pgtable.h',574,580,NULL,NULL,NULL,NULL,'',''),
 (392878,'ptep_get_and_clear_full()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/pgtable.h',583,598,NULL,NULL,NULL,NULL,'',''),
 (392879,'ptep_set_wrprotect()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/pgtable.h',601,606,NULL,NULL,NULL,NULL,'',''),
 (392880,'clone_pgd_range()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/pgtable.h',620,623,NULL,NULL,NULL,NULL,'',''),
 (392881,'pgd_none_or_clear_bad()','D:','/usr/src/linux-2.6.37/include/asm-generic/pgtable.h',178,187,NULL,NULL,NULL,NULL,'',''),
 (392882,'pgd_clear_bad()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392883,'pud_none_or_clear_bad()','D:','/usr/src/linux-2.6.37/include/asm-generic/pgtable.h',189,198,NULL,NULL,NULL,NULL,'',''),
 (392884,'pud_clear_bad()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392885,'pmd_none_or_clear_bad()','D:','/usr/src/linux-2.6.37/include/asm-generic/pgtable.h',200,209,NULL,NULL,NULL,NULL,'',''),
 (392886,'pmd_clear_bad()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392887,'__ptep_modify_prot_start()','D:','/usr/src/linux-2.6.37/include/asm-generic/pgtable.h',211,221,NULL,NULL,NULL,NULL,'',''),
 (392888,'__ptep_modify_prot_commit()','D:','/usr/src/linux-2.6.37/include/asm-generic/pgtable.h',223,232,NULL,NULL,NULL,NULL,'',''),
 (392889,'is_linear_pfn_mapping()','D:','/usr/src/linux-2.6.37/include/linux/mm.h',157,160,NULL,NULL,NULL,NULL,'',''),
 (392890,'vm_area_struct.vm_flags','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392891,'is_pfn_mapping()','D:','/usr/src/linux-2.6.37/include/linux/mm.h',162,165,NULL,NULL,NULL,NULL,'',''),
 (392892,'PageLocked()','D:','/usr/src/linux-2.6.37/include/linux/page-flags.h',200,200,NULL,NULL,NULL,NULL,'',''),
 (392893,'page.flags','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (392894,'TestSetPageLocked()','D:','/usr/src/linux-2.6.37/include/linux/page-flags.h',200,200,NULL,NULL,NULL,NULL,'',''),
 (392895,'PageError()','D:','/usr/src/linux-2.6.37/include/linux/page-flags.h',201,201,NULL,NULL,NULL,NULL,'',''),
 (392896,'SetPageError()','D:','/usr/src/linux-2.6.37/include/linux/page-flags.h',201,201,NULL,NULL,NULL,NULL,'',''),
 (392897,'ClearPageError()','D:','/usr/src/linux-2.6.37/include/linux/page-flags.h',201,201,NULL,NULL,NULL,NULL,'',''),
 (392898,'PageReferenced()','D:','/usr/src/linux-2.6.37/include/linux/page-flags.h',202,202,NULL,NULL,NULL,NULL,'',''),
 (392899,'SetPageReferenced()','D:','/usr/src/linux-2.6.37/include/linux/page-flags.h',202,202,NULL,NULL,NULL,NULL,'',''),
 (392900,'ClearPageReferenced()','D:','/usr/src/linux-2.6.37/include/linux/page-flags.h',202,202,NULL,NULL,NULL,NULL,'',''),
 (392901,'TestClearPageReferenced()','D:','/usr/src/linux-2.6.37/include/linux/page-flags.h',202,202,NULL,NULL,NULL,NULL,'',''),
 (392902,'PageDirty()','D:','/usr/src/linux-2.6.37/include/linux/page-flags.h',203,203,NULL,NULL,NULL,NULL,'',''),
 (392903,'SetPageDirty()','D:','/usr/src/linux-2.6.37/include/linux/page-flags.h',203,203,NULL,NULL,NULL,NULL,'',''),
 (392904,'ClearPageDirty()','D:','/usr/src/linux-2.6.37/include/linux/page-flags.h',203,203,NULL,NULL,NULL,NULL,'',''),
 (392905,'TestSetPageDirty()','D:','/usr/src/linux-2.6.37/include/linux/page-flags.h',203,203,NULL,NULL,NULL,NULL,'',''),
 (392906,'TestClearPageDirty()','D:','/usr/src/linux-2.6.37/include/linux/page-flags.h',203,203,NULL,NULL,NULL,NULL,'',''),
 (392907,'__ClearPageDirty()','D:','/usr/src/linux-2.6.37/include/linux/page-flags.h',203,203,NULL,NULL,NULL,NULL,'',''),
 (392908,'PageLRU()','D:','/usr/src/linux-2.6.37/include/linux/page-flags.h',204,204,NULL,NULL,NULL,NULL,'',''),
 (392909,'SetPageLRU()','D:','/usr/src/linux-2.6.37/include/linux/page-flags.h',204,204,NULL,NULL,NULL,NULL,'',''),
 (392910,'ClearPageLRU()','D:','/usr/src/linux-2.6.37/include/linux/page-flags.h',204,204,NULL,NULL,NULL,NULL,'',''),
 (392911,'__ClearPageLRU()','D:','/usr/src/linux-2.6.37/include/linux/page-flags.h',204,204,NULL,NULL,NULL,NULL,'',''),
 (392912,'PageActive()','D:','/usr/src/linux-2.6.37/include/linux/page-flags.h',205,205,NULL,NULL,NULL,NULL,'',''),
 (392913,'SetPageActive()','D:','/usr/src/linux-2.6.37/include/linux/page-flags.h',205,205,NULL,NULL,NULL,NULL,'',''),
 (392914,'ClearPageActive()','D:','/usr/src/linux-2.6.37/include/linux/page-flags.h',205,205,NULL,NULL,NULL,NULL,'',''),
 (392915,'__ClearPageActive()','D:','/usr/src/linux-2.6.37/include/linux/page-flags.h',205,205,NULL,NULL,NULL,NULL,'',''),
 (392916,'TestClearPageActive()','D:','/usr/src/linux-2.6.37/include/linux/page-flags.h',206,206,NULL,NULL,NULL,NULL,'',''),
 (392917,'PageSlab()','D:','/usr/src/linux-2.6.37/include/linux/page-flags.h',207,207,NULL,NULL,NULL,NULL,'',''),
 (392918,'__SetPageSlab()','D:','/usr/src/linux-2.6.37/include/linux/page-flags.h',207,207,NULL,NULL,NULL,NULL,'',''),
 (392919,'__ClearPageSlab()','D:','/usr/src/linux-2.6.37/include/linux/page-flags.h',207,207,NULL,NULL,NULL,NULL,'',''),
 (392920,'PageChecked()','D:','/usr/src/linux-2.6.37/include/linux/page-flags.h',208,208,NULL,NULL,NULL,NULL,'',''),
 (392921,'SetPageChecked()','D:','/usr/src/linux-2.6.37/include/linux/page-flags.h',208,208,NULL,NULL,NULL,NULL,'',''),
 (392922,'ClearPageChecked()','D:','/usr/src/linux-2.6.37/include/linux/page-flags.h',208,208,NULL,NULL,NULL,NULL,'',''),
 (392923,'PagePinned()','D:','/usr/src/linux-2.6.37/include/linux/page-flags.h',209,209,NULL,NULL,NULL,NULL,'',''),
 (392924,'SetPagePinned()','D:','/usr/src/linux-2.6.37/include/linux/page-flags.h',209,209,NULL,NULL,NULL,NULL,'',''),
 (392925,'ClearPagePinned()','D:','/usr/src/linux-2.6.37/include/linux/page-flags.h',209,209,NULL,NULL,NULL,NULL,'',''),
 (392926,'TestSetPagePinned()','D:','/usr/src/linux-2.6.37/include/linux/page-flags.h',209,209,NULL,NULL,NULL,NULL,'',''),
 (392927,'TestClearPagePinned()','D:','/usr/src/linux-2.6.37/include/linux/page-flags.h',209,209,NULL,NULL,NULL,NULL,'',''),
 (392928,'PageSavePinned()','D:','/usr/src/linux-2.6.37/include/linux/page-flags.h',210,210,NULL,NULL,NULL,NULL,'',''),
 (392929,'SetPageSavePinned()','D:','/usr/src/linux-2.6.37/include/linux/page-flags.h',210,210,NULL,NULL,NULL,NULL,'',''),
 (392930,'ClearPageSavePinned()','D:','/usr/src/linux-2.6.37/include/linux/page-flags.h',210,210,NULL,NULL,NULL,NULL,'',''),
 (392931,'PageReserved()','D:','/usr/src/linux-2.6.37/include/linux/page-flags.h',211,211,NULL,NULL,NULL,NULL,'',''),
 (392932,'SetPageReserved()','D:','/usr/src/linux-2.6.37/include/linux/page-flags.h',211,211,NULL,NULL,NULL,NULL,'',''),
 (392933,'ClearPageReserved()','D:','/usr/src/linux-2.6.37/include/linux/page-flags.h',211,211,NULL,NULL,NULL,NULL,'',''),
 (392934,'__ClearPageReserved()','D:','/usr/src/linux-2.6.37/include/linux/page-flags.h',211,211,NULL,NULL,NULL,NULL,'',''),
 (392935,'PageSwapBacked()','D:','/usr/src/linux-2.6.37/include/linux/page-flags.h',212,212,NULL,NULL,NULL,NULL,'',''),
 (392936,'SetPageSwapBacked()','D:','/usr/src/linux-2.6.37/include/linux/page-flags.h',212,212,NULL,NULL,NULL,NULL,'',''),
 (392937,'ClearPageSwapBacked()','D:','/usr/src/linux-2.6.37/include/linux/page-flags.h',212,212,NULL,NULL,NULL,NULL,'',''),
 (392938,'__ClearPageSwapBacked()','D:','/usr/src/linux-2.6.37/include/linux/page-flags.h',212,212,NULL,NULL,NULL,NULL,'',''),
 (392939,'PageSlobFree()','D:','/usr/src/linux-2.6.37/include/linux/page-flags.h',214,214,NULL,NULL,NULL,NULL,'',''),
 (392940,'__SetPageSlobFree()','D:','/usr/src/linux-2.6.37/include/linux/page-flags.h',214,214,NULL,NULL,NULL,NULL,'',''),
 (392941,'__ClearPageSlobFree()','D:','/usr/src/linux-2.6.37/include/linux/page-flags.h',214,214,NULL,NULL,NULL,NULL,'',''),
 (392942,'PageSlubFrozen()','D:','/usr/src/linux-2.6.37/include/linux/page-flags.h',216,216,NULL,NULL,NULL,NULL,'',''),
 (392943,'__SetPageSlubFrozen()','D:','/usr/src/linux-2.6.37/include/linux/page-flags.h',216,216,NULL,NULL,NULL,NULL,'',''),
 (392944,'__ClearPageSlubFrozen()','D:','/usr/src/linux-2.6.37/include/linux/page-flags.h',216,216,NULL,NULL,NULL,NULL,'',''),
 (392945,'PagePrivate()','D:','/usr/src/linux-2.6.37/include/linux/page-flags.h',223,223,NULL,NULL,NULL,NULL,'',''),
 (392946,'SetPagePrivate()','D:','/usr/src/linux-2.6.37/include/linux/page-flags.h',223,223,NULL,NULL,NULL,NULL,'',''),
 (392947,'ClearPagePrivate()','D:','/usr/src/linux-2.6.37/include/linux/page-flags.h',223,223,NULL,NULL,NULL,NULL,'',''),
 (392948,'__SetPagePrivate()','D:','/usr/src/linux-2.6.37/include/linux/page-flags.h',223,223,NULL,NULL,NULL,NULL,'',''),
 (392949,'__ClearPagePrivate()','D:','/usr/src/linux-2.6.37/include/linux/page-flags.h',224,224,NULL,NULL,NULL,NULL,'',''),
 (392950,'PagePrivate2()','D:','/usr/src/linux-2.6.37/include/linux/page-flags.h',225,225,NULL,NULL,NULL,NULL,'',''),
 (392951,'SetPagePrivate2()','D:','/usr/src/linux-2.6.37/include/linux/page-flags.h',225,225,NULL,NULL,NULL,NULL,'',''),
 (392952,'ClearPagePrivate2()','D:','/usr/src/linux-2.6.37/include/linux/page-flags.h',225,225,NULL,NULL,NULL,NULL,'',''),
 (392953,'TestSetPagePrivate2()','D:','/usr/src/linux-2.6.37/include/linux/page-flags.h',225,225,NULL,NULL,NULL,NULL,'',''),
 (392954,'TestClearPagePrivate2()','D:','/usr/src/linux-2.6.37/include/linux/page-flags.h',225,225,NULL,NULL,NULL,NULL,'',''),
 (392955,'PageOwnerPriv1()','D:','/usr/src/linux-2.6.37/include/linux/page-flags.h',226,226,NULL,NULL,NULL,NULL,'',''),
 (392956,'SetPageOwnerPriv1()','D:','/usr/src/linux-2.6.37/include/linux/page-flags.h',226,226,NULL,NULL,NULL,NULL,'',''),
 (392957,'ClearPageOwnerPriv1()','D:','/usr/src/linux-2.6.37/include/linux/page-flags.h',226,226,NULL,NULL,NULL,NULL,'',''),
 (392958,'TestClearPageOwnerPriv1()','D:','/usr/src/linux-2.6.37/include/linux/page-flags.h',226,226,NULL,NULL,NULL,NULL,'',''),
 (392959,'PageWriteback()','D:','/usr/src/linux-2.6.37/include/linux/page-flags.h',232,232,NULL,NULL,NULL,NULL,'',''),
 (392960,'TestSetPageWriteback()','D:','/usr/src/linux-2.6.37/include/linux/page-flags.h',232,232,NULL,NULL,NULL,NULL,'',''),
 (392961,'TestClearPageWriteback()','D:','/usr/src/linux-2.6.37/include/linux/page-flags.h',232,232,NULL,NULL,NULL,NULL,'',''),
 (392962,'PageBuddy()','D:','/usr/src/linux-2.6.37/include/linux/page-flags.h',233,233,NULL,NULL,NULL,NULL,'',''),
 (392963,'__SetPageBuddy()','D:','/usr/src/linux-2.6.37/include/linux/page-flags.h',233,233,NULL,NULL,NULL,NULL,'',''),
 (392964,'__ClearPageBuddy()','D:','/usr/src/linux-2.6.37/include/linux/page-flags.h',233,233,NULL,NULL,NULL,NULL,'',''),
 (392965,'PageMappedToDisk()','D:','/usr/src/linux-2.6.37/include/linux/page-flags.h',234,234,NULL,NULL,NULL,NULL,'',''),
 (392966,'SetPageMappedToDisk()','D:','/usr/src/linux-2.6.37/include/linux/page-flags.h',234,234,NULL,NULL,NULL,NULL,'',''),
 (392967,'ClearPageMappedToDisk()','D:','/usr/src/linux-2.6.37/include/linux/page-flags.h',234,234,NULL,NULL,NULL,NULL,'',''),
 (392968,'PageReclaim()','D:','/usr/src/linux-2.6.37/include/linux/page-flags.h',237,237,NULL,NULL,NULL,NULL,'',''),
 (392969,'SetPageReclaim()','D:','/usr/src/linux-2.6.37/include/linux/page-flags.h',237,237,NULL,NULL,NULL,NULL,'',''),
 (392970,'ClearPageReclaim()','D:','/usr/src/linux-2.6.37/include/linux/page-flags.h',237,237,NULL,NULL,NULL,NULL,'',''),
 (392971,'TestClearPageReclaim()','D:','/usr/src/linux-2.6.37/include/linux/page-flags.h',237,237,NULL,NULL,NULL,NULL,'',''),
 (392972,'PageReadahead()','D:','/usr/src/linux-2.6.37/include/linux/page-flags.h',238,238,NULL,NULL,NULL,NULL,'',''),
 (392973,'SetPageReadahead()','D:','/usr/src/linux-2.6.37/include/linux/page-flags.h',238,238,NULL,NULL,NULL,NULL,'',''),
 (392974,'ClearPageReadahead()','D:','/usr/src/linux-2.6.37/include/linux/page-flags.h',238,238,NULL,NULL,NULL,NULL,'',''),
 (392975,'PageSwapCache()','D:','/usr/src/linux-2.6.37/include/linux/page-flags.h',251,251,NULL,NULL,NULL,NULL,'',''),
 (392976,'SetPageSwapCache()','D:','/usr/src/linux-2.6.37/include/linux/page-flags.h',251,251,NULL,NULL,NULL,NULL,'',''),
 (392977,'ClearPageSwapCache()','D:','/usr/src/linux-2.6.37/include/linux/page-flags.h',251,251,NULL,NULL,NULL,NULL,'',''),
 (392978,'PageUnevictable()','D:','/usr/src/linux-2.6.37/include/linux/page-flags.h',257,257,NULL,NULL,NULL,NULL,'',''),
 (392979,'SetPageUnevictable()','D:','/usr/src/linux-2.6.37/include/linux/page-flags.h',257,257,NULL,NULL,NULL,NULL,'',''),
 (392980,'ClearPageUnevictable()','D:','/usr/src/linux-2.6.37/include/linux/page-flags.h',257,257,NULL,NULL,NULL,NULL,'',''),
 (392981,'__ClearPageUnevictable()','D:','/usr/src/linux-2.6.37/include/linux/page-flags.h',257,257,NULL,NULL,NULL,NULL,'',''),
 (392982,'TestClearPageUnevictable()','D:','/usr/src/linux-2.6.37/include/linux/page-flags.h',258,258,NULL,NULL,NULL,NULL,'',''),
 (392983,'PageMlocked()','D:','/usr/src/linux-2.6.37/include/linux/page-flags.h',261,261,NULL,NULL,NULL,NULL,'',''),
 (392984,'SetPageMlocked()','D:','/usr/src/linux-2.6.37/include/linux/page-flags.h',261,261,NULL,NULL,NULL,NULL,'',''),
 (392985,'ClearPageMlocked()','D:','/usr/src/linux-2.6.37/include/linux/page-flags.h',261,261,NULL,NULL,NULL,NULL,'',''),
 (392986,'__ClearPageMlocked()','D:','/usr/src/linux-2.6.37/include/linux/page-flags.h',261,261,NULL,NULL,NULL,NULL,'',''),
 (392987,'TestSetPageMlocked()','D:','/usr/src/linux-2.6.37/include/linux/page-flags.h',262,262,NULL,NULL,NULL,NULL,'',''),
 (392988,'TestClearPageMlocked()','D:','/usr/src/linux-2.6.37/include/linux/page-flags.h',262,262,NULL,NULL,NULL,NULL,'',''),
 (392989,'__TestClearPageMlocked()','D:','/usr/src/linux-2.6.37/include/linux/page-flags.h',262,262,NULL,NULL,NULL,NULL,'',''),
 (392990,'PageUncached()','D:','/usr/src/linux-2.6.37/include/linux/page-flags.h',269,269,NULL,NULL,NULL,NULL,'',''),
 (392991,'SetPageUncached()','D:','/usr/src/linux-2.6.37/include/linux/page-flags.h',269,269,NULL,NULL,NULL,NULL,'',''),
 (392992,'ClearPageUncached()','D:','/usr/src/linux-2.6.37/include/linux/page-flags.h',269,269,NULL,NULL,NULL,NULL,'',''),
 (392993,'PageHWPoison()','D:','/usr/src/linux-2.6.37/include/linux/page-flags.h',275,275,NULL,NULL,NULL,NULL,'',''),
 (392994,'SetPageHWPoison()','D:','/usr/src/linux-2.6.37/include/linux/page-flags.h',275,275,NULL,NULL,NULL,NULL,'',''),
 (392995,'ClearPageHWPoison()','D:','/usr/src/linux-2.6.37/include/linux/page-flags.h',275,275,NULL,NULL,NULL,NULL,'',''),
 (392996,'TestSetPageHWPoison()','D:','/usr/src/linux-2.6.37/include/linux/page-flags.h',276,276,NULL,NULL,NULL,NULL,'',''),
 (392997,'TestClearPageHWPoison()','D:','/usr/src/linux-2.6.37/include/linux/page-flags.h',276,276,NULL,NULL,NULL,NULL,'',''),
 (392998,'PageUptodate()','D:','/usr/src/linux-2.6.37/include/linux/page-flags.h',285,301,NULL,NULL,NULL,NULL,'',''),
 (392999,'__SetPageUptodate()','D:','/usr/src/linux-2.6.37/include/linux/page-flags.h',303,307,NULL,NULL,NULL,NULL,'',''),
 (393000,'SetPageUptodate()','D:','/usr/src/linux-2.6.37/include/linux/page-flags.h',309,326,NULL,NULL,NULL,NULL,'',''),
 (393001,'ClearPageUptodate()','D:','/usr/src/linux-2.6.37/include/linux/page-flags.h',328,328,NULL,NULL,NULL,NULL,'',''),
 (393002,'set_page_writeback()','D:','/usr/src/linux-2.6.37/include/linux/page-flags.h',335,338,NULL,NULL,NULL,NULL,'',''),
 (393003,'test_set_page_writeback()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393004,'PageHead()','D:','/usr/src/linux-2.6.37/include/linux/page-flags.h',347,347,NULL,NULL,NULL,NULL,'',''),
 (393005,'__SetPageHead()','D:','/usr/src/linux-2.6.37/include/linux/page-flags.h',347,347,NULL,NULL,NULL,NULL,'',''),
 (393006,'__ClearPageHead()','D:','/usr/src/linux-2.6.37/include/linux/page-flags.h',347,347,NULL,NULL,NULL,NULL,'',''),
 (393007,'PageTail()','D:','/usr/src/linux-2.6.37/include/linux/page-flags.h',348,348,NULL,NULL,NULL,NULL,'',''),
 (393008,'__SetPageTail()','D:','/usr/src/linux-2.6.37/include/linux/page-flags.h',348,348,NULL,NULL,NULL,NULL,'',''),
 (393009,'__ClearPageTail()','D:','/usr/src/linux-2.6.37/include/linux/page-flags.h',348,348,NULL,NULL,NULL,NULL,'',''),
 (393010,'PageCompound()','D:','/usr/src/linux-2.6.37/include/linux/page-flags.h',350,354,NULL,NULL,NULL,NULL,'',''),
 (393011,'page_has_private()','D:','/usr/src/linux-2.6.37/include/linux/page-flags.h',427,430,NULL,NULL,NULL,NULL,'',''),
 (393012,'put_page_testzero()','D:','/usr/src/linux-2.6.37/include/linux/mm.h',262,266,NULL,NULL,NULL,NULL,'',''),
 (393013,'page._count','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393014,'get_page_unless_zero()','D:','/usr/src/linux-2.6.37/include/linux/mm.h',272,275,NULL,NULL,NULL,NULL,'',''),
 (393015,'is_vmalloc_addr()','D:','/usr/src/linux-2.6.37/include/linux/mm.h',289,298,NULL,NULL,NULL,NULL,'',''),
 (393016,'high_memory','g:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393017,'compound_head()','D:','/usr/src/linux-2.6.37/include/linux/mm.h',308,313,NULL,NULL,NULL,NULL,'',''),
 (393018,'page.first_page','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393019,'page_count()','D:','/usr/src/linux-2.6.37/include/linux/mm.h',315,318,NULL,NULL,NULL,NULL,'',''),
 (393020,'get_page()','D:','/usr/src/linux-2.6.37/include/linux/mm.h',320,325,NULL,NULL,NULL,NULL,'',''),
 (393021,'virt_to_head_page()','D:','/usr/src/linux-2.6.37/include/linux/mm.h',327,331,NULL,NULL,NULL,NULL,'',''),
 (393022,'mem_map','g:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393023,'init_page_count()','D:','/usr/src/linux-2.6.37/include/linux/mm.h',337,340,NULL,NULL,NULL,NULL,'',''),
 (393024,'set_compound_page_dtor()','D:','/usr/src/linux-2.6.37/include/linux/mm.h',355,359,NULL,NULL,NULL,NULL,'',''),
 (393025,'page.lru','S:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393026,'get_compound_page_dtor()','D:','/usr/src/linux-2.6.37/include/linux/mm.h',361,364,NULL,NULL,NULL,NULL,'',''),
 (393027,'compound_order()','D:','/usr/src/linux-2.6.37/include/linux/mm.h',366,371,NULL,NULL,NULL,NULL,'',''),
 (393028,'set_compound_order()','D:','/usr/src/linux-2.6.37/include/linux/mm.h',373,376,NULL,NULL,NULL,NULL,'',''),
 (393029,'page_zonenum()','D:','/usr/src/linux-2.6.37/include/linux/mm.h',523,526,NULL,NULL,NULL,NULL,'',''),
 (393030,'page_zone_id()','D:','/usr/src/linux-2.6.37/include/linux/mm.h',536,539,NULL,NULL,NULL,NULL,'',''),
 (393031,'zone_to_nid()','D:','/usr/src/linux-2.6.37/include/linux/mm.h',541,548,NULL,NULL,NULL,NULL,'',''),
 (393032,'page_to_nid()','D:','/usr/src/linux-2.6.37/include/linux/mm.h',553,556,NULL,NULL,NULL,NULL,'',''),
 (393033,'page_zone()','D:','/usr/src/linux-2.6.37/include/linux/mm.h',559,562,NULL,NULL,NULL,NULL,'',''),
 (393034,'pglist_data.node_zones[]','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393035,'set_page_zone()','D:','/usr/src/linux-2.6.37/include/linux/mm.h',571,575,NULL,NULL,NULL,NULL,'',''),
 (393036,'set_page_node()','D:','/usr/src/linux-2.6.37/include/linux/mm.h',577,581,NULL,NULL,NULL,NULL,'',''),
 (393037,'set_page_section()','D:','/usr/src/linux-2.6.37/include/linux/mm.h',583,587,NULL,NULL,NULL,NULL,'',''),
 (393038,'set_page_links()','D:','/usr/src/linux-2.6.37/include/linux/mm.h',589,595,NULL,NULL,NULL,NULL,'',''),
 (393039,'__count_vm_event()','D:','/usr/src/linux-2.6.37/include/linux/vmstat.h',83,86,NULL,NULL,NULL,NULL,'',''),
 (393040,'__bad_size_call_parameter()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393041,'count_vm_event()','D:','/usr/src/linux-2.6.37/include/linux/vmstat.h',88,91,NULL,NULL,NULL,NULL,'',''),
 (393042,'__count_vm_events()','D:','/usr/src/linux-2.6.37/include/linux/vmstat.h',93,96,NULL,NULL,NULL,NULL,'',''),
 (393043,'count_vm_events()','D:','/usr/src/linux-2.6.37/include/linux/vmstat.h',98,101,NULL,NULL,NULL,NULL,'',''),
 (393044,'zone_page_state_add()','D:','/usr/src/linux-2.6.37/include/linux/vmstat.h',145,150,NULL,NULL,NULL,NULL,'',''),
 (393045,'zone.vm_stat[]','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393046,'zone.vm_stat','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393047,'vm_stat[]','g:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393048,'vm_stat','g:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393049,'global_page_state()','D:','/usr/src/linux-2.6.37/include/linux/vmstat.h',152,160,NULL,NULL,NULL,NULL,'',''),
 (393050,'zone_page_state()','D:','/usr/src/linux-2.6.37/include/linux/vmstat.h',162,171,NULL,NULL,NULL,NULL,'',''),
 (393051,'zone_page_state_snapshot()','D:','/usr/src/linux-2.6.37/include/linux/vmstat.h',179,193,NULL,NULL,NULL,NULL,'',''),
 (393052,'per_cpu_pageset.vm_stat_diff[]','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393053,'per_cpu_pageset.vm_stat_diff','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393054,'zap_zone_vm_stats()','D:','/usr/src/linux-2.6.37/include/linux/vmstat.h',235,238,NULL,NULL,NULL,NULL,'',''),
 (393055,'lowmem_page_address()','D:','/usr/src/linux-2.6.37/include/linux/mm.h',602,605,NULL,NULL,NULL,NULL,'',''),
 (393056,'page_mapping()','D:','/usr/src/linux-2.6.37/include/linux/mm.h',653,663,NULL,NULL,NULL,NULL,'',''),
 (393057,'page.mapping','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393058,'swapper_space','g:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393059,'page_rmapping()','D:','/usr/src/linux-2.6.37/include/linux/mm.h',666,669,NULL,NULL,NULL,NULL,'',''),
 (393060,'PageAnon()','D:','/usr/src/linux-2.6.37/include/linux/mm.h',671,674,NULL,NULL,NULL,NULL,'',''),
 (393061,'page_index()','D:','/usr/src/linux-2.6.37/include/linux/mm.h',680,685,NULL,NULL,NULL,NULL,'',''),
 (393062,'page.private','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393063,'page.index','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393064,'reset_page_mapcount()','D:','/usr/src/linux-2.6.37/include/linux/mm.h',692,695,NULL,NULL,NULL,NULL,'',''),
 (393065,'page._mapcount','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393066,'page_mapcount()','D:','/usr/src/linux-2.6.37/include/linux/mm.h',697,700,NULL,NULL,NULL,NULL,'',''),
 (393067,'page_mapped()','D:','/usr/src/linux-2.6.37/include/linux/mm.h',705,708,NULL,NULL,NULL,NULL,'',''),
 (393068,'unmap_shared_mapping_range()','D:','/usr/src/linux-2.6.37/include/linux/mm.h',825,829,NULL,NULL,NULL,NULL,'',''),
 (393069,'unmap_mapping_range()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393070,'vma_stack_continue()','D:','/usr/src/linux-2.6.37/include/linux/mm.h',879,882,NULL,NULL,NULL,NULL,'',''),
 (393071,'vm_area_struct.vm_end','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393072,'set_mm_counter()','D:','/usr/src/linux-2.6.37/include/linux/mm.h',907,910,NULL,NULL,NULL,NULL,'',''),
 (393073,'mm_struct.rss_stat','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393074,'mm_rss_stat.count[]','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393075,'mm_rss_stat.count','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393076,'add_mm_counter()','D:','/usr/src/linux-2.6.37/include/linux/mm.h',914,917,NULL,NULL,NULL,NULL,'',''),
 (393077,'inc_mm_counter()','D:','/usr/src/linux-2.6.37/include/linux/mm.h',919,922,NULL,NULL,NULL,NULL,'',''),
 (393078,'dec_mm_counter()','D:','/usr/src/linux-2.6.37/include/linux/mm.h',924,927,NULL,NULL,NULL,NULL,'',''),
 (393079,'get_mm_rss()','D:','/usr/src/linux-2.6.37/include/linux/mm.h',961,965,NULL,NULL,NULL,NULL,'',''),
 (393080,'get_mm_counter()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393081,'get_mm_hiwater_rss()','D:','/usr/src/linux-2.6.37/include/linux/mm.h',967,970,NULL,NULL,NULL,NULL,'',''),
 (393082,'mm_struct.hiwater_rss','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393083,'get_mm_hiwater_vm()','D:','/usr/src/linux-2.6.37/include/linux/mm.h',972,975,NULL,NULL,NULL,NULL,'',''),
 (393084,'mm_struct.hiwater_vm','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393085,'mm_struct.total_vm','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393086,'update_hiwater_rss()','D:','/usr/src/linux-2.6.37/include/linux/mm.h',977,983,NULL,NULL,NULL,NULL,'',''),
 (393087,'update_hiwater_vm()','D:','/usr/src/linux-2.6.37/include/linux/mm.h',985,989,NULL,NULL,NULL,NULL,'',''),
 (393088,'setmax_mm_hiwater_rss()','D:','/usr/src/linux-2.6.37/include/linux/mm.h',991,998,NULL,NULL,NULL,NULL,'',''),
 (393089,'get_locked_pte()','D:','/usr/src/linux-2.6.37/include/linux/mm.h',1039,1045,NULL,NULL,NULL,NULL,'',''),
 (393090,'__get_locked_pte()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393091,'__pud_alloc()','D:','/usr/src/linux-2.6.37/include/linux/mm.h',1048,1052,NULL,NULL,NULL,NULL,'',''),
 (393092,'pud_alloc()','D:','/usr/src/linux-2.6.37/include/linux/mm.h',1075,1079,NULL,NULL,NULL,NULL,'',''),
 (393093,'pmd_alloc()','D:','/usr/src/linux-2.6.37/include/linux/mm.h',1081,1085,NULL,NULL,NULL,NULL,'',''),
 (393094,'__pmd_alloc()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393095,'pgtable_page_ctor()','D:','/usr/src/linux-2.6.37/include/linux/mm.h',1110,1114,NULL,NULL,NULL,NULL,'',''),
 (393096,'page.ptl','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393097,'inc_zone_page_state()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393098,'pgtable_page_dtor()','D:','/usr/src/linux-2.6.37/include/linux/mm.h',1116,1120,NULL,NULL,NULL,NULL,'',''),
 (393099,'dec_zone_page_state()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393100,'vma_nonlinear_insert()','D:','/usr/src/linux-2.6.37/include/linux/mm.h',1252,1257,NULL,NULL,NULL,NULL,'',''),
 (393101,'vm_area_struct.shared','S:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393102,'shared.vm_set','S:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393103,'vm_set.parent','S:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393104,'vm_set.list','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'','');
INSERT INTO `emmcfs`.`element` VALUES  (393105,'do_mmap()','D:','/usr/src/linux-2.6.37/include/linux/mm.h',1307,1318,NULL,NULL,NULL,NULL,'',''),
 (393106,'do_mmap_pgoff()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393107,'find_vma_intersection()','D:','/usr/src/linux-2.6.37/include/linux/mm.h',1379,1386,NULL,NULL,NULL,NULL,'',''),
 (393108,'find_vma()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393109,'vm_area_struct.vm_start','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393110,'vma_pages()','D:','/usr/src/linux-2.6.37/include/linux/mm.h',1388,1391,NULL,NULL,NULL,NULL,'',''),
 (393111,'kernel_map_pages()','D:','/usr/src/linux-2.6.37/include/linux/mm.h',1446,1447,NULL,NULL,NULL,NULL,'',''),
 (393112,'enable_debug_pagealloc()','D:','/usr/src/linux-2.6.37/include/linux/mm.h',1448,1450,NULL,NULL,NULL,NULL,'',''),
 (393113,'kernel_page_present()','D:','/usr/src/linux-2.6.37/include/linux/mm.h',1452,1452,NULL,NULL,NULL,NULL,'',''),
 (393114,'__copy_to_user_inatomic()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/uaccess_32.h',44,66,NULL,NULL,NULL,NULL,'',''),
 (393115,'__put_user_bad()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393116,'__copy_to_user_ll()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393117,'__copy_to_user()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/uaccess_32.h',82,87,NULL,NULL,NULL,NULL,'',''),
 (393118,'__copy_from_user_inatomic()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/uaccess_32.h',89,113,NULL,NULL,NULL,NULL,'',''),
 (393119,'__get_user_bad()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393120,'__copy_from_user_ll_nozero()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393121,'__copy_from_user()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/uaccess_32.h',137,157,NULL,NULL,NULL,NULL,'',''),
 (393122,'__copy_from_user_ll()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393123,'__copy_from_user_nocache()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/uaccess_32.h',159,179,NULL,NULL,NULL,NULL,'',''),
 (393124,'__copy_from_user_ll_nocache()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393125,'__copy_from_user_inatomic_nocache()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/uaccess_32.h',181,186,NULL,NULL,NULL,NULL,'',''),
 (393126,'__copy_from_user_ll_nocache_nozero()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393127,'copy_from_user()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/uaccess_32.h',203,215,NULL,NULL,NULL,NULL,'',''),
 (393128,'__builtin_object_size()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393129,'_copy_from_user()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393130,'copy_from_user_overflow()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393131,'pagefault_disable()','D:','/usr/src/linux-2.6.37/include/linux/uaccess.h',16,24,NULL,NULL,NULL,NULL,'',''),
 (393132,'thread_info.preempt_count','S:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393133,'pagefault_enable()','D:','/usr/src/linux-2.6.37/include/linux/uaccess.h',26,39,NULL,NULL,NULL,NULL,'',''),
 (393134,'irq_canonicalize()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/irq.h',13,16,NULL,NULL,NULL,NULL,'',''),
 (393135,'get_irq_regs()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/irq_regs.h',16,19,NULL,NULL,NULL,NULL,'',''),
 (393136,'set_irq_regs()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/irq_regs.h',21,29,NULL,NULL,NULL,NULL,'',''),
 (393137,'move_irq_desc()','D:','/usr/src/linux-2.6.37/include/linux/irqdesc.h',91,94,NULL,NULL,NULL,NULL,'',''),
 (393138,'generic_handle_irq_desc()','D:','/usr/src/linux-2.6.37/include/linux/irqdesc.h',116,126,NULL,NULL,NULL,NULL,'',''),
 (393139,'irq_desc.handle_irq','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393140,'*irq_desc.handle_irq()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393141,'generic_handle_irq()','D:','/usr/src/linux-2.6.37/include/linux/irqdesc.h',128,131,NULL,NULL,NULL,NULL,'',''),
 (393142,'irq_to_desc()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393143,'irq_has_action()','D:','/usr/src/linux-2.6.37/include/linux/irqdesc.h',134,138,NULL,NULL,NULL,NULL,'',''),
 (393144,'irq_desc.action','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393145,'irq_balancing_disabled()','D:','/usr/src/linux-2.6.37/include/linux/irqdesc.h',140,146,NULL,NULL,NULL,NULL,'',''),
 (393146,'irq_desc.status','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393147,'__set_irq_handler_unlocked()','D:','/usr/src/linux-2.6.37/include/linux/irqdesc.h',149,156,NULL,NULL,NULL,NULL,'',''),
 (393148,'profile_hit()','D:','/usr/src/linux-2.6.37/include/linux/profile.h',56,63,NULL,NULL,NULL,NULL,'',''),
 (393149,'prof_on','g:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393150,'profile_hits()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393151,'arch_is_kernel_text()','D:','/usr/src/linux-2.6.37/include/asm-generic/sections.h',29,32,NULL,NULL,NULL,NULL,'',''),
 (393152,'arch_is_kernel_data()','D:','/usr/src/linux-2.6.37/include/asm-generic/sections.h',36,39,NULL,NULL,NULL,NULL,'',''),
 (393153,'set_io_apic_irq_attr()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/hw_irq.h',71,79,NULL,NULL,NULL,NULL,'',''),
 (393154,'io_apic_irq_attr.ioapic','S:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393155,'io_apic_irq_attr.ioapic_pin','S:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393156,'io_apic_irq_attr.trigger','S:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393157,'io_apic_irq_attr.polarity','S:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393158,'set_irq_handler()','D:','/usr/src/linux-2.6.37/include/linux/irq.h',282,286,NULL,NULL,NULL,NULL,'',''),
 (393159,'__set_irq_handler()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393160,'set_irq_chained_handler()','D:','/usr/src/linux-2.6.37/include/linux/irq.h',293,298,NULL,NULL,NULL,NULL,'',''),
 (393161,'irq_set_status_flags()','D:','/usr/src/linux-2.6.37/include/linux/irq.h',304,307,NULL,NULL,NULL,NULL,'',''),
 (393162,'irq_modify_status()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393163,'irq_clear_status_flags()','D:','/usr/src/linux-2.6.37/include/linux/irq.h',309,312,NULL,NULL,NULL,NULL,'',''),
 (393164,'set_irq_noprobe()','D:','/usr/src/linux-2.6.37/include/linux/irq.h',314,317,NULL,NULL,NULL,NULL,'',''),
 (393165,'set_irq_probe()','D:','/usr/src/linux-2.6.37/include/linux/irq.h',319,322,NULL,NULL,NULL,NULL,'',''),
 (393166,'dynamic_irq_init()','D:','/usr/src/linux-2.6.37/include/linux/irq.h',334,337,NULL,NULL,NULL,NULL,'',''),
 (393167,'dynamic_irq_cleanup()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393168,'get_irq_chip()','D:','/usr/src/linux-2.6.37/include/linux/irq.h',347,351,NULL,NULL,NULL,NULL,'',''),
 (393169,'irq_get_irq_data()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393170,'irq_data.chip','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393171,'irq_data_get_irq_chip()','D:','/usr/src/linux-2.6.37/include/linux/irq.h',353,356,NULL,NULL,NULL,NULL,'',''),
 (393172,'get_irq_chip_data()','D:','/usr/src/linux-2.6.37/include/linux/irq.h',358,362,NULL,NULL,NULL,NULL,'',''),
 (393173,'irq_data.chip_data','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393174,'irq_data_get_irq_chip_data()','D:','/usr/src/linux-2.6.37/include/linux/irq.h',364,367,NULL,NULL,NULL,NULL,'',''),
 (393175,'get_irq_data()','D:','/usr/src/linux-2.6.37/include/linux/irq.h',369,373,NULL,NULL,NULL,NULL,'',''),
 (393176,'irq_data.handler_data','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393177,'irq_data_get_irq_data()','D:','/usr/src/linux-2.6.37/include/linux/irq.h',375,378,NULL,NULL,NULL,NULL,'',''),
 (393178,'get_irq_msi()','D:','/usr/src/linux-2.6.37/include/linux/irq.h',380,384,NULL,NULL,NULL,NULL,'',''),
 (393179,'irq_data.msi_desc','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393180,'irq_data_get_msi()','D:','/usr/src/linux-2.6.37/include/linux/irq.h',386,389,NULL,NULL,NULL,NULL,'',''),
 (393181,'irq_alloc_desc()','D:','/usr/src/linux-2.6.37/include/linux/irq.h',395,398,NULL,NULL,NULL,NULL,'',''),
 (393182,'irq_alloc_descs()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393183,'irq_alloc_desc_at()','D:','/usr/src/linux-2.6.37/include/linux/irq.h',400,403,NULL,NULL,NULL,NULL,'',''),
 (393184,'irq_alloc_desc_from()','D:','/usr/src/linux-2.6.37/include/linux/irq.h',405,408,NULL,NULL,NULL,NULL,'',''),
 (393185,'irq_free_desc()','D:','/usr/src/linux-2.6.37/include/linux/irq.h',410,413,NULL,NULL,NULL,NULL,'',''),
 (393186,'irq_free_descs()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393187,'irq_reserve_irq()','D:','/usr/src/linux-2.6.37/include/linux/irq.h',415,418,NULL,NULL,NULL,NULL,'',''),
 (393188,'irq_reserve_irqs()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393189,'account_system_vtime()','D:','/usr/src/linux-2.6.37/include/linux/hardirq.h',142,144,NULL,NULL,NULL,NULL,'',''),
 (393190,'flush_cache_all()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/cacheflush.h',8,8,NULL,NULL,NULL,NULL,'',''),
 (393191,'flush_cache_mm()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/cacheflush.h',9,9,NULL,NULL,NULL,NULL,'',''),
 (393192,'flush_cache_dup_mm()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/cacheflush.h',10,10,NULL,NULL,NULL,NULL,'',''),
 (393193,'flush_cache_range()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/cacheflush.h',11,12,NULL,NULL,NULL,NULL,'',''),
 (393194,'flush_cache_page()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/cacheflush.h',13,14,NULL,NULL,NULL,NULL,'',''),
 (393195,'flush_dcache_page()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/cacheflush.h',16,16,NULL,NULL,NULL,NULL,'',''),
 (393196,'flush_dcache_mmap_lock()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/cacheflush.h',17,17,NULL,NULL,NULL,NULL,'',''),
 (393197,'flush_dcache_mmap_unlock()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/cacheflush.h',18,18,NULL,NULL,NULL,NULL,'',''),
 (393198,'flush_icache_range()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/cacheflush.h',19,20,NULL,NULL,NULL,NULL,'',''),
 (393199,'flush_icache_page()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/cacheflush.h',21,22,NULL,NULL,NULL,NULL,'',''),
 (393200,'flush_icache_user_range()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/cacheflush.h',23,26,NULL,NULL,NULL,NULL,'',''),
 (393201,'flush_cache_vmap()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/cacheflush.h',27,27,NULL,NULL,NULL,NULL,'',''),
 (393202,'flush_cache_vunmap()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/cacheflush.h',28,29,NULL,NULL,NULL,NULL,'',''),
 (393203,'copy_to_user_page()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/cacheflush.h',31,37,NULL,NULL,NULL,NULL,'',''),
 (393204,'copy_from_user_page()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/cacheflush.h',39,45,NULL,NULL,NULL,NULL,'',''),
 (393205,'get_page_memtype()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/cacheflush.h',64,76,NULL,NULL,NULL,NULL,'',''),
 (393206,'set_page_memtype()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/cacheflush.h',78,100,NULL,NULL,NULL,NULL,'',''),
 (393207,'rodata_test()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/cacheflush.h',199,202,NULL,NULL,NULL,NULL,'',''),
 (393208,'flush_anon_page()','D:','/usr/src/linux-2.6.37/include/linux/highmem.h',13,15,NULL,NULL,NULL,NULL,'',''),
 (393209,'flush_kernel_dcache_page()','D:','/usr/src/linux-2.6.37/include/linux/highmem.h',19,21,NULL,NULL,NULL,NULL,'',''),
 (393210,'flush_kernel_vmap_range()','D:','/usr/src/linux-2.6.37/include/linux/highmem.h',22,24,NULL,NULL,NULL,NULL,'',''),
 (393211,'invalidate_kernel_vmap_range()','D:','/usr/src/linux-2.6.37/include/linux/highmem.h',25,27,NULL,NULL,NULL,NULL,'',''),
 (393212,'hrtimer_set_expires()','D:','/usr/src/linux-2.6.37/include/linux/hrtimer.h',185,189,NULL,NULL,NULL,NULL,'',''),
 (393213,'hrtimer._expires','S:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393214,'hrtimer._softexpires','S:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393215,'hrtimer_set_expires_range()','D:','/usr/src/linux-2.6.37/include/linux/hrtimer.h',191,195,NULL,NULL,NULL,NULL,'',''),
 (393216,'ktime_add_safe()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393217,'hrtimer_set_expires_range_ns()','D:','/usr/src/linux-2.6.37/include/linux/hrtimer.h',197,201,NULL,NULL,NULL,NULL,'',''),
 (393218,'hrtimer_set_expires_tv64()','D:','/usr/src/linux-2.6.37/include/linux/hrtimer.h',203,207,NULL,NULL,NULL,NULL,'',''),
 (393219,'hrtimer_add_expires()','D:','/usr/src/linux-2.6.37/include/linux/hrtimer.h',209,213,NULL,NULL,NULL,NULL,'',''),
 (393220,'hrtimer_add_expires_ns()','D:','/usr/src/linux-2.6.37/include/linux/hrtimer.h',215,219,NULL,NULL,NULL,NULL,'',''),
 (393221,'hrtimer_get_expires()','D:','/usr/src/linux-2.6.37/include/linux/hrtimer.h',221,224,NULL,NULL,NULL,NULL,'',''),
 (393222,'hrtimer_get_softexpires()','D:','/usr/src/linux-2.6.37/include/linux/hrtimer.h',226,229,NULL,NULL,NULL,NULL,'',''),
 (393223,'hrtimer_get_expires_tv64()','D:','/usr/src/linux-2.6.37/include/linux/hrtimer.h',231,234,NULL,NULL,NULL,NULL,'',''),
 (393224,'hrtimer_get_softexpires_tv64()','D:','/usr/src/linux-2.6.37/include/linux/hrtimer.h',235,238,NULL,NULL,NULL,NULL,'',''),
 (393225,'hrtimer_get_expires_ns()','D:','/usr/src/linux-2.6.37/include/linux/hrtimer.h',240,243,NULL,NULL,NULL,NULL,'',''),
 (393226,'hrtimer_expires_remaining()','D:','/usr/src/linux-2.6.37/include/linux/hrtimer.h',245,248,NULL,NULL,NULL,NULL,'',''),
 (393227,'hrtimer.base','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393228,'hrtimer_clock_base.get_time','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393229,'*hrtimer_clock_base.get_time()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393230,'hrtimer_cb_get_time()','D:','/usr/src/linux-2.6.37/include/linux/hrtimer.h',260,263,NULL,NULL,NULL,NULL,'',''),
 (393231,'hrtimer_is_hres_active()','D:','/usr/src/linux-2.6.37/include/linux/hrtimer.h',265,268,NULL,NULL,NULL,NULL,'',''),
 (393232,'hrtimer_clock_base.cpu_base','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393233,'hrtimer_cpu_base.hres_active','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393234,'hrtimer_init_on_stack()','D:','/usr/src/linux-2.6.37/include/linux/hrtimer.h',332,337,NULL,NULL,NULL,NULL,'',''),
 (393235,'hrtimer_init()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393236,'destroy_hrtimer_on_stack()','D:','/usr/src/linux-2.6.37/include/linux/hrtimer.h',338,338,NULL,NULL,NULL,NULL,'',''),
 (393237,'hrtimer_start_expires()','D:','/usr/src/linux-2.6.37/include/linux/hrtimer.h',354,363,NULL,NULL,NULL,NULL,'',''),
 (393238,'hrtimer_start_range_ns()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393239,'hrtimer_restart()','D:','/usr/src/linux-2.6.37/include/linux/hrtimer.h',365,368,NULL,NULL,NULL,NULL,'',''),
 (393240,'hrtimer_active()','D:','/usr/src/linux-2.6.37/include/linux/hrtimer.h',380,383,NULL,NULL,NULL,NULL,'',''),
 (393241,'hrtimer.state','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393242,'hrtimer_is_queued()','D:','/usr/src/linux-2.6.37/include/linux/hrtimer.h',388,391,NULL,NULL,NULL,NULL,'',''),
 (393243,'hrtimer_callback_running()','D:','/usr/src/linux-2.6.37/include/linux/hrtimer.h',397,400,NULL,NULL,NULL,NULL,'',''),
 (393244,'hrtimer_forward_now()','D:','/usr/src/linux-2.6.37/include/linux/hrtimer.h',407,411,NULL,NULL,NULL,NULL,'',''),
 (393245,'hrtimer_forward()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393246,'trace_irq_handler_entry()','D:','/usr/src/linux-2.6.37/include/trace/events/irq.h',37,37,NULL,NULL,NULL,NULL,'',''),
 (393247,'__tracepoint_irq_handler_entry','g:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393248,'register_trace_irq_handler_entry()','D:','/usr/src/linux-2.6.37/include/trace/events/irq.h',37,37,NULL,NULL,NULL,NULL,'',''),
 (393249,'unregister_trace_irq_handler_entry()','D:','/usr/src/linux-2.6.37/include/trace/events/irq.h',37,37,NULL,NULL,NULL,NULL,'',''),
 (393250,'check_trace_callback_type_irq_handler_entry()','D:','/usr/src/linux-2.6.37/include/trace/events/irq.h',37,37,NULL,NULL,NULL,NULL,'',''),
 (393251,'trace_irq_handler_exit()','D:','/usr/src/linux-2.6.37/include/trace/events/irq.h',67,67,NULL,NULL,NULL,NULL,'',''),
 (393252,'__tracepoint_irq_handler_exit','g:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393253,'register_trace_irq_handler_exit()','D:','/usr/src/linux-2.6.37/include/trace/events/irq.h',67,67,NULL,NULL,NULL,NULL,'',''),
 (393254,'unregister_trace_irq_handler_exit()','D:','/usr/src/linux-2.6.37/include/trace/events/irq.h',67,67,NULL,NULL,NULL,NULL,'',''),
 (393255,'check_trace_callback_type_irq_handler_exit()','D:','/usr/src/linux-2.6.37/include/trace/events/irq.h',67,67,NULL,NULL,NULL,NULL,'',''),
 (393256,'trace_softirq_entry()','D:','/usr/src/linux-2.6.37/include/trace/events/irq.h',112,112,NULL,NULL,NULL,NULL,'',''),
 (393257,'__tracepoint_softirq_entry','g:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393258,'register_trace_softirq_entry()','D:','/usr/src/linux-2.6.37/include/trace/events/irq.h',112,112,NULL,NULL,NULL,NULL,'',''),
 (393259,'unregister_trace_softirq_entry()','D:','/usr/src/linux-2.6.37/include/trace/events/irq.h',112,112,NULL,NULL,NULL,NULL,'',''),
 (393260,'check_trace_callback_type_softirq_entry()','D:','/usr/src/linux-2.6.37/include/trace/events/irq.h',112,112,NULL,NULL,NULL,NULL,'',''),
 (393261,'trace_softirq_exit()','D:','/usr/src/linux-2.6.37/include/trace/events/irq.h',126,126,NULL,NULL,NULL,NULL,'',''),
 (393262,'__tracepoint_softirq_exit','g:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393263,'register_trace_softirq_exit()','D:','/usr/src/linux-2.6.37/include/trace/events/irq.h',126,126,NULL,NULL,NULL,NULL,'',''),
 (393264,'unregister_trace_softirq_exit()','D:','/usr/src/linux-2.6.37/include/trace/events/irq.h',126,126,NULL,NULL,NULL,NULL,'',''),
 (393265,'check_trace_callback_type_softirq_exit()','D:','/usr/src/linux-2.6.37/include/trace/events/irq.h',126,126,NULL,NULL,NULL,NULL,'',''),
 (393266,'trace_softirq_raise()','D:','/usr/src/linux-2.6.37/include/trace/events/irq.h',140,140,NULL,NULL,NULL,NULL,'',''),
 (393267,'__tracepoint_softirq_raise','g:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393268,'register_trace_softirq_raise()','D:','/usr/src/linux-2.6.37/include/trace/events/irq.h',140,140,NULL,NULL,NULL,NULL,'',''),
 (393269,'unregister_trace_softirq_raise()','D:','/usr/src/linux-2.6.37/include/trace/events/irq.h',140,140,NULL,NULL,NULL,NULL,'',''),
 (393270,'check_trace_callback_type_softirq_raise()','D:','/usr/src/linux-2.6.37/include/trace/events/irq.h',140,140,NULL,NULL,NULL,NULL,'',''),
 (393271,'request_irq()','D:','/usr/src/linux-2.6.37/include/linux/interrupt.h',135,140,NULL,NULL,NULL,NULL,'',''),
 (393272,'request_threaded_irq()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393273,'devm_request_irq()','D:','/usr/src/linux-2.6.37/include/linux/interrupt.h',187,193,NULL,NULL,NULL,NULL,'',''),
 (393274,'devm_request_threaded_irq()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393275,'disable_irq_nosync_lockdep()','D:','/usr/src/linux-2.6.37/include/linux/interrupt.h',276,282,NULL,NULL,NULL,NULL,'',''),
 (393276,'disable_irq_nosync()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393277,'disable_irq_nosync_lockdep_irqsave()','D:','/usr/src/linux-2.6.37/include/linux/interrupt.h',284,290,NULL,NULL,NULL,NULL,'',''),
 (393278,'disable_irq_lockdep()','D:','/usr/src/linux-2.6.37/include/linux/interrupt.h',292,298,NULL,NULL,NULL,NULL,'',''),
 (393279,'disable_irq()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393280,'enable_irq_lockdep()','D:','/usr/src/linux-2.6.37/include/linux/interrupt.h',300,306,NULL,NULL,NULL,NULL,'',''),
 (393281,'enable_irq()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393282,'enable_irq_lockdep_irqrestore()','D:','/usr/src/linux-2.6.37/include/linux/interrupt.h',308,314,NULL,NULL,NULL,NULL,'',''),
 (393283,'enable_irq_wake()','D:','/usr/src/linux-2.6.37/include/linux/interrupt.h',319,322,NULL,NULL,NULL,NULL,'',''),
 (393284,'set_irq_wake()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393285,'disable_irq_wake()','D:','/usr/src/linux-2.6.37/include/linux/interrupt.h',324,327,NULL,NULL,NULL,NULL,'',''),
 (393286,'__raise_softirq_irqoff()','D:','/usr/src/linux-2.6.37/include/linux/interrupt.h',411,415,NULL,NULL,NULL,NULL,'',''),
 (393287,'tasklet_trylock()','D:','/usr/src/linux-2.6.37/include/linux/interrupt.h',483,486,NULL,NULL,NULL,NULL,'',''),
 (393288,'tasklet_struct.state','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393289,'tasklet_unlock()','D:','/usr/src/linux-2.6.37/include/linux/interrupt.h',488,492,NULL,NULL,NULL,NULL,'',''),
 (393290,'tasklet_unlock_wait()','D:','/usr/src/linux-2.6.37/include/linux/interrupt.h',494,497,NULL,NULL,NULL,NULL,'',''),
 (393291,'tasklet_schedule()','D:','/usr/src/linux-2.6.37/include/linux/interrupt.h',506,510,NULL,NULL,NULL,NULL,'',''),
 (393292,'__tasklet_schedule()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393293,'tasklet_hi_schedule()','D:','/usr/src/linux-2.6.37/include/linux/interrupt.h',514,518,NULL,NULL,NULL,NULL,'',''),
 (393294,'__tasklet_hi_schedule()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393295,'tasklet_hi_schedule_first()','D:','/usr/src/linux-2.6.37/include/linux/interrupt.h',528,532,NULL,NULL,NULL,NULL,'',''),
 (393296,'__tasklet_hi_schedule_first()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393297,'tasklet_disable_nosync()','D:','/usr/src/linux-2.6.37/include/linux/interrupt.h',535,539,NULL,NULL,NULL,NULL,'',''),
 (393298,'tasklet_struct.count','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393299,'tasklet_disable()','D:','/usr/src/linux-2.6.37/include/linux/interrupt.h',541,546,NULL,NULL,NULL,NULL,'',''),
 (393300,'tasklet_enable()','D:','/usr/src/linux-2.6.37/include/linux/interrupt.h',548,552,NULL,NULL,NULL,NULL,'',''),
 (393301,'tasklet_hi_enable()','D:','/usr/src/linux-2.6.37/include/linux/interrupt.h',554,558,NULL,NULL,NULL,NULL,'',''),
 (393302,'tasklet_hrtimer_start()','D:','/usr/src/linux-2.6.37/include/linux/interrupt.h',576,581,NULL,NULL,NULL,NULL,'',''),
 (393303,'hrtimer_start()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393304,'tasklet_hrtimer.timer','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393305,'tasklet_hrtimer_cancel()','D:','/usr/src/linux-2.6.37/include/linux/interrupt.h',583,588,NULL,NULL,NULL,NULL,'',''),
 (393306,'hrtimer_cancel()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393307,'tasklet_kill()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393308,'tasklet_hrtimer.tasklet','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393309,'__gen_sigaddset()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/signal.h',198,201,NULL,NULL,NULL,NULL,'',''),
 (393310,'__const_sigaddset()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/signal.h',203,207,NULL,NULL,NULL,NULL,'',''),
 (393311,'sigset_t.sig[]','S:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393312,'sigset_t.sig','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393313,'__gen_sigdelset()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/signal.h',215,218,NULL,NULL,NULL,NULL,'',''),
 (393314,'__const_sigdelset()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/signal.h',220,224,NULL,NULL,NULL,NULL,'',''),
 (393315,'__const_sigismember()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/signal.h',226,230,NULL,NULL,NULL,NULL,'',''),
 (393316,'__gen_sigismember()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/signal.h',232,238,NULL,NULL,NULL,NULL,'',''),
 (393317,'sigfindinword()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/signal.h',245,249,NULL,NULL,NULL,NULL,'',''),
 (393318,'copy_siginfo()','D:','/usr/src/linux-2.6.37/include/asm-generic/siginfo.h',287,294,NULL,NULL,NULL,NULL,'',''),
 (393319,'siginfo.si_code','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393320,'sigisemptyset()','D:','/usr/src/linux-2.6.37/include/linux/signal.h',74,89,NULL,NULL,NULL,NULL,'',''),
 (393321,'_NSIG_WORDS_is_unsupported_size()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393322,'sigorsets()','D:','/usr/src/linux-2.6.37/include/linux/signal.h',121,121,NULL,NULL,NULL,NULL,'',''),
 (393323,'sigandsets()','D:','/usr/src/linux-2.6.37/include/linux/signal.h',124,124,NULL,NULL,NULL,NULL,'',''),
 (393324,'signandsets()','D:','/usr/src/linux-2.6.37/include/linux/signal.h',127,127,NULL,NULL,NULL,NULL,'',''),
 (393325,'signotset()','D:','/usr/src/linux-2.6.37/include/linux/signal.h',151,151,NULL,NULL,NULL,NULL,'',''),
 (393326,'sigemptyset()','D:','/usr/src/linux-2.6.37/include/linux/signal.h',156,166,NULL,NULL,NULL,NULL,'',''),
 (393327,'sigfillset()','D:','/usr/src/linux-2.6.37/include/linux/signal.h',168,178,NULL,NULL,NULL,NULL,'',''),
 (393328,'sigaddsetmask()','D:','/usr/src/linux-2.6.37/include/linux/signal.h',182,185,NULL,NULL,NULL,NULL,'',''),
 (393329,'sigdelsetmask()','D:','/usr/src/linux-2.6.37/include/linux/signal.h',187,190,NULL,NULL,NULL,NULL,'',''),
 (393330,'sigtestsetmask()','D:','/usr/src/linux-2.6.37/include/linux/signal.h',192,195,NULL,NULL,NULL,NULL,'',''),
 (393331,'siginitset()','D:','/usr/src/linux-2.6.37/include/linux/signal.h',197,207,NULL,NULL,NULL,NULL,'',''),
 (393332,'siginitsetinv()','D:','/usr/src/linux-2.6.37/include/linux/signal.h',209,219,NULL,NULL,NULL,NULL,'',''),
 (393333,'init_sigpending()','D:','/usr/src/linux-2.6.37/include/linux/signal.h',223,227,NULL,NULL,NULL,NULL,'',''),
 (393334,'sigpending.signal','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393335,'sigpending.list','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393336,'valid_signal()','D:','/usr/src/linux-2.6.37/include/linux/signal.h',232,235,NULL,NULL,NULL,NULL,'',''),
 (393337,'prop_inc_percpu()','D:','/usr/src/linux-2.6.37/include/linux/proportions.h',70,78,NULL,NULL,NULL,NULL,'',''),
 (393338,'__prop_inc_percpu()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393339,'prop_inc_single()','D:','/usr/src/linux-2.6.37/include/linux/proportions.h',122,130,NULL,NULL,NULL,NULL,'',''),
 (393340,'__prop_inc_single()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393341,'secure_computing()','D:','/usr/src/linux-2.6.37/include/linux/seccomp.h',13,17,NULL,NULL,NULL,NULL,'',''),
 (393342,'__secure_computing()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393343,'plist_head_init()','D:','/usr/src/linux-2.6.37/include/linux/plist.h',144,153,NULL,NULL,NULL,NULL,'',''),
 (393344,'plist_head.prio_list','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393345,'plist_head.node_list','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393346,'plist_head_init_raw()','D:','/usr/src/linux-2.6.37/include/linux/plist.h',160,169,NULL,NULL,NULL,NULL,'',''),
 (393347,'plist_node_init()','D:','/usr/src/linux-2.6.37/include/linux/plist.h',176,180,NULL,NULL,NULL,NULL,'',''),
 (393348,'plist_node.prio','S:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393349,'plist_node.plist','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393350,'plist_head_empty()','D:','/usr/src/linux-2.6.37/include/linux/plist.h',229,232,NULL,NULL,NULL,NULL,'',''),
 (393351,'plist_node_empty()','D:','/usr/src/linux-2.6.37/include/linux/plist.h',238,241,NULL,NULL,NULL,NULL,'',''),
 (393352,'plist_first()','D:','/usr/src/linux-2.6.37/include/linux/plist.h',287,291,NULL,NULL,NULL,NULL,'',''),
 (393353,'plist_last()','D:','/usr/src/linux-2.6.37/include/linux/plist.h',293,298,NULL,NULL,NULL,NULL,'',''),
 (393354,'rt_mutex_debug_check_no_locks_freed()','D:','/usr/src/linux-2.6.37/include/linux/rtmutex.h',48,52,NULL,NULL,NULL,NULL,'',''),
 (393355,'rt_mutex_is_locked()','D:','/usr/src/linux-2.6.37/include/linux/rtmutex.h',82,85,NULL,NULL,NULL,NULL,'',''),
 (393356,'rt_mutex.owner','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393357,'account_scheduler_latency()','D:','/usr/src/linux-2.6.37/include/linux/latencytop.h',30,35,NULL,NULL,NULL,NULL,'',''),
 (393358,'latencytop_enabled','g:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393359,'__account_scheduler_latency()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393360,'make_key_ref()','D:','/usr/src/linux-2.6.37/include/linux/key.h',100,104,NULL,NULL,NULL,NULL,'',''),
 (393361,'key_ref_to_ptr()','D:','/usr/src/linux-2.6.37/include/linux/key.h',106,109,NULL,NULL,NULL,NULL,'',''),
 (393362,'is_key_possessed()','D:','/usr/src/linux-2.6.37/include/linux/key.h',111,114,NULL,NULL,NULL,NULL,'',''),
 (393363,'key_get()','D:','/usr/src/linux-2.6.37/include/linux/key.h',202,207,NULL,NULL,NULL,NULL,'',''),
 (393364,'key.usage','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393365,'key_ref_put()','D:','/usr/src/linux-2.6.37/include/linux/key.h',209,212,NULL,NULL,NULL,NULL,'',''),
 (393366,'key_put()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393367,'key_serial()','D:','/usr/src/linux-2.6.37/include/linux/key.h',273,276,NULL,NULL,NULL,NULL,'',''),
 (393368,'key.serial','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393369,'get_group_info()','D:','/usr/src/linux-2.6.37/include/linux/cred.h',48,52,NULL,NULL,NULL,NULL,'',''),
 (393370,'group_info.usage','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393371,'validate_creds()','D:','/usr/src/linux-2.6.37/include/linux/cred.h',200,202,NULL,NULL,NULL,NULL,'',''),
 (393372,'validate_creds_for_do_exit()','D:','/usr/src/linux-2.6.37/include/linux/cred.h',203,205,NULL,NULL,NULL,NULL,'',''),
 (393373,'validate_process_creds()','D:','/usr/src/linux-2.6.37/include/linux/cred.h',206,208,NULL,NULL,NULL,NULL,'',''),
 (393374,'get_new_cred()','D:','/usr/src/linux-2.6.37/include/linux/cred.h',218,222,NULL,NULL,NULL,NULL,'',''),
 (393375,'cred.usage','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393376,'get_cred()','D:','/usr/src/linux-2.6.37/include/linux/cred.h',237,242,NULL,NULL,NULL,NULL,'',''),
 (393377,'put_cred()','D:','/usr/src/linux-2.6.37/include/linux/cred.h',255,262,NULL,NULL,NULL,NULL,'',''),
 (393378,'__put_cred()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393379,'show_state()','D:','/usr/src/linux-2.6.37/include/linux/sched.h',286,289,NULL,NULL,NULL,NULL,'',''),
 (393380,'show_state_filter()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393381,'touch_softlockup_watchdog()','D:','/usr/src/linux-2.6.37/include/linux/sched.h',320,322,NULL,NULL,NULL,NULL,'',''),
 (393382,'touch_softlockup_watchdog_sync()','D:','/usr/src/linux-2.6.37/include/linux/sched.h',323,325,NULL,NULL,NULL,NULL,'',''),
 (393383,'touch_all_softlockup_watchdogs()','D:','/usr/src/linux-2.6.37/include/linux/sched.h',326,328,NULL,NULL,NULL,NULL,'',''),
 (393384,'iov_length()','D:','/usr/src/linux-2.6.37/include/linux/uio.h',43,51,NULL,NULL,NULL,NULL,'',''),
 (393385,'iovec.iov_len','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393386,'list_kiocb()','D:','/usr/src/linux-2.6.37/include/linux/aio.h',230,234,NULL,NULL,NULL,NULL,'',''),
 (393387,'signal_group_exit()','D:','/usr/src/linux-2.6.37/include/linux/sched.h',657,661,NULL,NULL,NULL,NULL,'',''),
 (393388,'signal_struct.flags','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393389,'signal_struct.group_exit_task','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393390,'sched_info_on()','D:','/usr/src/linux-2.6.37/include/linux/sched.h',763,773,NULL,NULL,NULL,NULL,'',''),
 (393391,'sd_balance_for_mc_power()','D:','/usr/src/linux-2.6.37/include/linux/sched.h',822,831,NULL,NULL,NULL,NULL,'',''),
 (393392,'sched_smt_power_savings','g:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393393,'sched_mc_power_savings','g:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393394,'sd_balance_for_package_power()','D:','/usr/src/linux-2.6.37/include/linux/sched.h',833,839,NULL,NULL,NULL,NULL,'',''),
 (393395,'sd_power_saving_flags()','D:','/usr/src/linux-2.6.37/include/linux/sched.h',849,855,NULL,NULL,NULL,NULL,'',''),
 (393396,'sched_group_cpus()','D:','/usr/src/linux-2.6.37/include/linux/sched.h',880,883,NULL,NULL,NULL,NULL,'',''),
 (393397,'sched_group.cpumask','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393398,'sched_domain_span()','D:','/usr/src/linux-2.6.37/include/linux/sched.h',979,982,NULL,NULL,NULL,NULL,'',''),
 (393399,'sched_domain.span','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393400,'test_sd_parent()','D:','/usr/src/linux-2.6.37/include/linux/sched.h',992,998,NULL,NULL,NULL,NULL,'',''),
 (393401,'sched_domain.parent','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393402,'sched_domain.flags','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393403,'prefetch_stack()','D:','/usr/src/linux-2.6.37/include/linux/sched.h',1021,1021,NULL,NULL,NULL,NULL,'',''),
 (393404,'rt_prio()','D:','/usr/src/linux-2.6.37/include/linux/sched.h',1539,1544,NULL,NULL,NULL,NULL,'',''),
 (393405,'rt_task()','D:','/usr/src/linux-2.6.37/include/linux/sched.h',1546,1549,NULL,NULL,NULL,NULL,'',''),
 (393406,'task_struct.prio','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393407,'task_pid()','D:','/usr/src/linux-2.6.37/include/linux/sched.h',1551,1554,NULL,NULL,NULL,NULL,'',''),
 (393408,'task_struct.pids[]','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393409,'task_struct.pids','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393410,'pid_link.pid','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393411,'task_tgid()','D:','/usr/src/linux-2.6.37/include/linux/sched.h',1556,1559,NULL,NULL,NULL,NULL,'',''),
 (393412,'task_struct.group_leader','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393413,'task_pgrp()','D:','/usr/src/linux-2.6.37/include/linux/sched.h',1566,1569,NULL,NULL,NULL,NULL,'',''),
 (393414,'task_session()','D:','/usr/src/linux-2.6.37/include/linux/sched.h',1571,1574,NULL,NULL,NULL,NULL,'',''),
 (393415,'task_pid_nr()','D:','/usr/src/linux-2.6.37/include/linux/sched.h',1594,1597,NULL,NULL,NULL,NULL,'',''),
 (393416,'task_struct.pid','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393417,'task_pid_nr_ns()','D:','/usr/src/linux-2.6.37/include/linux/sched.h',1599,1603,NULL,NULL,NULL,NULL,'',''),
 (393418,'__task_pid_nr_ns()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393419,'task_pid_vnr()','D:','/usr/src/linux-2.6.37/include/linux/sched.h',1605,1608,NULL,NULL,NULL,NULL,'',''),
 (393420,'task_tgid_nr()','D:','/usr/src/linux-2.6.37/include/linux/sched.h',1611,1614,NULL,NULL,NULL,NULL,'',''),
 (393421,'task_struct.tgid','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393422,'task_tgid_vnr()','D:','/usr/src/linux-2.6.37/include/linux/sched.h',1618,1621,NULL,NULL,NULL,NULL,'',''),
 (393423,'pid_vnr()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393424,'task_pgrp_nr_ns()','D:','/usr/src/linux-2.6.37/include/linux/sched.h',1624,1628,NULL,NULL,NULL,NULL,'',''),
 (393425,'task_pgrp_vnr()','D:','/usr/src/linux-2.6.37/include/linux/sched.h',1630,1633,NULL,NULL,NULL,NULL,'',''),
 (393426,'task_session_nr_ns()','D:','/usr/src/linux-2.6.37/include/linux/sched.h',1636,1640,NULL,NULL,NULL,NULL,'',''),
 (393427,'task_session_vnr()','D:','/usr/src/linux-2.6.37/include/linux/sched.h',1642,1645,NULL,NULL,NULL,NULL,'',''),
 (393428,'task_pgrp_nr()','D:','/usr/src/linux-2.6.37/include/linux/sched.h',1648,1651,NULL,NULL,NULL,NULL,'',''),
 (393429,'init_pid_ns','g:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393430,'pid_alive()','D:','/usr/src/linux-2.6.37/include/linux/sched.h',1661,1664,NULL,NULL,NULL,NULL,'',''),
 (393431,'is_global_init()','D:','/usr/src/linux-2.6.37/include/linux/sched.h',1672,1675,NULL,NULL,NULL,NULL,'',''),
 (393432,'put_task_struct()','D:','/usr/src/linux-2.6.37/include/linux/sched.h',1690,1694,NULL,NULL,NULL,NULL,'',''),
 (393433,'task_struct.usage','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393434,'__put_task_struct()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393435,'rcu_copy_process()','D:','/usr/src/linux-2.6.37/include/linux/sched.h',1776,1778,NULL,NULL,NULL,NULL,'',''),
 (393436,'set_cpus_allowed()','D:','/usr/src/linux-2.6.37/include/linux/sched.h',1796,1799,NULL,NULL,NULL,NULL,'',''),
 (393437,'set_cpus_allowed_ptr()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393438,'enable_sched_clock_irqtime()','D:','/usr/src/linux-2.6.37/include/linux/sched.h',1856,1856,NULL,NULL,NULL,NULL,'',''),
 (393439,'disable_sched_clock_irqtime()','D:','/usr/src/linux-2.6.37/include/linux/sched.h',1857,1857,NULL,NULL,NULL,NULL,'',''),
 (393440,'get_sysctl_timer_migration()','D:','/usr/src/linux-2.6.37/include/linux/sched.h',1915,1918,NULL,NULL,NULL,NULL,'',''),
 (393441,'sysctl_timer_migration','g:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393442,'kstack_end()','D:','/usr/src/linux-2.6.37/include/linux/sched.h',1972,1978,NULL,NULL,NULL,NULL,'',''),
 (393443,'get_uid()','D:','/usr/src/linux-2.6.37/include/linux/sched.h',2007,2011,NULL,NULL,NULL,NULL,'',''),
 (393444,'user_struct.__count','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393445,'dequeue_signal_lock()','D:','/usr/src/linux-2.6.37/include/linux/sched.h',2038,2048,NULL,NULL,NULL,NULL,'',''),
 (393446,'_raw_spin_lock_irqsave()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393447,'task_struct.sighand','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393448,'sighand_struct.siglock','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393449,'dequeue_signal()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393450,'kill_cad_pid()','D:','/usr/src/linux-2.6.37/include/linux/sched.h',2074,2077,NULL,NULL,NULL,NULL,'',''),
 (393451,'kill_pid()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393452,'cad_pid','g:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393453,'on_sig_stack()','D:','/usr/src/linux-2.6.37/include/linux/sched.h',2087,2096,NULL,NULL,NULL,NULL,'',''),
 (393454,'task_struct.sas_ss_sp','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393455,'task_struct.sas_ss_size','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393456,'sas_ss_flags()','D:','/usr/src/linux-2.6.37/include/linux/sched.h',2098,2102,NULL,NULL,NULL,NULL,'',''),
 (393457,'mmdrop()','D:','/usr/src/linux-2.6.37/include/linux/sched.h',2111,2115,NULL,NULL,NULL,NULL,'',''),
 (393458,'mm_struct.mm_count','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393459,'__mmdrop()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393460,'get_nr_threads()','D:','/usr/src/linux-2.6.37/include/linux/sched.h',2180,2183,NULL,NULL,NULL,NULL,'',''),
 (393461,'task_struct.signal','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393462,'signal_struct.nr_threads','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393463,'has_group_leader_pid()','D:','/usr/src/linux-2.6.37/include/linux/sched.h',2194,2197,NULL,NULL,NULL,NULL,'',''),
 (393464,'same_thread_group()','D:','/usr/src/linux-2.6.37/include/linux/sched.h',2199,2203,NULL,NULL,NULL,NULL,'',''),
 (393465,'next_thread()','D:','/usr/src/linux-2.6.37/include/linux/sched.h',2205,2209,NULL,NULL,NULL,NULL,'',''),
 (393466,'thread_group_empty()','D:','/usr/src/linux-2.6.37/include/linux/sched.h',2217,2220,NULL,NULL,NULL,NULL,'',''),
 (393467,'task_struct.thread_group','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393468,'task_detached()','D:','/usr/src/linux-2.6.37/include/linux/sched.h',2225,2228,NULL,NULL,NULL,NULL,'',''),
 (393469,'task_struct.exit_signal','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393470,'task_lock()','D:','/usr/src/linux-2.6.37/include/linux/sched.h',2240,2243,NULL,NULL,NULL,NULL,'',''),
 (393471,'task_struct.alloc_lock','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393472,'task_unlock()','D:','/usr/src/linux-2.6.37/include/linux/sched.h',2245,2248,NULL,NULL,NULL,NULL,'',''),
 (393473,'unlock_task_sighand()','D:','/usr/src/linux-2.6.37/include/linux/sched.h',2260,2264,NULL,NULL,NULL,NULL,'',''),
 (393474,'setup_thread_stack()','D:','/usr/src/linux-2.6.37/include/linux/sched.h',2271,2275,NULL,NULL,NULL,NULL,'',''),
 (393475,'task_struct.stack','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393476,'thread_info.task','S:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393477,'end_of_stack()','D:','/usr/src/linux-2.6.37/include/linux/sched.h',2277,2280,NULL,NULL,NULL,NULL,'',''),
 (393478,'object_is_on_stack()','D:','/usr/src/linux-2.6.37/include/linux/sched.h',2284,2289,NULL,NULL,NULL,NULL,'',''),
 (393479,'set_tsk_thread_flag()','D:','/usr/src/linux-2.6.37/include/linux/sched.h',2309,2312,NULL,NULL,NULL,NULL,'',''),
 (393480,'clear_tsk_thread_flag()','D:','/usr/src/linux-2.6.37/include/linux/sched.h',2314,2317,NULL,NULL,NULL,NULL,'',''),
 (393481,'test_and_set_tsk_thread_flag()','D:','/usr/src/linux-2.6.37/include/linux/sched.h',2319,2322,NULL,NULL,NULL,NULL,'',''),
 (393482,'test_and_clear_tsk_thread_flag()','D:','/usr/src/linux-2.6.37/include/linux/sched.h',2324,2327,NULL,NULL,NULL,NULL,'',''),
 (393483,'test_tsk_thread_flag()','D:','/usr/src/linux-2.6.37/include/linux/sched.h',2329,2332,NULL,NULL,NULL,NULL,'',''),
 (393484,'set_tsk_need_resched()','D:','/usr/src/linux-2.6.37/include/linux/sched.h',2334,2337,NULL,NULL,NULL,NULL,'',''),
 (393485,'clear_tsk_need_resched()','D:','/usr/src/linux-2.6.37/include/linux/sched.h',2339,2342,NULL,NULL,NULL,NULL,'',''),
 (393486,'test_tsk_need_resched()','D:','/usr/src/linux-2.6.37/include/linux/sched.h',2344,2347,NULL,NULL,NULL,NULL,'',''),
 (393487,'restart_syscall()','D:','/usr/src/linux-2.6.37/include/linux/sched.h',2349,2353,NULL,NULL,NULL,NULL,'',''),
 (393488,'signal_pending()','D:','/usr/src/linux-2.6.37/include/linux/sched.h',2355,2358,NULL,NULL,NULL,NULL,'',''),
 (393489,'__fatal_signal_pending()','D:','/usr/src/linux-2.6.37/include/linux/sched.h',2360,2363,NULL,NULL,NULL,NULL,'',''),
 (393490,'task_struct.pending','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393491,'fatal_signal_pending()','D:','/usr/src/linux-2.6.37/include/linux/sched.h',2365,2368,NULL,NULL,NULL,NULL,'',''),
 (393492,'signal_pending_state()','D:','/usr/src/linux-2.6.37/include/linux/sched.h',2370,2378,NULL,NULL,NULL,NULL,'',''),
 (393493,'need_resched()','D:','/usr/src/linux-2.6.37/include/linux/sched.h',2380,2383,NULL,NULL,NULL,NULL,'',''),
 (393494,'spin_needbreak()','D:','/usr/src/linux-2.6.37/include/linux/sched.h',2424,2431,NULL,NULL,NULL,NULL,'',''),
 (393495,'thread_group_cputime_init()','D:','/usr/src/linux-2.6.37/include/linux/sched.h',2439,2442,NULL,NULL,NULL,NULL,'',''),
 (393496,'signal_struct.cputimer','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393497,'thread_group_cputimer.lock','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393498,'task_cpu()','D:','/usr/src/linux-2.6.37/include/linux/sched.h',2460,2463,NULL,NULL,NULL,NULL,'',''),
 (393499,'thread_info.cpu','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393500,'add_rchar()','D:','/usr/src/linux-2.6.37/include/linux/sched.h',2511,2514,NULL,NULL,NULL,NULL,'',''),
 (393501,'task_struct.ioac','S:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393502,'task_io_accounting.rchar','S:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393503,'add_wchar()','D:','/usr/src/linux-2.6.37/include/linux/sched.h',2516,2519,NULL,NULL,NULL,NULL,'',''),
 (393504,'task_io_accounting.wchar','S:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393505,'inc_syscr()','D:','/usr/src/linux-2.6.37/include/linux/sched.h',2521,2524,NULL,NULL,NULL,NULL,'',''),
 (393506,'task_io_accounting.syscr','S:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393507,'inc_syscw()','D:','/usr/src/linux-2.6.37/include/linux/sched.h',2526,2529,NULL,NULL,NULL,NULL,'',''),
 (393508,'task_io_accounting.syscw','S:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393509,'task_rlimit()','D:','/usr/src/linux-2.6.37/include/linux/sched.h',2572,2576,NULL,NULL,NULL,NULL,'',''),
 (393510,'signal_struct.rlim[]','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393511,'signal_struct.rlim','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393512,'rlimit.rlim_cur','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393513,'task_rlimit_max()','D:','/usr/src/linux-2.6.37/include/linux/sched.h',2578,2582,NULL,NULL,NULL,NULL,'',''),
 (393514,'rlimit.rlim_max','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393515,'rlimit()','D:','/usr/src/linux-2.6.37/include/linux/sched.h',2584,2587,NULL,NULL,NULL,NULL,'',''),
 (393516,'rlimit_max()','D:','/usr/src/linux-2.6.37/include/linux/sched.h',2589,2592,NULL,NULL,NULL,NULL,'',''),
 (393517,'__native_flush_tlb()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/tlbflush.h',18,21,NULL,NULL,NULL,NULL,'',''),
 (393518,'__native_flush_tlb_global()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/tlbflush.h',23,42,NULL,NULL,NULL,NULL,'',''),
 (393519,'__native_flush_tlb_single()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/tlbflush.h',44,47,NULL,NULL,NULL,NULL,'',''),
 (393520,'__flush_tlb_all()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/tlbflush.h',49,55,NULL,NULL,NULL,NULL,'',''),
 (393521,'__flush_tlb_one()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/tlbflush.h',57,63,NULL,NULL,NULL,NULL,'',''),
 (393522,'flush_tlb_range()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/tlbflush.h',139,143,NULL,NULL,NULL,NULL,'',''),
 (393523,'flush_tlb_mm()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393524,'vm_area_struct.vm_mm','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393525,'reset_lazy_tlbstate()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/tlbflush.h',157,161,NULL,NULL,NULL,NULL,'',''),
 (393526,'init_mm','g:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393527,'flush_tlb_kernel_range()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/tlbflush.h',169,173,NULL,NULL,NULL,NULL,'',''),
 (393528,'flush_tlb_all()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393529,'kmap_atomic_idx_push()','D:','/usr/src/linux-2.6.37/include/linux/highmem.h',82,90,NULL,NULL,NULL,NULL,'',''),
 (393530,'kmap_atomic_idx()','D:','/usr/src/linux-2.6.37/include/linux/highmem.h',92,95,NULL,NULL,NULL,NULL,'',''),
 (393531,'kmap_atomic_idx_pop()','D:','/usr/src/linux-2.6.37/include/linux/highmem.h',97,104,NULL,NULL,NULL,NULL,'',''),
 (393532,'clear_user_highpage()','D:','/usr/src/linux-2.6.37/include/linux/highmem.h',126,131,NULL,NULL,NULL,NULL,'',''),
 (393533,'alloc_zeroed_user_highpage_movable()','D:','/usr/src/linux-2.6.37/include/linux/highmem.h',183,188,NULL,NULL,NULL,NULL,'',''),
 (393534,'clear_highpage()','D:','/usr/src/linux-2.6.37/include/linux/highmem.h',191,196,NULL,NULL,NULL,NULL,'',''),
 (393535,'zero_user_segments()','D:','/usr/src/linux-2.6.37/include/linux/highmem.h',207,223,NULL,NULL,NULL,NULL,'',''),
 (393536,'zero_user_segment()','D:','/usr/src/linux-2.6.37/include/linux/highmem.h',245,249,NULL,NULL,NULL,NULL,'',''),
 (393537,'zero_user()','D:','/usr/src/linux-2.6.37/include/linux/highmem.h',251,255,NULL,NULL,NULL,NULL,'',''),
 (393538,'memclear_highpage_flush()','D:','/usr/src/linux-2.6.37/include/linux/highmem.h',257,261,NULL,NULL,NULL,NULL,'',''),
 (393539,'copy_user_highpage()','D:','/usr/src/linux-2.6.37/include/linux/highmem.h',266,276,NULL,NULL,NULL,NULL,'',''),
 (393540,'copy_highpage()','D:','/usr/src/linux-2.6.37/include/linux/highmem.h',294,303,NULL,NULL,NULL,NULL,'',''),
 (393541,'is_vm_hugetlb_page()','D:','/usr/src/linux-2.6.37/include/linux/hugetlb_inline.h',8,11,NULL,NULL,NULL,NULL,'',''),
 (393542,'mapping_set_error()','D:','/usr/src/linux-2.6.37/include/linux/pagemap.h',29,37,NULL,NULL,NULL,NULL,'',''),
 (393543,'address_space.flags','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393544,'mapping_set_unevictable()','D:','/usr/src/linux-2.6.37/include/linux/pagemap.h',39,42,NULL,NULL,NULL,NULL,'',''),
 (393545,'mapping_clear_unevictable()','D:','/usr/src/linux-2.6.37/include/linux/pagemap.h',44,47,NULL,NULL,NULL,NULL,'',''),
 (393546,'mapping_unevictable()','D:','/usr/src/linux-2.6.37/include/linux/pagemap.h',49,54,NULL,NULL,NULL,NULL,'',''),
 (393547,'mapping_gfp_mask()','D:','/usr/src/linux-2.6.37/include/linux/pagemap.h',56,59,NULL,NULL,NULL,NULL,'',''),
 (393548,'mapping_set_gfp_mask()','D:','/usr/src/linux-2.6.37/include/linux/pagemap.h',65,69,NULL,NULL,NULL,NULL,'',''),
 (393549,'page_cache_get_speculative()','D:','/usr/src/linux-2.6.37/include/linux/pagemap.h',132,165,NULL,NULL,NULL,NULL,'',''),
 (393550,'page_cache_add_speculative()','D:','/usr/src/linux-2.6.37/include/linux/pagemap.h',170,188,NULL,NULL,NULL,NULL,'',''),
 (393551,'page_freeze_refs()','D:','/usr/src/linux-2.6.37/include/linux/pagemap.h',190,193,NULL,NULL,NULL,NULL,'',''),
 (393552,'page_unfreeze_refs()','D:','/usr/src/linux-2.6.37/include/linux/pagemap.h',195,201,NULL,NULL,NULL,NULL,'',''),
 (393553,'__page_cache_alloc()','D:','/usr/src/linux-2.6.37/include/linux/pagemap.h',206,209,NULL,NULL,NULL,NULL,'',''),
 (393554,'page_cache_alloc()','D:','/usr/src/linux-2.6.37/include/linux/pagemap.h',212,215,NULL,NULL,NULL,NULL,'',''),
 (393555,'page_cache_alloc_cold()','D:','/usr/src/linux-2.6.37/include/linux/pagemap.h',217,220,NULL,NULL,NULL,NULL,'',''),
 (393556,'grab_cache_page()','D:','/usr/src/linux-2.6.37/include/linux/pagemap.h',243,247,NULL,NULL,NULL,NULL,'',''),
 (393557,'find_or_create_page()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393558,'read_mapping_page_async()','D:','/usr/src/linux-2.6.37/include/linux/pagemap.h',262,268,NULL,NULL,NULL,NULL,'',''),
 (393559,'address_space.a_ops','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393560,'address_space_operations.readpage','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393561,'read_cache_page_async()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393562,'read_mapping_page()','D:','/usr/src/linux-2.6.37/include/linux/pagemap.h',270,275,NULL,NULL,NULL,NULL,'',''),
 (393563,'read_cache_page()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393564,'page_offset()','D:','/usr/src/linux-2.6.37/include/linux/pagemap.h',280,283,NULL,NULL,NULL,NULL,'',''),
 (393565,'linear_page_index()','D:','/usr/src/linux-2.6.37/include/linux/pagemap.h',288,297,NULL,NULL,NULL,NULL,'',''),
 (393566,'linear_hugepage_index()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393567,'vm_area_struct.vm_pgoff','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393568,'__set_page_locked()','D:','/usr/src/linux-2.6.37/include/linux/pagemap.h',306,309,NULL,NULL,NULL,NULL,'',''),
 (393569,'__clear_page_locked()','D:','/usr/src/linux-2.6.37/include/linux/pagemap.h',311,314,NULL,NULL,NULL,NULL,'',''),
 (393570,'trylock_page()','D:','/usr/src/linux-2.6.37/include/linux/pagemap.h',316,319,NULL,NULL,NULL,NULL,'',''),
 (393571,'lock_page()','D:','/usr/src/linux-2.6.37/include/linux/pagemap.h',324,329,NULL,NULL,NULL,NULL,'',''),
 (393572,'__lock_page()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393573,'lock_page_killable()','D:','/usr/src/linux-2.6.37/include/linux/pagemap.h',336,342,NULL,NULL,NULL,NULL,'',''),
 (393574,'__lock_page_killable()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393575,'lock_page_nosync()','D:','/usr/src/linux-2.6.37/include/linux/pagemap.h',348,353,NULL,NULL,NULL,NULL,'',''),
 (393576,'__lock_page_nosync()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393577,'lock_page_or_retry()','D:','/usr/src/linux-2.6.37/include/linux/pagemap.h',359,364,NULL,NULL,NULL,NULL,'',''),
 (393578,'__lock_page_or_retry()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393579,'wait_on_page_locked()','D:','/usr/src/linux-2.6.37/include/linux/pagemap.h',379,383,NULL,NULL,NULL,NULL,'',''),
 (393580,'wait_on_page_bit()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393581,'wait_on_page_writeback()','D:','/usr/src/linux-2.6.37/include/linux/pagemap.h',388,392,NULL,NULL,NULL,NULL,'',''),
 (393582,'fault_in_pages_writeable()','D:','/usr/src/linux-2.6.37/include/linux/pagemap.h',407,431,NULL,NULL,NULL,NULL,'',''),
 (393583,'fault_in_pages_readable()','D:','/usr/src/linux-2.6.37/include/linux/pagemap.h',433,452,NULL,NULL,NULL,NULL,'',''),
 (393584,'add_to_page_cache()','D:','/usr/src/linux-2.6.37/include/linux/pagemap.h',465,475,NULL,NULL,NULL,NULL,'',''),
 (393585,'add_to_page_cache_locked()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393586,'set_buffer_uptodate()','D:','/usr/src/linux-2.6.37/include/linux/buffer_head.h',113,113,NULL,NULL,NULL,NULL,'',''),
 (393587,'buffer_head.b_state','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393588,'clear_buffer_uptodate()','D:','/usr/src/linux-2.6.37/include/linux/buffer_head.h',113,113,NULL,NULL,NULL,NULL,'',''),
 (393589,'buffer_uptodate()','D:','/usr/src/linux-2.6.37/include/linux/buffer_head.h',113,113,NULL,NULL,NULL,NULL,'',''),
 (393590,'set_buffer_dirty()','D:','/usr/src/linux-2.6.37/include/linux/buffer_head.h',114,114,NULL,NULL,NULL,NULL,'',''),
 (393591,'clear_buffer_dirty()','D:','/usr/src/linux-2.6.37/include/linux/buffer_head.h',114,114,NULL,NULL,NULL,NULL,'',''),
 (393592,'buffer_dirty()','D:','/usr/src/linux-2.6.37/include/linux/buffer_head.h',114,114,NULL,NULL,NULL,NULL,'',''),
 (393593,'test_set_buffer_dirty()','D:','/usr/src/linux-2.6.37/include/linux/buffer_head.h',115,115,NULL,NULL,NULL,NULL,'',''),
 (393594,'test_clear_buffer_dirty()','D:','/usr/src/linux-2.6.37/include/linux/buffer_head.h',115,115,NULL,NULL,NULL,NULL,'',''),
 (393595,'set_buffer_locked()','D:','/usr/src/linux-2.6.37/include/linux/buffer_head.h',116,116,NULL,NULL,NULL,NULL,'',''),
 (393596,'clear_buffer_locked()','D:','/usr/src/linux-2.6.37/include/linux/buffer_head.h',116,116,NULL,NULL,NULL,NULL,'',''),
 (393597,'buffer_locked()','D:','/usr/src/linux-2.6.37/include/linux/buffer_head.h',116,116,NULL,NULL,NULL,NULL,'',''),
 (393598,'set_buffer_req()','D:','/usr/src/linux-2.6.37/include/linux/buffer_head.h',117,117,NULL,NULL,NULL,NULL,'',''),
 (393599,'clear_buffer_req()','D:','/usr/src/linux-2.6.37/include/linux/buffer_head.h',117,117,NULL,NULL,NULL,NULL,'',''),
 (393600,'buffer_req()','D:','/usr/src/linux-2.6.37/include/linux/buffer_head.h',117,117,NULL,NULL,NULL,NULL,'',''),
 (393601,'test_set_buffer_req()','D:','/usr/src/linux-2.6.37/include/linux/buffer_head.h',118,118,NULL,NULL,NULL,NULL,'',''),
 (393602,'test_clear_buffer_req()','D:','/usr/src/linux-2.6.37/include/linux/buffer_head.h',118,118,NULL,NULL,NULL,NULL,'',''),
 (393603,'set_buffer_mapped()','D:','/usr/src/linux-2.6.37/include/linux/buffer_head.h',119,119,NULL,NULL,NULL,NULL,'',''),
 (393604,'clear_buffer_mapped()','D:','/usr/src/linux-2.6.37/include/linux/buffer_head.h',119,119,NULL,NULL,NULL,NULL,'',''),
 (393605,'buffer_mapped()','D:','/usr/src/linux-2.6.37/include/linux/buffer_head.h',119,119,NULL,NULL,NULL,NULL,'',''),
 (393606,'set_buffer_new()','D:','/usr/src/linux-2.6.37/include/linux/buffer_head.h',120,120,NULL,NULL,NULL,NULL,'',''),
 (393607,'clear_buffer_new()','D:','/usr/src/linux-2.6.37/include/linux/buffer_head.h',120,120,NULL,NULL,NULL,NULL,'',''),
 (393608,'buffer_new()','D:','/usr/src/linux-2.6.37/include/linux/buffer_head.h',120,120,NULL,NULL,NULL,NULL,'',''),
 (393609,'set_buffer_async_read()','D:','/usr/src/linux-2.6.37/include/linux/buffer_head.h',121,121,NULL,NULL,NULL,NULL,'',''),
 (393610,'clear_buffer_async_read()','D:','/usr/src/linux-2.6.37/include/linux/buffer_head.h',121,121,NULL,NULL,NULL,NULL,'',''),
 (393611,'buffer_async_read()','D:','/usr/src/linux-2.6.37/include/linux/buffer_head.h',121,121,NULL,NULL,NULL,NULL,'',''),
 (393612,'set_buffer_async_write()','D:','/usr/src/linux-2.6.37/include/linux/buffer_head.h',122,122,NULL,NULL,NULL,NULL,'',''),
 (393613,'clear_buffer_async_write()','D:','/usr/src/linux-2.6.37/include/linux/buffer_head.h',122,122,NULL,NULL,NULL,NULL,'',''),
 (393614,'buffer_async_write()','D:','/usr/src/linux-2.6.37/include/linux/buffer_head.h',122,122,NULL,NULL,NULL,NULL,'',''),
 (393615,'set_buffer_delay()','D:','/usr/src/linux-2.6.37/include/linux/buffer_head.h',123,123,NULL,NULL,NULL,NULL,'',''),
 (393616,'clear_buffer_delay()','D:','/usr/src/linux-2.6.37/include/linux/buffer_head.h',123,123,NULL,NULL,NULL,NULL,'',''),
 (393617,'buffer_delay()','D:','/usr/src/linux-2.6.37/include/linux/buffer_head.h',123,123,NULL,NULL,NULL,NULL,'',''),
 (393618,'set_buffer_boundary()','D:','/usr/src/linux-2.6.37/include/linux/buffer_head.h',124,124,NULL,NULL,NULL,NULL,'',''),
 (393619,'clear_buffer_boundary()','D:','/usr/src/linux-2.6.37/include/linux/buffer_head.h',124,124,NULL,NULL,NULL,NULL,'',''),
 (393620,'buffer_boundary()','D:','/usr/src/linux-2.6.37/include/linux/buffer_head.h',124,124,NULL,NULL,NULL,NULL,'',''),
 (393621,'set_buffer_write_io_error()','D:','/usr/src/linux-2.6.37/include/linux/buffer_head.h',125,125,NULL,NULL,NULL,NULL,'',''),
 (393622,'clear_buffer_write_io_error()','D:','/usr/src/linux-2.6.37/include/linux/buffer_head.h',125,125,NULL,NULL,NULL,NULL,'',''),
 (393623,'buffer_write_io_error()','D:','/usr/src/linux-2.6.37/include/linux/buffer_head.h',125,125,NULL,NULL,NULL,NULL,'',''),
 (393624,'set_buffer_unwritten()','D:','/usr/src/linux-2.6.37/include/linux/buffer_head.h',126,126,NULL,NULL,NULL,NULL,'',''),
 (393625,'clear_buffer_unwritten()','D:','/usr/src/linux-2.6.37/include/linux/buffer_head.h',126,126,NULL,NULL,NULL,NULL,'',''),
 (393626,'buffer_unwritten()','D:','/usr/src/linux-2.6.37/include/linux/buffer_head.h',126,126,NULL,NULL,NULL,NULL,'',''),
 (393627,'attach_page_buffers()','D:','/usr/src/linux-2.6.37/include/linux/buffer_head.h',240,246,NULL,NULL,NULL,NULL,'',''),
 (393628,'get_bh()','D:','/usr/src/linux-2.6.37/include/linux/buffer_head.h',248,251,NULL,NULL,NULL,NULL,'',''),
 (393629,'buffer_head.b_count','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393630,'put_bh()','D:','/usr/src/linux-2.6.37/include/linux/buffer_head.h',253,257,NULL,NULL,NULL,NULL,'',''),
 (393631,'brelse()','D:','/usr/src/linux-2.6.37/include/linux/buffer_head.h',259,263,NULL,NULL,NULL,NULL,'',''),
 (393632,'__brelse()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393633,'bforget()','D:','/usr/src/linux-2.6.37/include/linux/buffer_head.h',265,269,NULL,NULL,NULL,NULL,'',''),
 (393634,'__bforget()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393635,'sb_bread()','D:','/usr/src/linux-2.6.37/include/linux/buffer_head.h',271,275,NULL,NULL,NULL,NULL,'',''),
 (393636,'__bread()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393637,'super_block.s_bdev','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393638,'super_block.s_blocksize','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393639,'sb_breadahead()','D:','/usr/src/linux-2.6.37/include/linux/buffer_head.h',277,281,NULL,NULL,NULL,NULL,'',''),
 (393640,'__breadahead()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393641,'sb_getblk()','D:','/usr/src/linux-2.6.37/include/linux/buffer_head.h',283,287,NULL,NULL,NULL,NULL,'',''),
 (393642,'__getblk()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393643,'sb_find_get_block()','D:','/usr/src/linux-2.6.37/include/linux/buffer_head.h',289,293,NULL,NULL,NULL,NULL,'',''),
 (393644,'__find_get_block()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393645,'map_bh()','D:','/usr/src/linux-2.6.37/include/linux/buffer_head.h',295,302,NULL,NULL,NULL,NULL,'',''),
 (393646,'buffer_head.b_bdev','S:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393647,'buffer_head.b_blocknr','S:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393648,'buffer_head.b_size','S:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393649,'wait_on_buffer()','D:','/usr/src/linux-2.6.37/include/linux/buffer_head.h',304,309,NULL,NULL,NULL,NULL,'',''),
 (393650,'__wait_on_buffer()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393651,'trylock_buffer()','D:','/usr/src/linux-2.6.37/include/linux/buffer_head.h',311,314,NULL,NULL,NULL,NULL,'',''),
 (393652,'lock_buffer()','D:','/usr/src/linux-2.6.37/include/linux/buffer_head.h',316,321,NULL,NULL,NULL,NULL,'',''),
 (393653,'__lock_buffer()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393654,'get_vm_area_size()','D:','/usr/src/linux-2.6.37/include/linux/vmalloc.h',78,82,NULL,NULL,NULL,NULL,'',''),
 (393655,'vm_struct.size','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393656,'INIT_FSM_BTREE()','D:','/usr/src/linux-2.6.37/fs/emmcfs/fsm_btree.h',62,70,'static inline int INIT_FSM_BTREE(struct  emmcfs_fsm_btree *btree)\r\n{\r\n	btree->order = EMMCFS_FSM_BTREE_ORDER;\r\n	btree->root = NULL;\r\n	btree->cmp_key = fsm_btree_cmp_fn;\r\n	btree->cpy_key = fsm_btree_cpy_fn;\r\n	btree->print_key = fsm_btree_print_fn;\r\n	return fsm_btree_cache_init(btree);\r\n}\r\n\r\n#define FMS_BTREE_INIT() { \\\r\n	.order		= EMMCFS_FSM_BTREE_ORDER,	\\\r\n	.root		= NULL,				\\\r\n	.cmp_key	= fsm_btree_cmp_fn,		\\\r\n	.cpy_key	= fsm_btree_cpy_fn,		\\\r\n	.print_key	= fsm_btree_print_fn		\\\r\n}','Switching layer\n\nNo pre check\nNo logging\nNo post check\n',NULL,NULL,'',''),
 (393657,'emmcfs_fsm_btree.order','S:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393658,'emmcfs_fsm_btree.root','S:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393659,'emmcfs_fsm_btree.cmp_key','S:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393660,'fsm_btree_cmp_fn','g:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393661,'emmcfs_fsm_btree.cpy_key','S:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393662,'fsm_btree_cpy_fn','g:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393663,'emmcfs_fsm_btree.print_key','S:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393664,'fsm_btree_print_fn','g:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393665,'fsm_btree_cache_init()','F:','/usr/src/linux-2.6.37/fs/emmcfs/fsm_btree.c',112,123,'/**\r\n * @brief	Initialize of the emmcfs fms b-tree cache\r\n * @return	Return 0 on success, errno on failure\r\n */\r\nint fsm_btree_cache_init(struct emmcfs_fsm_btree *btree)\r\n{\r\n	btree->node_cachep = kmem_cache_create(\"emmcfs_fsm_btree\",\r\n		sizeof(struct emmcfs_fsm_btree_node), 0,\r\n		SLAB_HWCACHE_ALIGN, btree_node_ctor);\r\n\r\n	if (!btree->node_cachep) {\r\n		EMMCFS_ERR(\"failed to initialize inode cache\\n\");\r\n		return -ENOMEM;\r\n	}\r\n	return 0;\r\n}','Object layer\n\nNo pre check\nNo logging\nPost check EMMCFS_ERR, -ENOMEM','2','5','',''),
 (393666,'emmcfs_debug_print_sb()','D:','/usr/src/linux-2.6.37/fs/emmcfs/debug.h',102,102,'#if defined(CONFIG_EMMCFS_DEBUG)\r\nvoid emmcfs_debug_print_sb(struct emmcfs_sb_info *sbi);\r\n#else\r\nstatic inline void emmcfs_debug_print_sb(struct emmcfs_sb_info *sbi) {}\r\n#endif\r\n','Object lavel\n\ncompiler directive\n\nNo pre check\nNo logging\nNo post check\n','1','1','',''),
 (393667,'get_value_pointer()','D:','/usr/src/linux-2.6.37/fs/emmcfs/emmcfs.h',253,257,'static inline void *get_value_pointer(void *key_ptr)\r\n{\r\n	struct emmcfs_cattree_key *key = key_ptr;\r\n	return key_ptr + key->gen_key.key_len;\r\n};','Switching layer\n\nNo pre check\nNo logging\nNo post check\n',NULL,NULL,'',''),
 (393668,'emmcfs_cattree_key.gen_key','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393669,'emmcfs_generic_key.key_len','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393670,'EMMCFS_I()','D:','/usr/src/linux-2.6.37/fs/emmcfs/emmcfs.h',330,335,'/**\r\n * @brief		Get eMMCFS inode info structure from encapsulated inode\r\n * @param [in] inode	VFS inode\r\n * @return		Pointer to eMMCFS inode info data structure\r\n */\r\n#ifdef __NCC__\nstatic inline struct emmcfs_inode_info *EMMCFS_I(struct inode *inode)\r\n{\r\n/*ig	return container_of(inode, struct emmcfs_inode_info, vfs_inode);\r */\n	return NULL;\n}\r\n#else\nstatic inline struct emmcfs_inode_info *EMMCFS_I(struct inode *inode)\r\n{\r\n	return container_of(inode, struct emmcfs_inode_info, vfs_inode);\r\n}\r\n#endif','Switching layer\n\ninterface to inode\n\nNo pre check\nNo logging\nNo post check\n',NULL,NULL,'',''),
 (393671,'EMMCFS_SB()','D:','/usr/src/linux-2.6.37/fs/emmcfs/emmcfs.h',349,352,'/**\r\n * @brief		get emmcfs superblock from VFS superblock\r\n * @param [in]		sb	VFS superblock\r\n * @return		emmcfs run-time superblock\r\n */\r\nstatic inline struct emmcfs_sb_info *EMMCFS_SB(struct super_block *sb)\r\n{\r\n	return sb->s_fs_info;\r\n}','interface',NULL,NULL,'',''),
 (393672,'super_block.s_fs_info','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393673,'EMMCFS_SNAPHOT_INFO()','D:','/usr/src/linux-2.6.37/fs/emmcfs/emmcfs.h',359,363,'/**\r\n * @brief		get emmcfs snapshot run-time structure\r\n * @param [in]		inode	VFS inode\r\n * @return		pointer to struct emmcfs_snapshot_info\r\n */\r\nstatic inline\r\nstruct emmcfs_snapshot_info *EMMCFS_SNAPHOT_INFO(struct inode *inode)\r\n{\r\n	return EMMCFS_SB(inode->i_sb)->snapshot_info;\r\n}','interface for EMMCFS_SB\n\nNo pre check\nNo logging\nNo post check\n',NULL,NULL,'',''),
 (393674,'emmcfs_sb_info.snapshot_info','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393675,'EMMCFS_ADD_CHUNK()','D:','/usr/src/linux-2.6.37/fs/emmcfs/emmcfs.h',372,378,'/**\r\n * @brief		add chunk to snapshot\r\n * @param [in]		inode	VFS inode\r\n * @param [in]		pages	data pages\r\n * @param [in]		page_count page count\r\n * @return		Returns 0 on success, errno on failure\r\n */\r\nstatic inline int EMMCFS_ADD_CHUNK(struct inode *inode, struct page **pages,\r\n		unsigned int page_count)\r\n{\r\n	return EMMCFS_SNAPHOT_INFO(inode)->snapshot_op->\r\n		add_to_snapshot(EMMCFS_SB(inode->i_sb),\r\n		inode, pages, page_count);\r\n}\r\n','Switching layer\n\ninterface to add_to_snapshot\n\nNo pre check\nNo logging\nNo post check\n',NULL,NULL,'','');
INSERT INTO `emmcfs`.`element` VALUES  (393676,'emmcfs_snapshot_info.snapshot_op','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393677,'snapshot_operations.add_to_snapshot','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393678,'*snapshot_operations.add_to_snapshot()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393679,'EMMCFS_SNAPSHOT_NEXT_INDEX()','D:','/usr/src/linux-2.6.37/fs/emmcfs/emmcfs.h',385,388,'/**\r\n * @brief		get emmcfs snapshot run-time structure\r\n * @param [in]		inode	VFS inode\r\n * @return		pointer to struct emmcfs_snapshot_info\r\n */\r\nstatic inline pgoff_t EMMCFS_SNAPSHOT_NEXT_INDEX(struct emmcfs_sb_info *sbi)\r\n{\r\n	return sbi->snapshot_info->page_index++;\r\n}','Switching layer\n\ninterface to sbi\n\nNo pre check\nNo logging\nNo post check\n',NULL,NULL,'',''),
 (393680,'emmcfs_snapshot_info.page_index','S:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393681,'EMMCFS_COMMIT_SNAPSHOT()','D:','/usr/src/linux-2.6.37/fs/emmcfs/emmcfs.h',395,398,'/**\r\n * @brief		Flash changed metadata to disk\r\n * @param [in]		EMMCFS run-time superblock\r\n * @return		Returns 0 on success, errno on failure\r\n */\r\nstatic inline int EMMCFS_COMMIT_SNAPSHOT(struct emmcfs_sb_info *sbi)\r\n{\r\n	return sbi->snapshot_info->snapshot_op->commit_snapshot(sbi);\r\n}','Switching layer\n\ninterface of sbi\n\nNo pre check\nNo logging\nNo post check\n','2','18','',''),
 (393682,'snapshot_operations.commit_snapshot','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393683,'*snapshot_operations.commit_snapshot()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393684,'EMMCFS_CLEAR_SNAPSHOT()','D:','/usr/src/linux-2.6.37/fs/emmcfs/emmcfs.h',405,409,'/**\r\n * @brief		Clear on-disk snapshot\r\n * @param [in]		EMMCFS run-time superblock\r\n * @return		Returns 0 on success, errno on failure\r\n */\r\nstatic inline int EMMCFS_CLEAR_SNAPSHOT(struct emmcfs_sb_info *sbi)\r\n{\r\n	return sbi->snapshot_info->snapshot_op->clear_snapshot(sbi);\r\n\r\n}','Parser layer\n\nNo pre check\nNo logging\nNo post check\n','1','11','',''),
 (393685,'snapshot_operations.clear_snapshot','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393686,'*snapshot_operations.clear_snapshot()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393687,'EMMCFS_RESTORE_FROM_SNAPSHOT()','D:','/usr/src/linux-2.6.37/fs/emmcfs/emmcfs.h',416,419,'/**\r\n * @brief		Restore metadata from snapshot if volume unmount\r\n * clear\r\n * @param [in]		EMMCFS run-time superblock\r\n * @return		Returns 0 on success, errno on failure\r\n */\r\nstatic inline int EMMCFS_RESTORE_FROM_SNAPSHOT(struct emmcfs_sb_info *sbi)\r\n{\r\n	return sbi->snapshot_info->snapshot_op->restore_snapshot(sbi);\r\n}','Parser layer\n\nNo pre check\nNo logging\nNo post check\n',NULL,NULL,'',''),
 (393688,'snapshot_operations.restore_snapshot','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393689,'*snapshot_operations.restore_snapshot()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393690,'is_fork_valid()','D:','/usr/src/linux-2.6.37/fs/emmcfs/emmcfs.h',425,442,'/*\r\n * @brief		Validate fork\r\n * @param [in] fork	Pointer to the fork for validation\r\n * @return		1 - fork is valid 0 - wrong fork\r\n * */\r\nstatic inline int is_fork_valid(const struct emmcfs_fork *fork)\r\n{\r\n	if (!fork)\r\n		goto ERR;\r\n	if (fork->magic != EMMCFS_FORK_MAGIC)\r\n		goto ERR;\r\n	if (fork->flags != EMMCFS_EXTENTS_FORK)\r\n		goto ERR;\r\n	if (fork->internal.fork.extents[0].magic != EMMCFS_EXTENT_MAGIC)\r\n		goto ERR;\r\n	if (fork->internal.fork.extents[0].flags != EMMCFS_BLOCK_EXTENT)\r\n		goto ERR;\r\n\r\n	return 1;\r\nERR:\r\n	EMMCFS_ERR(\"fork is invalid\");\r\n	return 0;\r\n}','FSM layer\n\nNo pre check\nNo logging\nPost check ERR\n',NULL,NULL,'',''),
 (393691,'emmcfs_fork.magic','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393692,'emmcfs_fork.flags','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393693,'emmcfs_fork.internal','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393694,'internal.fork','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393695,'fork.extents[]','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393696,'fork.extents','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393697,'emmcfs_extent.magic','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393698,'emmcfs_extent.flags','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393699,'__func__','g:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393700,'set_sbi_flag()','D:','/usr/src/linux-2.6.37/fs/emmcfs/emmcfs.h',444,447,'static inline void set_sbi_flag(struct emmcfs_sb_info *sbi, int flag)\r\n{\r\n	set_bit(flag, &sbi->flags);\r\n}',NULL,NULL,NULL,'',''),
 (393701,'emmcfs_sb_info.flags','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393702,'is_sbi_flag_set()','D:','/usr/src/linux-2.6.37/fs/emmcfs/emmcfs.h',449,452,'static inline int is_sbi_flag_set(struct emmcfs_sb_info *sbi, int flag)\r\n{\r\n	return test_bit(flag, &sbi->flags);\r\n}\r\n','interface for sbi\n\nNo pre check\nNo logging\nNo post check\n',NULL,NULL,'',''),
 (393703,'clear_sbi_flag()','D:','/usr/src/linux-2.6.37/fs/emmcfs/emmcfs.h',454,457,'static inline void clear_sbi_flag(struct emmcfs_sb_info *sbi, int flag)\r\n{\r\n	clear_bit(flag, &sbi->flags);\r\n}\r\n','interface',NULL,NULL,'',''),
 (393704,'emmcfs_lfork_to_rfork()','D:','/usr/src/linux-2.6.37/fs/emmcfs/emmcfs.h',465,484,'/**\r\n * @brief		Copy layout fork into run time fork\r\n * @param [out] rfork	Run time fork\r\n * @param [in] lfork	Layout fork\r\n * @return		0 on succes, < 0 otherwise\r\n */\r\nstatic inline void emmcfs_lfork_to_rfork(struct emmcfs_fork *lfork,\r\n		struct emmcfs_fork_info *rfork)\r\n{\r\n	unsigned i;\r\n	/* caller must check fork, call is_fork_valid(struct emmcfs_fork *) */\r\n	/* First blanked extent means - no any more valid extents */\r\n\r\n	rfork->used_extents = 0;\r\n	for (i = 0; i < EMMCFS_EXTENTS_COUNT_IN_FORK; ++i) {\r\n		struct emmcfs_extent *lextent;\r\n\r\n		lextent = &lfork->internal.fork.extents[i];\r\n		if (lextent->magic != EMMCFS_EXTENT_MAGIC)\r\n			break;\r\n		rfork->extents[i].first_block = le64_to_cpu(lextent->begin);\r\n		rfork->extents[i].block_count = le32_to_cpu(\r\n					lextent->in_blocks_or_lebs.length);\r\n		rfork->used_extents++;\r\n	}\r\n}','Switching layer\nTime layer\n\nNo pre check\nNo logging\nNo post check\n\n\n',NULL,NULL,'',''),
 (393705,'emmcfs_fork_info.used_extents','S:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393706,'emmcfs_fork_info.extents[]','S:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393707,'emmcfs_fork_info.extents','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393708,'emmcfs_extent_info.first_block','S:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393709,'emmcfs_extent.begin','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393710,'emmcfs_extent_info.block_count','S:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393711,'emmcfs_extent.in_blocks_or_lebs','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393712,'in_blocks_or_lebs.length','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393713,'emmcfs_rfork_to_lfork()','D:','/usr/src/linux-2.6.37/fs/emmcfs/emmcfs.h',493,521,'/**\r\n * @brief		copy run time fork to layout fork from\r\n * @param [in]  rfork	Run time fork\r\n * @param [in]  fork_size_in_bytes	fork size in bytes\r\n * @param [out] lfork	Layout fork\r\n * @return		void\r\n */\r\nstatic inline void emmcfs_rfork_to_lfork(struct emmcfs_fork_info *rfork,\r\n		loff_t fork_size_in_bytes, struct emmcfs_fork *lfork)\r\n{\r\n\r\n	u32	total_block_count = 0;\r\n	int	count;\r\n\r\n	lfork->internal.fork.size_in_bytes = cpu_to_le64(fork_size_in_bytes);\r\n\r\n	for (count = 0; count < rfork->used_extents; ++count) {\r\n		struct emmcfs_extent *lextent;\r\n\r\n		lextent = &lfork->internal.fork.extents[count];\r\n		lextent->begin = cpu_to_le64(rfork->extents[count].first_block);\r\n		lextent->in_blocks_or_lebs.length = cpu_to_le32(\r\n					rfork->extents[count].block_count);\r\n\r\n		total_block_count += rfork->extents[count].block_count;\r\n\r\n		lextent->magic = EMMCFS_EXTENT_MAGIC;\r\n		lextent->flags = EMMCFS_BLOCK_EXTENT;\r\n	}\r\n\r\n	lfork->internal.fork.total_blocks_count =\r\n			cpu_to_le32(total_block_count);\r\n\r\n	lfork->magic = EMMCFS_FORK_MAGIC;\r\n	lfork->flags = EMMCFS_EXTENTS_FORK;\r\n}','Switching layer\n\nNo pre check\nNo logging\nNo post check\n',NULL,NULL,'',''),
 (393714,'fork.size_in_bytes','S:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393715,'fork.total_blocks_count','S:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393716,'emmcfs_current_time()','D:','/usr/src/linux-2.6.37/fs/emmcfs/emmcfs.h',523,527,'static inline struct timespec emmcfs_current_time(struct inode *inode)\r\n{\r\n	return (inode->i_sb->s_time_gran < NSEC_PER_SEC) ?\r\n		current_fs_time(inode->i_sb) : CURRENT_TIME_SEC;\r\n}\n','Switching layer \nTime layer\n\ninterface i_sb\n\nNo pre check\nNo logging\nNo post check\n',NULL,NULL,'',''),
 (393717,'get_seconds()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393718,'super_block.s_time_gran','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393719,'current_fs_time()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393720,'calculate_nodes_size()','D:','/usr/src/linux-2.6.37/fs/emmcfs/bnode.c',27,34,'static inline int calculate_nodes_size(unsigned int blocks_to_allocate,\r\n		unsigned int block_size_shift,\r\n		struct emmcfs_btree *tree)\r\n{\r\n	unsigned int cattree_size = blocks_to_allocate << block_size_shift;\r\n	return cattree_size / tree->node_size_bytes +\r\n		(cattree_size % tree->node_size_bytes != 0);\r\n}','Switching check\n\nNo pre check\nNo logging\nNo post check\n','1','2','',''),
 (393721,'emmcfs_btree.node_size_bytes','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393722,'emmcfs_alloc_new_page()','D:','/usr/src/linux-2.6.37/fs/emmcfs/bnode.c',36,69,'struct page *emmcfs_alloc_new_page(struct address_space *mapping,\r\n					     pgoff_t page_index)\r\n{\r\n	struct page *page;\r\n	struct inode *inode = mapping->host;\r\n	struct buffer_head *head, *bh;\r\n	sector_t iblock = page_index << (PAGE_CACHE_SHIFT -\r\n			inode->i_sb->s_blocksize_bits);\r\n\r\n	page = find_or_create_page(mapping, page_index,\r\n				   mapping_gfp_mask(mapping) & ~__GFP_FS);\r\n	if (!page)\r\n		return ERR_PTR(-ENOMEM);\r\n\r\n	SetPageUptodate(page);\r\n	if (!page_has_buffers(page))\r\n		create_empty_buffers(page, inode->i_sb->s_blocksize, 0);\r\n\r\n	head = bh = page_buffers(page);\r\n\r\n	do {\r\n		if (!buffer_mapped(bh)) {\r\n			int ret = emmcfs_get_block(inode, iblock++, bh, 1);\r\n			if (ret) {\r\n				unlock_page(page);\r\n				return ERR_PTR(ret);\r\n			}\r\n		}\r\n	} while ((bh = bh->b_this_page) != head);\r\n\r\n	unlock_page(page);\r\n\r\n	return page;\r\n}\r\n','Object level\nFSM level\n\nNo pre check\nNo logging\nPost check ERR_PTR, -ENOMEM','6','20','',''),
 (393723,'address_space.host','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393724,'super_block.s_blocksize_bits','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393725,'create_empty_buffers()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393726,'emmcfs_get_block()','F:','/usr/src/linux-2.6.37/fs/emmcfs/inode.c',675,747,'int emmcfs_get_block(struct inode *inode, sector_t iblock,\r\n			struct buffer_head *bh_result, int create)\r\n{\r\n	struct emmcfs_inode_info *inode_info = EMMCFS_I(inode);\r\n	struct emmcfs_sb_info	*sbi = inode->i_sb->s_fs_info;\r\n	struct super_block *sb = inode->i_sb;\r\n	sector_t res_block;\r\n	int alloc = 0;\r\n	sector_t blk_cnt = 1;\r\n	__u32 max_blocks = 1;\r\n\r\n	switch (inode->i_ino) {\r\n	case EMMCFS_LEB_BITMAP_INO:\r\n		res_block = emmcfs_find_old_block(inode_info, iblock,\r\n				&max_blocks);\r\n		/* res_block = sbi->lebs_bm_start_block + iblock; */\r\n		break;\r\n	default:\r\n		if (iblock >= inode_info->fork.total_block_count) {\r\n			if (!create)\r\n				return 0;\r\n			/* CAT_TREE and EXTENTS_TREE expands by 128 LEBS\r\n			 * (2Mb if leb size 16kb)) */\r\n			if ((inode->i_ino == EMMCFS_CAT_TREE_INO) ||\r\n			    (inode->i_ino == EMMCFS_EXTENTS_TREE_INO))\r\n				blk_cnt = 1 << (sbi->log_blocks_in_leb + 7);\r\n			/* HARDLINKS_AREA and FREE_INODE_BITMAP expands by LEB*/\r\n			if ((inode->i_ino == EMMCFS_HARDLINKS_AREA_INO) ||\r\n			    (inode->i_ino == EMMCFS_FREE_INODE_BITMAP_INO))\r\n				blk_cnt = 1 << sbi->log_blocks_in_leb;\r\n\r\n			res_block = emmcfs_find_new_block(inode_info,\r\n							  sbi->fsm_info,\r\n							  iblock, &blk_cnt);\r\n			if (res_block == 0)\r\n				return -ENOSPC; /*todo dynamically decrease\r\n					blk_cnt*/\r\n\r\n			if (inode->i_ino < EMMCFS_1ST_FILE_INO) {\r\n\r\n				i_size_write(inode, i_size_read(inode) +\r\n					sb->s_blocksize * blk_cnt);\r\n				set_sbi_flag(sbi, EXTENDED_SUPERBLOCK_DIRTY);\r\n				sb->s_dirt = 1;\r\n			}\r\n			inode_add_bytes(inode, sb->s_blocksize * blk_cnt);\r\n			inode_info->phys_size += sb->s_blocksize * blk_cnt;\r\n			alloc = 1;\r\n		} else {\r\n			res_block = emmcfs_find_old_block(inode_info, iblock,\r\n				&max_blocks);\r\n			if (res_block == 0)\r\n				return -ENOSPC; /*todo ?*/\r\n		}\r\n		break;\r\n	}\r\n\r\n	clear_buffer_new(bh_result);\r\n	map_bh(bh_result, inode->i_sb, res_block);\r\n	bh_result->b_size = sb->s_blocksize;\r\n\r\n\r\n	if (alloc) {\r\n		set_buffer_new(bh_result);\r\n		if (inode->i_ino < EMMCFS_1ST_FILE_INO)\r\n			mark_inode_dirty(inode);\r\n		return 0;\r\n	}\r\n\r\n	/*FIXME: add read ahead bh_result->b_size\r\n	EMMCFS_DEBUG_INO(\"block is %lld\", (long long int) res_block);*/\r\n	return 0;\r\n}','FSM level\nObject level\n\nNo pre check\nLogging enable, but comment\nPost check -ENOSPC, ','13','39','',''),
 (393727,'unlock_page()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393728,'buffer_head.b_this_page','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393729,'__get_bnode()','D:','/usr/src/linux-2.6.37/fs/emmcfs/bnode.c',71,139,'struct emmcfs_bnode *__get_bnode(struct emmcfs_btree *btree, long node_id,\r\n		int create, enum emmcfs_get_bnode_mode mode)\r\n{\r\n	struct inode *inode = btree->inode;\r\n	struct emmcfs_bnode *node;\r\n	struct page **pages = NULL;\r\n	struct emmcfs_gen_node_descr *new_bnode_desc = NULL;\r\n	void *err_ret_code = NULL;\r\n	int i;\r\n	pgoff_t page_index;\r\n	int first_page_dirty;\r\n\r\n	BUG_ON(!inode);\r\n\r\n	EMMCFS_DEBUG_INO(\"requesting bnode %ld\", node_id);\r\n#ifdef SINGLE_NODE_LOCK\r\n	lock_node(btree, node_id);\r\n#endif\r\n\r\n	node = kmalloc(sizeof(struct emmcfs_bnode), GFP_KERNEL);\r\n	if (!node)\r\n		return ERR_PTR(-ENOMEM);\r\n\r\n	page_index = node_id * btree->pages_per_node;\r\n\r\n	pages = kzalloc(sizeof(*pages) * btree->pages_per_node, GFP_KERNEL);\r\n	if (!pages)\r\n		return ERR_PTR(-ENOMEM);\r\n	for (i = 0; i < btree->pages_per_node ; i++) {\r\n		if (create) {\r\n			pages[i] = emmcfs_alloc_new_page(inode->i_mapping,\r\n					page_index + i);\r\n		} else {\r\n			pages[i] = read_mapping_page(inode->i_mapping,\r\n					page_index + i, NULL);\r\n		}\r\n		if (IS_ERR(pages[i])) {\r\n			err_ret_code = pages[i];\r\n			goto err_exit;\r\n		}\r\n	}\r\n\r\n	first_page_dirty = PageDirty(pages[0]);\r\n	if ((mode == EMMCFS_BNODE_MODE_RW) & (!first_page_dirty) &\r\n			(!create)) {\r\n		EMMCFS_DEBUG_SNAPSHOT(\"Try to add chunk %ld\", node_id);\r\n		EMMCFS_ADD_CHUNK(inode, pages, btree->pages_per_node);\r\n	}\r\n\r\n	node->data = vmap(pages, btree->pages_per_node, VM_MAP, PAGE_KERNEL);\r\n	new_bnode_desc = (struct emmcfs_gen_node_descr *)node->data;\r\n\r\n	node->pages = pages;\r\n	node->host = btree;\r\n	node->node_id = node_id;\r\n\r\n	node->mode = mode;\r\n\r\n	return node;\r\n\r\nerr_exit:\r\n	for (i = 0; i < btree->pages_per_node; i++) {\r\n		if (pages[i] && !IS_ERR(pages[i]))\r\n			page_cache_release(node->pages[i]);\r\n	}\r\n	kfree(pages);\r\n	kfree(node);\r\n	return err_ret_code;\r\n}','Object level\nFSM level\nparser level\n\nPre check BUG_ON\nLogging EMMCFS_DEBUG_INO\nPost chek ERR_PTR ','10','46','RESOURCE_LEAK','leaked_storage : \"Variable \"\"node\"\" goes out of scope\"\r\n'),
 (393730,'emmcfs_btree.inode','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393731,'emmcfs_btree.pages_per_node','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393732,'emmcfs_bnode.data','S:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393733,'vmap()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393734,'emmcfs_bnode.pages','S:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393735,'emmcfs_bnode.host','S:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393736,'emmcfs_bnode.node_id','S:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393737,'emmcfs_bnode.mode','S:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393738,'put_page()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393739,'emmcfs_bnode.pages[]','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393740,'kfree()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393741,'emmcfs_get_bnode()','D:','/usr/src/linux-2.6.37/fs/emmcfs/bnode.c',141,145,'struct emmcfs_bnode *emmcfs_get_bnode(struct emmcfs_btree *btree, long node_id,\r\n		enum emmcfs_get_bnode_mode mode)\r\n{\r\n	return __get_bnode(btree, node_id, 0, mode);\r\n}','wraper __get_bnode','1','1','',''),
 (393742,'emmcfs_alloc_new_bnode()','D:','/usr/src/linux-2.6.37/fs/emmcfs/bnode.c',147,199,'struct emmcfs_bnode *emmcfs_alloc_new_bnode(struct emmcfs_btree *btree)\r\n{\r\n	__u32 bnode_id;\r\n	struct emmcfs_bnode_bitmap *bitmap = btree->bitmap;\r\n	struct emmcfs_bnode *bnode;\r\n\r\n	if (bitmap->free_num == 0)\r\n		return ERR_PTR(-ENOSPC);\r\n\r\n	/*spin_lock(&bitmap->spinlock);*/\r\n	BUG_ON(test_and_set_bit(bitmap->first_free_id, bitmap->data));\r\n	/*spin_unlock(&bitmap->spinlock);*/\r\n	/* TODO bitmap->data  directly points to head bnode memarea so head\r\n	 * bnode is always kept in memory. Maybe better to split totally\r\n	 * on-disk and runtime structures and sync them only in sync-points\r\n	 * (sync callback, write_inode) ?\r\n	 */\r\n	emmcfs_mark_bnode_dirty(btree->head_bnode);\r\n\r\n#ifdef SINGLE_NODE_LOCK\r\n	if (unlikely(bitmap->first_free_id >= btree->total_locks)) {\r\n		struct emmcfs_inode_info *info = EMMCFS_I(btree->inode);\r\n		int alloc_blocks = info->fork.extents[0].block_count;\r\n		struct emmcfs_sb_info *sbi = btree->inode->i_sb->s_fs_info;\r\n		int alloc_nodes = calculate_nodes_size(alloc_blocks,\r\n				sbi->block_size_shift, btree);\r\n		struct emmcfs_node_locks_container *new_locks =\r\n				create_new_locks_container(alloc_nodes, btree);\r\n		new_locks->index = btree->containers_amnt;\r\n		btree->containers[btree->containers_amnt++] = new_locks;\r\n		btree->total_locks += alloc_nodes;\r\n		/*\r\n		list_add(&new_locks->list, &sbi->catalog_tree->containers_list);\r\n		*/\r\n	}\r\n#endif\r\n\r\n	bnode = __get_bnode(btree, bitmap->first_free_id, 1,\r\n			EMMCFS_BNODE_MODE_RW);\r\n	if (IS_ERR(bnode)) {\r\n		clear_bit(bitmap->first_free_id, bitmap->data);\r\n		return bnode;\r\n	}\r\n\r\n	/* Updata bitmap information */\r\n	bnode_id = bitmap->first_free_id;\r\n	bitmap->first_free_id = find_next_zero_bit(bitmap->data,\r\n			bitmap->bits_num, bitmap->first_free_id);\r\n	bitmap->free_num--;\r\n	emmcfs_mark_bnode_dirty(btree->head_bnode);\r\n\r\n	return bnode;\r\n}','Object and switching level\nPre condition BUG_ON\nPost checking IS_ERR\nNo logging\n\n#ifdef SINGLE_NODE_LOCK\n\nMaybe better to split totally\r\n	 * on-disk and runtime structures and sync them only in sync-points\r\n	 * (sync callback, write_inode) ?','4','25','',''),
 (393743,'emmcfs_btree.bitmap','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393744,'emmcfs_bnode_bitmap.free_num','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393745,'emmcfs_bnode_bitmap.first_free_id','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393746,'emmcfs_bnode_bitmap.data','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393747,'emmcfs_mark_bnode_dirty()','F:','/usr/src/linux-2.6.37/fs/emmcfs/bnode.c',281,291,'void emmcfs_mark_bnode_dirty(struct emmcfs_bnode *node)\r\n{\r\n	int i;\r\n\r\n	BUG_ON(node->mode != EMMCFS_BNODE_MODE_RW);\r\n\r\n	if (!node)\r\n		BUG_ON(!node);\r\n	for (i = 0; i < node->host->pages_per_node; i++)\r\n		set_page_dirty_lock(node->pages[i]);\r\n}','Object level\nPre condition BUG_ON\nNo Post\nNo Logging','3','8','',''),
 (393748,'emmcfs_btree.head_bnode','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393749,'emmcfs_bnode_bitmap.bits_num','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393750,'emmcfs_put_bnode()','D:','/usr/src/linux-2.6.37/fs/emmcfs/bnode.c',201,219,'void emmcfs_put_bnode(struct emmcfs_bnode *bnode)\r\n{\r\n	int i;\r\n\r\n	BUG_ON(!bnode->data || !bnode->pages);\r\n\r\n	vunmap(bnode->data);\r\n	for (i = 0; i < bnode->host->pages_per_node; i++)\r\n		page_cache_release(bnode->pages[i]);\r\n\r\n	bnode->data = NULL;\r\n\r\n	kfree(bnode->pages);\r\n	EMMCFS_DEBUG_INO(\"releasing bnode %u\", bnode->node_id);\r\n#ifdef SINGLE_NODE_LOCK\r\n	unlock_node(bnode->host, bnode->node_id);\r\n#endif\r\n	kfree(bnode);\r\n}','Object level\n\nPre check BUG_ON\nLogging EMMCFS_DEBUG_INO\nNo post check','3','12','',''),
 (393751,'vunmap()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393752,'emmcfs_destroy_bnode()','D:','/usr/src/linux-2.6.37/fs/emmcfs/bnode.c',221,244,'void emmcfs_destroy_bnode(struct emmcfs_bnode *bnode)\r\n{\r\n	__u32 bnode_id = bnode->node_id;\r\n	struct emmcfs_btree *btree = bnode->host;\r\n	struct emmcfs_bnode_bitmap *bitmap = btree->bitmap;\r\n	BUG_ON(bnode_id == EMMCFS_INVALID_NODE_ID);\r\n\r\n	/* TODO: use remove_from_page_cache here, when we have optimised\r\n	 * algorithm for getting bnodes */\r\n	emmcfs_put_bnode(bnode);\r\n\r\n	/*spin_lock(&bitmap->spinlock);*/\r\n	BUG_ON(!test_and_clear_bit(bnode_id, bitmap->data));\r\n	/* TODO - the comment same as at emmcfs_alloc_new_bnode */\r\n	emmcfs_mark_bnode_dirty(btree->head_bnode);\r\n	emmcfs_mark_bnode_dirty(btree->head_bnode);\r\n	if (bitmap->first_free_id > bnode_id)\r\n		bitmap->first_free_id = bnode_id;\r\n	bitmap->free_num++;\r\n	/*spin_unlock(&bitmap->spinlock);*/\r\n\r\n	/* TODO - seems that it\'s non-necessary, but let it stay under TODO */\r\n	/*mutex_unlock(btree->node_locks + node_id);*/\r\n}','switching and parsing and memory and the physical devices lavel\n\nPre condition BUG_ON\nNo logging\nNo Post cecking\n\nMaybe better to split totally\r\n	 * on-disk and runtime structures and sync them only in sync-points\r\n	 * (sync callback, write_inode) ?','2','11','',''),
 (393753,'build_free_bnode_bitmap()','D:','/usr/src/linux-2.6.37/fs/emmcfs/bnode.c',246,274,'struct emmcfs_bnode_bitmap *build_free_bnode_bitmap(void *data,\r\n		__u32 start_bnode_id, __u32 size_in_bytes,\r\n		struct emmcfs_bnode *host_bnode)\r\n{\r\n	struct emmcfs_bnode_bitmap *bitmap;\r\n\r\n	BUG_ON(!host_bnode);\r\n\r\n	bitmap = kzalloc(sizeof(*bitmap), GFP_KERNEL);\r\n	if (!bitmap)\r\n		return ERR_PTR(-ENOMEM);\r\n\r\n	bitmap->data = data;\r\n	bitmap->size = size_in_bytes;\r\n	bitmap->bits_num = bitmap->size * 8;\r\n\r\n	bitmap->start_id = start_bnode_id;\r\n	bitmap->end_id = start_bnode_id + bitmap->bits_num;\r\n\r\n	bitmap->free_num = bitmap->bits_num - __bitmap_weight(bitmap->data,\r\n			bitmap->bits_num);\r\n	bitmap->first_free_id = find_first_zero_bit(bitmap->data,\r\n			bitmap->bits_num) + start_bnode_id;\r\n\r\n	bitmap->host = host_bnode;\r\n	spin_lock_init(&bitmap->spinlock);\r\n\r\n	return bitmap;\r\n}','switching level \nPre check BUG_ON\nPost check ERR_PTR\nNo logging','2','15','',''),
 (393754,'emmcfs_bnode_bitmap.size','S:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393755,'emmcfs_bnode_bitmap.start_id','S:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393756,'emmcfs_bnode_bitmap.end_id','S:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393757,'emmcfs_bnode_bitmap.host','S:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393758,'emmcfs_bnode_bitmap.spinlock','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393759,'emmcfs_destroy_free_bnode_bitmap()','D:','/usr/src/linux-2.6.37/fs/emmcfs/bnode.c',276,279,'void emmcfs_destroy_free_bnode_bitmap(struct emmcfs_bnode_bitmap *bitmap)\r\n{\r\n	kfree(bitmap);\r\n}','Object layer\n\ninterface kfree\n\nNo pre check\nNo logging\nNo post check\n','1','1','',''),
 (393760,'set_page_dirty_lock()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393761,'*__wait_queue.func()','D:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393762,'default_wake_function()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393763,'init_waitqueue_func_entry/func()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393764,'*timer_list.function()','D:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393765,'setup_timer_key/function()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393766,'setup_timer_on_stack_key/function()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393767,'__set_irq_handler_unlocked/handler()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393768,'read_mapping_page_async/filler()','D:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393769,'*address_space_operations.readpage()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393770,'read_mapping_page/filler()','D:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393771,'*emmcfs_fsm_btree.cmp_key()','D:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393772,'fsm_btree_cmp_fn()','F:','/usr/src/linux-2.6.37/fs/emmcfs/fsm_btree.c',142,162,'/**\r\n* @bref		Function used to compare keys for the fsm btree nodes\r\n* @param	key1 first  fsm btree key\r\n* @param	key2 second fsm btree key\r\n* @return	-1 if key1 < key2, 1 if key1 > key2, 0 if key1 == key2\r\n*/\r\nint fsm_btree_cmp_fn(__u32 *key1, __u32 *key2)\r\n{\r\n	if (key1[0] < key2[0])\r\n		return -1;\r\n	if (key1[0] > key2[0])\r\n		return 1;\r\n	if (key1[1] < key2[1])\r\n		return -1;\r\n	if (key1[1] > key2[1])\r\n		return 1;\r\n\r\n	if (key1[2] < key2[2])\r\n		return -1;\r\n	if (key1[2] > key2[2])\r\n		return 1;\r\n	if (key1[3] < key2[3])\r\n		return -1;\r\n	if (key1[3] > key2[3])\r\n		return 1;\r\n	return 0;\r\n}','FSM layer\n\nNo pre check\nNo logging\nNo post check\n\n','9','17','',''),
 (393773,'*emmcfs_fsm_btree.cpy_key()','D:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393774,'fsm_btree_cpy_fn()','F:','/usr/src/linux-2.6.37/fs/emmcfs/fsm_btree.c',132,135,'void fsm_btree_cpy_fn(void *dst, void *src)\r\n{\r\n	*((struct fsm_btree_key *)dst) = *((struct fsm_btree_key *)src);\r\n}','Switching layer\n\nNo pre check\nNo logging\nNo post check\n','1','1','',''),
 (393775,'*emmcfs_fsm_btree.print_key()','D:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393776,'fsm_btree_print_fn()','F:','/usr/src/linux-2.6.37/fs/emmcfs/fsm_btree.c',125,130,'void fsm_btree_print_fn(void *key, void *bitmap, __u32 bitmap_size)\r\n{\r\n	EMMCFS_DEBUG_FSM(\"PRINT off %llu\\tlen %llu \",\r\n			 ((struct fsm_btree_key *)key)->block_offset,\r\n			 ((struct fsm_btree_key *)key)->length);\r\n}','Object layer\n\nNo pre check\nLogging EMMCFS_DEBUG_FSM\nNo post check\n','1','1','',''),
 (393777,'func/init_waitqueue_func_entry()','D:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393778,'*func()__farg1()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393779,'function/setup_timer_key()','D:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393780,'*function()__farg3()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393781,'function/setup_timer_on_stack_key()','D:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393782,'*list_splice_init_rcu()__farg2()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393783,'handler/__set_irq_handler_unlocked()','D:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393784,'*handler()__farg1()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393785,'emmcfs_btree_inc_height()','D:','/usr/src/linux-2.6.37/fs/emmcfs/btree.c',14,22,'static void emmcfs_btree_inc_height(struct emmcfs_btree *btree)\r\n{\r\n	u16 btree_height = le16_to_cpu(EMMCFS_BTREE_HEAD(btree)->btree_height);\r\n	btree_height++;\r\n	EMMCFS_ADD_CHUNK(btree->inode, btree->head_bnode->pages,\r\n			btree->pages_per_node);\r\n	EMMCFS_BTREE_HEAD(btree)->btree_height = cpu_to_le16(btree_height);\r\n	emmcfs_mark_bnode_dirty(btree->head_bnode);\r\n}','switching level\ncall memory and the physical devices layer','1','5','',''),
 (393786,'emmcfs_raw_btree_head.btree_height','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393787,'emmcfs_btree_dec_height()','D:','/usr/src/linux-2.6.37/fs/emmcfs/btree.c',24,33,'static void emmcfs_btree_dec_height(struct emmcfs_btree *btree)\r\n{\r\n	u16 btree_height = le16_to_cpu(EMMCFS_BTREE_HEAD(btree)->btree_height);\r\n	btree_height--;\r\n	BUG_ON(btree_height == 0);\r\n	EMMCFS_ADD_CHUNK(btree->inode, btree->head_bnode->pages,\r\n			btree->pages_per_node);\r\n	EMMCFS_BTREE_HEAD(btree)->btree_height = cpu_to_le16(btree_height);\r\n	emmcfs_mark_bnode_dirty(btree->head_bnode);\r\n}','switching level\ncall memory and the physical devices layer\n\nPre condition\nNo logging\nNo post cecking','1','6','',''),
 (393788,'emmcfs_btree_get_height()','D:','/usr/src/linux-2.6.37/fs/emmcfs/btree.c',35,38,'static u16 emmcfs_btree_get_height(struct emmcfs_btree *btree)\r\n{\r\n	return le16_to_cpu(EMMCFS_BTREE_HEAD(btree)->btree_height);\r\n}','interface  btree->btree_height','1','1','',''),
 (393789,'emmcfs_btree_get_root_id()','D:','/usr/src/linux-2.6.37/fs/emmcfs/btree.c',40,43,'static void emmcfs_btree_set_root_id(struct emmcfs_btree *btree,\r\n		u32 new_root_bnode_id)\r\n{\r\n	EMMCFS_ADD_CHUNK(btree->inode, btree->head_bnode->pages,\r\n			btree->pages_per_node);\r\n	EMMCFS_BTREE_HEAD(btree)->root_bnode_id = cpu_to_le32(\r\n			new_root_bnode_id);\r\n	emmcfs_mark_bnode_dirty(btree->head_bnode);\r\n}','switching lavel\n\nCall memory and parser layer','1','1','',''),
 (393790,'emmcfs_raw_btree_head.root_bnode_id','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393791,'emmcfs_btree_set_root_id()','D:','/usr/src/linux-2.6.37/fs/emmcfs/btree.c',45,53,'static void emmcfs_btree_set_root_id(struct emmcfs_btree *btree,\r\n		u32 new_root_bnode_id)\r\n{\r\n	EMMCFS_ADD_CHUNK(btree->inode, btree->head_bnode->pages,\r\n			btree->pages_per_node);\r\n	EMMCFS_BTREE_HEAD(btree)->root_bnode_id = cpu_to_le32(\r\n			new_root_bnode_id);\r\n	emmcfs_mark_bnode_dirty(btree->head_bnode);\r\n}','Switching layer\n\nNo pre check\nNo logging\nNo post check\n','1','3','',''),
 (393792,'get_offset_addr()','D:','/usr/src/linux-2.6.37/fs/emmcfs/btree.c',62,67,'void *get_offset_addr(struct emmcfs_bnode *bnode, int index)\r\n{\r\n	return bnode->data + bnode->host->node_size_bytes -\r\n		EMMCFS_BNODE_FIRST_OFFSET -\r\n		sizeof(emmcfs_bt_off_t) * (index + 1);\r\n}','Switching layer\n\nNo pre check\nNo logging\nNo post check\n','1','1','',''),
 (393793,'set_offset()','D:','/usr/src/linux-2.6.37/fs/emmcfs/btree.c',69,73,'void set_offset(struct emmcfs_bnode *bnode, int index,\r\n		emmcfs_bt_off_t new_val)\r\n{\r\n	*(emmcfs_bt_off_t *)get_offset_addr(bnode, index) = new_val;\r\n}','Switching layer\n\ninterface of bnode\n\nNo pre check\nNo logging\nNo post check\n','1','1','',''),
 (393794,'get_offset()','D:','/usr/src/linux-2.6.37/fs/emmcfs/btree.c',74,77,'void *get_offset_addr(struct emmcfs_bnode *bnode, int index)\r\n{\r\n	return bnode->data + bnode->host->node_size_bytes -\r\n		EMMCFS_BNODE_FIRST_OFFSET -\r\n		sizeof(emmcfs_bt_off_t) * (index + 1);\r\n}','Object layer\n\nNo pre check\nNo logging\nNo post check\n','1','1','',''),
 (393795,'get_record()','D:','/usr/src/linux-2.6.37/fs/emmcfs/btree.c',79,83,'void *get_record(struct emmcfs_bnode *bnode, int index)\r\n{\r\n	BUG_ON(index > EMMCFS_BNODE_DSCR(bnode)->recs_count);\r\n	return (void *)bnode->data + get_offset(bnode, index);\r\n}','Object level\n\nPre check BUG_ON\nNo logging\nNo post check','1','2','',''),
 (393796,'emmcfs_gen_node_descr.recs_count','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393797,'emmcfs_get_btree_record()','D:','/usr/src/linux-2.6.37/fs/emmcfs/btree.c',85,88,'void *emmcfs_get_btree_record(struct emmcfs_bnode *bnode, int index)\r\n{\r\n	return get_record(bnode, index);\r\n}','wraper get_record','1','1','',''),
 (393798,'emmcfs_get_next_bnode()','D:','/usr/src/linux-2.6.37/fs/emmcfs/btree.c',90,97,'struct emmcfs_bnode *emmcfs_get_next_bnode(struct emmcfs_bnode *bnode)\r\n{\r\n	if (EMMCFS_BNODE_DSCR(bnode)->next_node_id == 0)\r\n		return ERR_PTR(-ENOENT);\r\n	return emmcfs_get_bnode(bnode->host,\r\n			le32_to_cpu(EMMCFS_BNODE_DSCR(bnode)->next_node_id),\r\n			bnode->mode);\r\n}','Object level \n\nNo pre check\nNo logging\nPost check ERR_PTR','2','3','',''),
 (393799,'emmcfs_gen_node_descr.next_node_id','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393800,'emmcfs_get_next_btree_record()','D:','/usr/src/linux-2.6.37/fs/emmcfs/btree.c',100,120,'void *emmcfs_get_next_btree_record(struct emmcfs_bnode **__bnode, int *index)\r\n{\r\n	struct emmcfs_bnode *bnode = *__bnode;\r\n	struct emmcfs_bnode *next_bnode;\r\n\r\n	BUG_ON(!bnode);\r\n\r\n	if (*index+1 < EMMCFS_BNODE_DSCR(bnode)->recs_count) {\r\n		(*index)++;\r\n		return get_record(bnode, *index);\r\n	}\r\n\r\n	next_bnode = emmcfs_get_next_bnode(bnode);\r\n	if (IS_ERR(next_bnode))\r\n		return (void *) next_bnode;\r\n	emmcfs_put_bnode(bnode);\r\n	*__bnode = bnode = next_bnode;\r\n	*index = 0;\r\n\r\n	return get_record(bnode, *index);\r\n}','FSM level\n\nPre check BUG_ON\nNo logging\nPost check IS_ERR','3','13','',''),
 (393801,'get_child_bnode()','D:','/usr/src/linux-2.6.37/fs/emmcfs/btree.c',122,130,'struct emmcfs_bnode *get_child_bnode(struct emmcfs_btree *btree, void *record,\r\n		enum emmcfs_get_bnode_mode mode)\r\n{\r\n	struct emmcfs_generic_key *key = (struct emmcfs_generic_key *)record;\r\n	struct generic_index_value *value = (void *)key + key->key_len;\r\n\r\n	BUG_ON(value->node_id == 0);\r\n	return emmcfs_get_bnode(btree, value->node_id, mode);\r\n}','switching level\nPost check BUG_ON\n\nNo logging','1','4','',''),
 (393802,'generic_index_value.node_id','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393803,'is_node_full()','D:','/usr/src/linux-2.6.37/fs/emmcfs/btree.c',132,137,'int is_node_full(struct emmcfs_gen_node_descr *node_descr, void *adding_record)\r\n{\r\n	struct emmcfs_generic_key *gen_key = adding_record;\r\n	return node_descr->free_space <\r\n		gen_key->record_len + sizeof(emmcfs_bt_off_t);\r\n}','Switching layer\n\nNo pre check\nNo logging\nNo post check\n','1','2','',''),
 (393804,'emmcfs_gen_node_descr.free_space','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393805,'emmcfs_generic_key.record_len','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393806,'init_new_node_descr()','D:','/usr/src/linux-2.6.37/fs/emmcfs/btree.c',139,166,'void init_new_node_descr(struct emmcfs_bnode *bnode,\r\n		enum emmcfs_node_type type)\r\n{\r\n	struct emmcfs_gen_node_descr *node_descr = EMMCFS_BNODE_DSCR(bnode);\r\n\r\n	node_descr->free_space = cpu_to_le32(bnode->host->node_size_bytes -\r\n		sizeof(struct emmcfs_gen_node_descr) -\r\n		sizeof(emmcfs_bt_off_t) - EMMCFS_BNODE_FIRST_OFFSET);\r\n	node_descr->recs_count = 0;\r\n	node_descr->type = type;\r\n	node_descr->node_id = cpu_to_le32(bnode->node_id);\r\n\r\n	node_descr->next_node_id = EMMCFS_INVALID_NODE_ID;\r\n	node_descr->prev_node_id = EMMCFS_INVALID_NODE_ID;\r\n\r\n	/* TODO think what to do with magics */\r\n	if (type & EMMCFS_NODE_INDEX)\r\n		memcpy(node_descr->magic, &EMMCFS_BTREE_INDEX_NODE_MAGIC,\r\n				sizeof(node_descr->magic));\r\n	else if (type & EMMCFS_NODE_LEAF)\r\n		memcpy(node_descr->magic, &EMMCFS_BTREE_LEAF_NODE_MAGIC,\r\n				sizeof(node_descr->magic));\r\n	else\r\n		BUG();\r\n\r\n\r\n	set_offset(bnode, 0, sizeof(struct emmcfs_gen_node_descr));\r\n}','Object layer\nFSM layer\nSwitching layer\n\nNo pre check\nNo logging\nPost check BUG\n','3','13','',''),
 (393807,'emmcfs_gen_node_descr.type','S:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393808,'emmcfs_gen_node_descr.node_id','S:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393809,'emmcfs_gen_node_descr.prev_node_id','S:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393810,'emmcfs_gen_node_descr.magic','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393811,'insert_into_node()','D:','/usr/src/linux-2.6.37/fs/emmcfs/btree.c',168,207,'void insert_into_node(struct emmcfs_bnode *bnode,\r\n		void *new_record,\r\n		int insert_pos)\r\n{\r\n	struct emmcfs_gen_node_descr *node_descr_ptr = bnode->data;\r\n	struct emmcfs_generic_key *new_key =\r\n		(struct emmcfs_generic_key *) new_record;\r\n	void *free_space = NULL;\r\n	emmcfs_bt_off_t *offset;\r\n\r\n	int moving_offsets_num;\r\n	emmcfs_bt_off_t *dest_offset_ptr;\r\n\r\n\r\n	BUG_ON(node_descr_ptr->free_space < new_key->record_len);\r\n\r\n	offset = get_offset_addr(bnode, node_descr_ptr->recs_count);\r\n	free_space = (void *) node_descr_ptr + *offset;\r\n\r\n	memcpy(free_space, new_record, new_key->record_len);\r\n\r\n	/* Prepere space for new offset */\r\n	moving_offsets_num = node_descr_ptr->recs_count - insert_pos;\r\n	dest_offset_ptr = get_offset_addr(bnode, insert_pos);\r\n	if (moving_offsets_num > 0)\r\n		memmove(offset, (void *) (offset + 1),\r\n				moving_offsets_num * sizeof(emmcfs_bt_off_t));\r\n	/* Put new offset */\r\n	*dest_offset_ptr = free_space - (void *) node_descr_ptr;\r\n\r\n	/* Check if node have room for another one offset (to free space) */\r\n	BUG_ON(node_descr_ptr->free_space < sizeof(emmcfs_bt_off_t));\r\n\r\n	node_descr_ptr->recs_count++;\r\n	node_descr_ptr->free_space -= new_key->record_len +\r\n			sizeof(emmcfs_bt_off_t);\r\n\r\n	offset = get_offset_addr(bnode, node_descr_ptr->recs_count);\r\n	*offset = free_space + new_key->record_len - (void *) node_descr_ptr;\r\n}\r\n','Memory layer\n\nPre check BUG_ON\nNo logging\nPost check BUG_ON\n\n!\n','2','20','',''),
 (393812,'memmove()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393813,'set_next_prev_links()','D:','/usr/src/linux-2.6.37/fs/emmcfs/btree.c',209,244,'void set_next_prev_links(struct emmcfs_bnode *source,\r\n		struct emmcfs_bnode *new1,\r\n		struct emmcfs_bnode *new2)\r\n{\r\n	struct emmcfs_gen_node_descr *src_descr = EMMCFS_BNODE_DSCR(source);\r\n	struct emmcfs_gen_node_descr *new1_descr = EMMCFS_BNODE_DSCR(new1);\r\n	struct emmcfs_gen_node_descr *new2_descr = EMMCFS_BNODE_DSCR(new2);\r\n\r\n	new1_descr->next_node_id = new2_descr->node_id;\r\n	new2_descr->prev_node_id = new1_descr->node_id;\r\n	new2_descr->next_node_id = src_descr->next_node_id;\r\n	new1_descr->prev_node_id = src_descr->prev_node_id;\r\n\r\n\r\n	if (src_descr->prev_node_id != EMMCFS_INVALID_NODE_ID) {\r\n		struct emmcfs_bnode *prev_node =\r\n				emmcfs_get_bnode(source->host,\r\n						src_descr->prev_node_id,\r\n						EMMCFS_BNODE_MODE_RW);\r\n		EMMCFS_BNODE_DSCR(prev_node)->next_node_id =\r\n							new1_descr->node_id;\r\n		emmcfs_mark_bnode_dirty(prev_node);\r\n		emmcfs_put_bnode(prev_node);\r\n	}\r\n\r\n	if (src_descr->next_node_id != EMMCFS_INVALID_NODE_ID) {\r\n		struct emmcfs_bnode *next_node =\r\n				emmcfs_get_bnode(source->host,\r\n						src_descr->next_node_id,\r\n						EMMCFS_BNODE_MODE_RW);\r\n		EMMCFS_BNODE_DSCR(next_node)->prev_node_id =\r\n							new2_descr->node_id;\r\n		emmcfs_mark_bnode_dirty(next_node);\r\n		emmcfs_put_bnode(next_node);\r\n	}\r\n}','switching and parsing level\ncall memory and the physical level\n\nNeed make call of the bus\npre condition EMMCFS_BNODE_DSCR\nbut not post condition and logging','3','17','',''),
 (393814,'split_node()','D:','/usr/src/linux-2.6.37/fs/emmcfs/btree.c',246,292,'void split_node(struct emmcfs_bnode *bnode,\r\n		int adding_index,\r\n		void *adding_record,\r\n		struct emmcfs_bnode *part1,\r\n		struct emmcfs_bnode *part2)\r\n{\r\n	struct emmcfs_gen_node_descr *node_descr = EMMCFS_BNODE_DSCR(bnode);\r\n	int used_space, i;\r\n	int part_to_insert = 0;\r\n	int inserted = 0;\r\n\r\n	init_new_node_descr(part1, node_descr->type);\r\n	init_new_node_descr(part2, node_descr->type);\r\n\r\n	set_next_prev_links(bnode, part1, part2);\r\n	used_space = bnode->host->node_size_bytes -\r\n			EMMCFS_BNODE_DSCR(part1)->free_space;\r\n	BUG_ON(node_descr->recs_count == 0);\r\n\r\n	i = 0;\r\n	while (i < node_descr->recs_count || !inserted) {\r\n		struct emmcfs_bnode *ins_bnode;\r\n		int new_rec_select = (i == adding_index && !inserted);\r\n\r\n		struct emmcfs_generic_key *key = (struct emmcfs_generic_key *) (\r\n				(new_rec_select) ?\r\n				adding_record : get_record(bnode, i));\r\n\r\n		used_space += key->record_len + sizeof(emmcfs_bt_off_t);\r\n\r\n\r\n		/* TODO: we need any rounding here - select the neares to\r\n		 * the node middle split bound */\r\n		ins_bnode = ((part_to_insert) ? part2 : part1);\r\n\r\n		insert_into_node(ins_bnode, key,\r\n				EMMCFS_BNODE_DSCR(ins_bnode)->recs_count);\r\n\r\n		if (used_space > bnode->host->node_size_bytes / 2)\r\n			part_to_insert = 1;\r\n\r\n		if (!new_rec_select)\r\n			++i;\r\n		else\r\n			inserted = 1;\r\n	}\r\n}','Switching layer\nFSM layer\n\nPre check BUG_ON\nNo logging\nNo post check\n','8','24','',''),
 (393815,'update_root_descriptor()','D:','/usr/src/linux-2.6.37/fs/emmcfs/btree.c',294,321,'void update_root_descriptor(\r\n		struct emmcfs_btree *btree,\r\n		struct emmcfs_generic_key *first_record,\r\n		struct emmcfs_generic_key *second_record,\r\n		u32 changing_node_id)\r\n{\r\n	struct emmcfs_bnode *new_root_node =\r\n			emmcfs_alloc_new_bnode(btree);\r\n	struct emmcfs_generic_key *key;\r\n	struct generic_index_value *value;\r\n\r\n	init_new_node_descr(new_root_node, EMMCFS_NODE_INDEX |\r\n			EMMCFS_NODE_TOUCHED);\r\n	insert_into_node(new_root_node, first_record, 0);\r\n	insert_into_node(new_root_node, second_record, 1);\r\n\r\n	key = (struct emmcfs_generic_key *) get_record(new_root_node, 0);\r\n	value = (void *)key + key->key_len;\r\n	value->node_id = changing_node_id;\r\n\r\n	/* Update btree head */\r\n	emmcfs_btree_inc_height(btree);\r\n	emmcfs_btree_set_root_id(btree, new_root_node->node_id);\r\n\r\n	emmcfs_mark_bnode_dirty(new_root_node);\r\n	emmcfs_mark_bnode_dirty(btree->head_bnode);\r\n	emmcfs_put_bnode(new_root_node);\r\n}','Memory  layer \nNo pre check\nNo logging\nNo post ','1','14','',''),
 (393816,'form_new_adding_record()','D:','/usr/src/linux-2.6.37/fs/emmcfs/btree.c',323,341,'void form_new_adding_record(struct emmcfs_bnode *new_node, void **adding_record)\r\n{\r\n	struct emmcfs_generic_key *new_key = get_record(new_node, 0);\r\n	struct emmcfs_generic_key *forming_key;\r\n	struct generic_index_value *value;\r\n\r\n	kfree(*adding_record);\r\n	*adding_record = kmalloc(\r\n			sizeof(struct generic_index_value) + new_key->key_len,\r\n			GFP_KERNEL);\r\n	forming_key = (struct emmcfs_generic_key *)*adding_record;\r\n	value = (struct generic_index_value *)(*adding_record +\r\n							new_key->key_len);\r\n\r\n	memcpy(*adding_record, new_key, new_key->key_len);\r\n	forming_key->record_len = new_key->key_len +\r\n			sizeof(struct generic_index_value);\r\n	value->node_id = new_node->node_id;\r\n}','Object level\nSwitching layer\n\nNo Pre and Post check, no logging','1','10','',''),
 (393817,'delete_from_node()','D:','/usr/src/linux-2.6.37/fs/emmcfs/btree.c',343,381,'void delete_from_node(struct emmcfs_bnode *bnode,\r\n		int del_index)\r\n{\r\n	struct emmcfs_gen_node_descr *node = EMMCFS_BNODE_DSCR(bnode);\r\n	struct emmcfs_generic_key *del_key =\r\n		(struct emmcfs_generic_key *) get_record(bnode, del_index);\r\n	int i;\r\n\r\n	emmcfs_bt_off_t rec_len = del_key->record_len;\r\n	emmcfs_bt_off_t free_space_offset = get_offset(bnode, node->recs_count);\r\n	emmcfs_bt_off_t del_offset = get_offset(bnode, del_index);\r\n\r\n\r\n	memmove((void *)del_key, (void *)del_key + rec_len,\r\n			free_space_offset - del_offset - rec_len);\r\n\r\n	/* TODO - while deleting we should do two separate things -\r\n	 * decrease the offsets that are bigger than deleting offset and\r\n	 * shift all record offsets more than deleting in offset table\r\n	 * up.\r\n	 * I\'ve separated them in two cycles because previous version\r\n	 * worked not so good. Think how they can be united in one cycle\r\n	 * without loosing functionality and readability.\r\n	 */\r\n	for (i = 0; i < node->recs_count; i++) {\r\n		emmcfs_bt_off_t cur_offs = get_offset(bnode, i);\r\n		if (cur_offs > del_offset)\r\n			set_offset(bnode, i, cur_offs - rec_len);\r\n	}\r\n\r\n	for (i = del_index; i < node->recs_count; i++)\r\n		set_offset(bnode, i, get_offset(bnode, i + 1));\r\n\r\n	node->recs_count--;\r\n	node->free_space += rec_len + sizeof(emmcfs_bt_off_t);\r\n	set_offset(bnode, node->recs_count, free_space_offset - rec_len);\r\n\r\n	emmcfs_mark_bnode_dirty(bnode);\r\n}','memory layer\n\nNo pre, post check\nNo logging\n','4','21','',''),
 (393818,'btree_find()','D:','/usr/src/linux-2.6.37/fs/emmcfs/btree.c',383,455,'struct emmcfs_bnode *btree_find(struct emmcfs_btree *tree,\r\n				struct emmcfs_generic_key *key,\r\n				int level, int *pos,\r\n				struct path_container *path,\r\n				enum emmcfs_get_bnode_mode mode)\r\n{\r\n	struct emmcfs_bnode *bnode, *bnode_new;\r\n	int i, height;\r\n	void *record, *prev_record;\r\n	u16 btree_height = emmcfs_btree_get_height(tree);\r\n	int levels_num = btree_height - level;\r\n	int err = 0;\r\n\r\n	BUG_ON(!tree->comp_fn);\r\n	bnode = emmcfs_get_bnode(tree, emmcfs_btree_get_root_id(tree), mode);\r\n\r\n	if (path)\r\n		memset(path, 0, sizeof(*path) * levels_num);\r\n\r\n	for (height = btree_height; height >= level; height--) {\r\n		record = prev_record = NULL;\r\n		*pos = 0;\r\n		for (i = 0; i < EMMCFS_BNODE_DSCR(bnode)->recs_count; ++i) {\r\n			int cmp_res;\r\n\r\n			record = get_record(bnode, i);\r\n			cmp_res = tree->comp_fn(record, key);\r\n			if (cmp_res == 0) {\r\n				/* Exactly what we are searching */\r\n				*pos = i;\r\n				break;\r\n			}\r\n\r\n			if (cmp_res > 0) {\r\n				/* Exact key was not found, current key is\r\n				 * greate then searching, so we interested in\r\n				 * previous record */\r\n				record = prev_record;\r\n				break;\r\n			}\r\n			prev_record = record;\r\n			*pos = i;\r\n		}\r\n\r\n		if (path) {\r\n			path[btree_height - height].bnode = bnode;\r\n			path[btree_height - height].index = *pos;\r\n		}\r\n\r\n		if (level < height) {\r\n			bnode_new = get_child_bnode(tree, record, mode);\r\n			if (IS_ERR(bnode_new)) {\r\n				err = PTR_ERR(bnode_new);\r\n				goto err_exit;\r\n			}\r\n\r\n			/* Put bnode only if we not intereseted in path to the\r\n			 * searching key*/\r\n			if (!path)\r\n				emmcfs_put_bnode(bnode);\r\n			bnode = bnode_new;\r\n		}\r\n	}\r\n	return bnode;\r\n\r\nerr_exit:\r\n	if (path) {\r\n		for (i = 0; i < levels_num; i++)\r\n			if (path[i].bnode)\r\n				emmcfs_put_bnode(path[i].bnode);\r\n	}\r\n	return ERR_PTR(err);\r\n}\r\n','Object level\nNeed bus\n\nPre check BUG_ON\nNo logging\nPost check IS_ERR, PTR_ERR','13','48','',''),
 (393819,'emmcfs_btree.comp_fn','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393820,'*emmcfs_btree.comp_fn()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393821,'path_container.bnode','S:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393822,'path_container.index','S:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393823,'emmcfs_btree_find()','D:','/usr/src/linux-2.6.37/fs/emmcfs/btree.c',457,462,'struct emmcfs_bnode  *emmcfs_btree_find(struct emmcfs_btree *tree,\r\n				struct emmcfs_generic_key *key,\r\n				int *pos, enum emmcfs_get_bnode_mode mode)\r\n{\r\n	return btree_find(tree, key, EMMCFS_BTREE_LEAF_LVL, pos, NULL, mode);\r\n}','wraper btree_find','1','1','',''),
 (393824,'btree_insert_at_level()','D:','/usr/src/linux-2.6.37/fs/emmcfs/btree.c',464,586,'int btree_insert_at_level(struct emmcfs_btree *btree,\r\n		void *new_data, int level)\r\n{\r\n	void *adding_record, *record;\r\n	enum emmcfs_node_type dest_node_type = EMMCFS_NODE_LEAF;\r\n	int stop_inserting = 0;\r\n	/* TODO - think if it\'s necessary and remove */\r\n	u32 changing_node_id = -1;\r\n	int err = 0;\r\n	int i, height_indx = emmcfs_btree_get_height(btree) - level;\r\n	struct path_container *path = kmalloc(\r\n		sizeof(struct path_container) * emmcfs_btree_get_height(btree),\r\n		GFP_KERNEL);\r\n\r\n	struct emmcfs_bnode *curr_bnode;\r\n\r\n	if (!path)\r\n		return -ENOMEM;\r\n\r\n	/* Find where to put new record */\r\n	curr_bnode = btree_find(btree, new_data, level, &i, path,\r\n			EMMCFS_BNODE_MODE_RW);\r\n	if (IS_ERR(curr_bnode)) {\r\n		err = PTR_ERR(curr_bnode);\r\n		goto exit;\r\n	}\r\n	/* Check if adding record allready exists */\r\n	record = get_record(curr_bnode, i);\r\n	if (btree->comp_fn(record, new_data) == 0) {\r\n		err = -EEXIST;\r\n		goto exit;\r\n	}\r\n\r\n	/* To have common mechanism of deleting unnecessary adding records */\r\n	adding_record = kmalloc(\r\n			((struct emmcfs_generic_key *)new_data)->record_len,\r\n			GFP_KERNEL);\r\n	memcpy(adding_record, new_data,\r\n			((struct emmcfs_generic_key *)new_data)->record_len);\r\n\r\n	while (!stop_inserting) {\r\n		struct emmcfs_gen_node_descr *node_descr;\r\n		int index;\r\n\r\n		curr_bnode = path[height_indx].bnode;\r\n		node_descr = curr_bnode->data;\r\n		index = path[height_indx].index;\r\n\r\n		if (changing_node_id != -1) {\r\n			/* TODO - leaf node doesn\'t need to update self\r\n			 * value, this is\r\n			 */\r\n			struct emmcfs_generic_key *key =\r\n				(struct emmcfs_generic_key *)\r\n				get_record(curr_bnode, index);\r\n\r\n			struct generic_index_value *value =\r\n				(void *)key + key->key_len;\r\n\r\n			value->node_id = changing_node_id;\r\n		}\r\n\r\n		if (is_node_full(node_descr, adding_record)) {\r\n			struct emmcfs_bnode *bnode1, *bnode2;\r\n\r\n			bnode1 = emmcfs_alloc_new_bnode(btree);\r\n			if (IS_ERR(bnode1)) {\r\n				err = -ENOSPC;\r\n				goto exit;\r\n			}\r\n			bnode2 = emmcfs_alloc_new_bnode(btree);\r\n			if (IS_ERR(bnode2)) {\r\n				err = -ENOSPC;\r\n				emmcfs_destroy_bnode(bnode1);\r\n				goto exit;\r\n			}\r\n\r\n			split_node(curr_bnode,\r\n					index + 1,\r\n					adding_record,\r\n					bnode1,\r\n					bnode2);\r\n\r\n			changing_node_id = bnode1->node_id;\r\n\r\n			form_new_adding_record(bnode2, &adding_record);\r\n			if (curr_bnode->node_id ==\r\n					emmcfs_btree_get_root_id(btree)) {\r\n				void *first_part = NULL;\r\n				form_new_adding_record(curr_bnode, &first_part);\r\n				update_root_descriptor(btree, first_part,\r\n					adding_record, changing_node_id);\r\n\r\n				kfree(first_part);\r\n				stop_inserting = 1;\r\n			}\r\n\r\n			emmcfs_mark_bnode_dirty(bnode1);\r\n			emmcfs_mark_bnode_dirty(bnode2);\r\n			emmcfs_put_bnode(bnode1);\r\n			emmcfs_put_bnode(bnode2);\r\n			emmcfs_destroy_bnode(curr_bnode);\r\n		} else {\r\n			insert_into_node(curr_bnode, adding_record, index + 1);\r\n			stop_inserting = 1;\r\n			kfree(adding_record);\r\n			emmcfs_mark_bnode_dirty(curr_bnode);\r\n			emmcfs_put_bnode(curr_bnode);\r\n		}\r\n		dest_node_type = EMMCFS_NODE_INDEX;\r\n\r\n		--height_indx;\r\n	}\r\n\r\n\r\nexit:\r\n	for (i = height_indx; i >= 0; --i)\r\n		emmcfs_put_bnode(path[i].bnode);\r\n\r\n	kfree(path);\r\n\r\n	return err;\r\n}','Object layer\nFSM layer\nSwitching layer\n\nNo pre check\nNo logging\nPost check -ENOMEM, PTR_ERR, -EEXIST, IS_ERR, -ENOSPC\n','11','68','RESOURCE_LEAK','noescape : \"Variable \"\"adding_record\"\" not freed or pointed-to in function \"\"update_root_descriptor\"\"\"\r\nnoescape : \"Variable \"\"adding_record\"\" not freed or pointed-to in function \"\"memcpy\"\"\"\r\n'),
 (393825,'emmcfs_btree_insert()','D:','/usr/src/linux-2.6.37/fs/emmcfs/btree.c',588,591,'int emmcfs_btree_insert(struct emmcfs_btree *btree, void *new_data)\r\n{\r\n	return btree_insert_at_level(btree, new_data, EMMCFS_BTREE_LEAF_LVL);\r\n}\r\n','Switching layer\n\ninterface of btree\n\nNo pre check\nNo logging\nNo post check\n','1','1','',''),
 (393826,'btree_update_key()','D:','/usr/src/linux-2.6.37/fs/emmcfs/btree.c',593,636,'struct emmcfs_generic_key *btree_update_key(struct emmcfs_btree *tree,\r\n		struct emmcfs_generic_key *key,\r\n		struct emmcfs_bnode *point_to, int level)\r\n{\r\n	struct emmcfs_bnode *bnode;\r\n	void *new_data = NULL;\r\n	struct emmcfs_generic_key *ret;\r\n	int err = 0;\r\n	int pos;\r\n\r\n	bnode = btree_find(tree, key, level, &pos, NULL, EMMCFS_BNODE_MODE_RW);\r\n	if (!bnode)\r\n		return ERR_PTR(-EINVAL);\r\n\r\n	form_new_adding_record(point_to, &new_data);\r\n\r\n	if (!new_data)\r\n		return ERR_PTR(-EINVAL);\r\n\r\n	emmcfs_put_bnode(bnode);\r\n	err = btree_insert_at_level(tree, new_data, level);\r\n	if (err)\r\n		return ERR_PTR(err);\r\n\r\n	bnode = btree_find(tree, key, level, &pos, NULL, EMMCFS_BNODE_MODE_RW);\r\n	if (!bnode)\r\n		return ERR_PTR(-EINVAL);\r\n	delete_from_node(bnode, pos);\r\n\r\n	if (pos == 0 && level < emmcfs_btree_get_height(tree)) {\r\n		ret = btree_update_key(tree, key, bnode, level + 1);\r\n		if (IS_ERR(ret))\r\n			err = PTR_ERR(ret);\r\n		else\r\n			kfree(ret);\r\n	}\r\n\r\n	emmcfs_put_bnode(bnode);\r\n\r\n	if (err)\r\n		return ERR_PTR(err);\r\n\r\n	return new_data;\r\n}\r\n','Switching layer\n\nNo pre check\nNo logging\nPost check ERR_PTR, -EINVAL, ERR_PTR, PTR_ERR\n\nCall Obgect - form_new_adding_record','9','28','RESOURCE_LEAK','leaked_storage : \"Variable \"\"bnode\"\" goes out of scope\"\r\n'),
 (393827,'btree_merge()','D:','/usr/src/linux-2.6.37/fs/emmcfs/btree.c',639,705,'void btree_merge(struct emmcfs_btree *tree, int parent_bnode_id,\r\n		int left_bnode_id, int right_bnode_id, int level)\r\n{\r\n	struct emmcfs_bnode\r\n		*left_bnode   = emmcfs_get_bnode(tree, left_bnode_id,\r\n				EMMCFS_BNODE_MODE_RW),\r\n		*right_bnode  = emmcfs_get_bnode(tree, right_bnode_id,\r\n				EMMCFS_BNODE_MODE_RW);\r\n	struct emmcfs_gen_node_descr\r\n		*left   = (struct emmcfs_gen_node_descr *)left_bnode->data,\r\n		*right  = (struct emmcfs_gen_node_descr *)right_bnode->data;\r\n	void *data_start = (void *)right + sizeof(struct emmcfs_gen_node_descr);\r\n	int i;\r\n	emmcfs_bt_off_t start_offset;\r\n\r\n	emmcfs_bt_off_t *l_free_space_addr = get_offset_addr(left_bnode,\r\n							left->recs_count);\r\n\r\n	void *left_free_space = (void *)left + *l_free_space_addr;\r\n\r\n	memmove(left_free_space, data_start,\r\n				get_offset(right_bnode, right->recs_count) -\r\n				sizeof(struct emmcfs_gen_node_descr));\r\n\r\n	start_offset = get_offset(left_bnode, left->recs_count);\r\n	for (i = 0; i <= right->recs_count; i++)\r\n		set_offset(left_bnode, i + left->recs_count,\r\n			   start_offset + get_offset(right_bnode, i) -\r\n			   sizeof(struct emmcfs_gen_node_descr));\r\n\r\n	left->free_space -= (get_offset(right_bnode, right->recs_count) -\r\n					sizeof(struct emmcfs_gen_node_descr)) +\r\n					right->recs_count *\r\n					sizeof(emmcfs_bt_off_t);\r\n\r\n	left->recs_count = left->recs_count + right->recs_count;\r\n	left->next_node_id = right->next_node_id;\r\n\r\n	if (right->next_node_id != EMMCFS_INVALID_NODE_ID) {\r\n		struct emmcfs_bnode *next_bnode =\r\n				emmcfs_get_bnode(tree, right->next_node_id,\r\n						EMMCFS_BNODE_MODE_RW);\r\n		EMMCFS_BNODE_DSCR(next_bnode)->prev_node_id = left->node_id;\r\n		left->next_node_id = next_bnode->node_id;\r\n\r\n		emmcfs_mark_bnode_dirty(next_bnode);\r\n		emmcfs_put_bnode(next_bnode);\r\n	}\r\n\r\n	emmcfs_mark_bnode_dirty(left_bnode);\r\n	emmcfs_put_bnode(left_bnode);\r\n\r\n	{\r\n		void *record = get_record(right_bnode, 0);\r\n		struct emmcfs_generic_key *key =\r\n		 kmalloc(((struct emmcfs_generic_key *)record)->key_len,\r\n		 GFP_KERNEL);\r\n\r\n		memcpy(key, record,\r\n		 ((struct emmcfs_generic_key *)record)->key_len);\r\n\r\n		key->record_len = key->key_len +\r\n		 sizeof(struct generic_index_value);\r\n		emmcfs_destroy_bnode(right_bnode);\r\n		btree_remove(tree, key, level+1);\r\n	}\r\n}\r\n','Switching layer\nObject layer\n\nNo pre check\nNo logging\nNo post check\n','3','30','',''),
 (393828,'btree_remove()','F:','/usr/src/linux-2.6.37/fs/emmcfs/btree.c',768,869,'int btree_remove(struct emmcfs_btree *tree, struct emmcfs_generic_key *key,\r\n		int level)\r\n{\r\n	struct emmcfs_bnode *bnode;\r\n	struct emmcfs_gen_node_descr *node;\r\n\r\n	void *record;\r\n	int pos;\r\n\r\n	BUG_ON(!tree->comp_fn);\r\n\r\n	/*\r\n	 * TODO: something strange is happening here\r\n	 * this code replaced with BUG_ON\r\n	if (level > tree->btree_height) {\r\n		tree->btree_height = 0;\r\n		tree->root_bnode_id = -1;\r\n		return 0;\r\n	}\r\n	*/\r\n	BUG_ON(level > emmcfs_btree_get_height(tree));\r\n\r\n	bnode = btree_find(tree, key, level, &pos, NULL, EMMCFS_BNODE_MODE_RW);\r\n	if (!bnode)\r\n		return -EINVAL;\r\n\r\n	node = bnode->data;\r\n	if (!node) {\r\n		emmcfs_put_bnode(bnode);\r\n		return -EINVAL;\r\n	}\r\n\r\n	record = get_record(bnode, pos);\r\n\r\n	if ((level == 1) && (tree->comp_fn(record, key) != 0)) {\r\n		emmcfs_put_bnode(bnode);\r\n		return -ENOENT;\r\n	}\r\n\r\n	delete_from_node(bnode, pos);\r\n\r\n	if (node->recs_count == 0) {\r\n		if (node->prev_node_id != EMMCFS_INVALID_NODE_ID) {\r\n			struct emmcfs_bnode *prev_bnode =\r\n				emmcfs_get_bnode(tree, node->prev_node_id,\r\n						EMMCFS_BNODE_MODE_RW);\r\n\r\n			EMMCFS_BNODE_DSCR(prev_bnode)->next_node_id =\r\n				node->next_node_id;\r\n\r\n			emmcfs_mark_bnode_dirty(prev_bnode);\r\n			emmcfs_put_bnode(prev_bnode);\r\n		}\r\n\r\n		if (node->next_node_id != EMMCFS_INVALID_NODE_ID) {\r\n			struct emmcfs_bnode *next_bnode =\r\n				emmcfs_get_bnode(tree, node->next_node_id,\r\n						EMMCFS_BNODE_MODE_RW);\r\n\r\n			EMMCFS_BNODE_DSCR(next_bnode)->prev_node_id =\r\n				node->prev_node_id;\r\n\r\n			emmcfs_mark_bnode_dirty(next_bnode);\r\n			emmcfs_put_bnode(next_bnode);\r\n		}\r\n\r\n		emmcfs_destroy_bnode(bnode);\r\n		return btree_remove(tree, key, level + 1);\r\n	} else if ((pos == 0) && ((level < emmcfs_btree_get_height(tree)))) {\r\n		struct emmcfs_generic_key *new_key;\r\n		new_key = btree_update_key(tree, key, bnode, level + 1);\r\n		if (!IS_ERR(new_key))\r\n			key = new_key;\r\n	}\r\n\r\n\r\n	if (node->free_space > tree->node_size_bytes / 3) {\r\n		if (level < emmcfs_btree_get_height(tree)) {\r\n			int node_id = bnode->node_id,\r\n			    node_fs = ((struct emmcfs_gen_node_descr *)\r\n				bnode->data)->free_space;\r\n			emmcfs_put_bnode(bnode);\r\n			rebalance(tree, key, level, node_id, node_fs);\r\n			return 0;\r\n		} else if (node->recs_count == 1) {\r\n			struct emmcfs_bnode *bnode_n;\r\n			if (emmcfs_btree_get_height(tree) <= 1) {\r\n				emmcfs_put_bnode(bnode);\r\n				return 0;\r\n			}\r\n			bnode_n = get_child_bnode(tree, get_record(bnode, 0),\r\n					EMMCFS_BNODE_MODE_RW);\r\n			emmcfs_btree_set_root_id(tree, bnode_n->node_id);\r\n			emmcfs_btree_dec_height(tree);\r\n			emmcfs_put_bnode(bnode_n);\r\n			emmcfs_put_bnode(bnode);\r\n			return 0;\r\n		}\r\n	}\r\n	emmcfs_put_bnode(bnode);\r\n	return 0;\r\n}\r\n','Switching layer\nFSM layer\n\n\nPre check BUG_ON\nNo logging\nPost check -EINVAL, -EINVAL, IS_ERR','15','55','',''),
 (393829,'rebalance()','D:','/usr/src/linux-2.6.37/fs/emmcfs/btree.c',707,765,'static void rebalance(struct emmcfs_btree *tree, struct emmcfs_generic_key *key,\r\n	       int level, int bnode_id, int bnode_free_space)\r\n{\r\n	int pos, neigh_free_space, parent_id, neigh_id;\r\n	struct emmcfs_bnode *neigh = 0,\r\n		*parent = btree_find(tree, key, level + 1, &pos, NULL,\r\n				EMMCFS_BNODE_MODE_RW),\r\n		*cur = emmcfs_get_bnode(tree, bnode_id, EMMCFS_BNODE_MODE_RW);\r\n\r\n	if (!parent)\r\n		return;\r\n\r\n	parent_id = parent->node_id;\r\n\r\n	if (pos > 0) {\r\n		neigh = emmcfs_get_bnode(tree,\r\n				EMMCFS_BNODE_DSCR(cur)->prev_node_id,\r\n				EMMCFS_BNODE_MODE_RW);\r\n		/* TODO:\r\n		if (!neigh) {\r\n		} */\r\n		neigh_free_space = ((struct emmcfs_gen_node_descr *)\r\n			neigh->data)->free_space;\r\n		neigh_id = neigh->node_id;\r\n		emmcfs_put_bnode(neigh);\r\n\r\n		if (bnode_free_space + neigh_free_space >=\r\n				tree->node_size_bytes) {\r\n			emmcfs_put_bnode(parent);\r\n			emmcfs_put_bnode(cur);\r\n			btree_merge(tree, parent_id, neigh_id, bnode_id,\r\n			      level);\r\n			return;\r\n		}\r\n	}\r\n	if (pos < EMMCFS_BNODE_DSCR(parent)->recs_count-1) {\r\n		neigh = emmcfs_get_bnode(tree,\r\n				EMMCFS_BNODE_DSCR(cur)->next_node_id,\r\n				EMMCFS_BNODE_MODE_RW);\r\n		/* TODO:\r\n		if (!neigh) {\r\n		} */\r\n		neigh_free_space = ((struct emmcfs_gen_node_descr *)\r\n			neigh->data)->free_space;\r\n		neigh_id = neigh->node_id;\r\n		emmcfs_put_bnode(neigh);\r\n\r\n		if (bnode_free_space + neigh_free_space >=\r\n				tree->node_size_bytes) {\r\n			emmcfs_put_bnode(parent);\r\n			emmcfs_put_bnode(cur);\r\n			btree_merge(tree, parent_id, bnode_id, neigh_id,\r\n			      level);\r\n			return;\r\n		}\r\n	}\r\n	emmcfs_put_bnode(parent);\r\n	emmcfs_put_bnode(cur);\r\n}\r\n','Switching layer\nFSM layer\n\nNo pre check\nNo logging\nNo post check\n','6','27','RESOURCE_LEAK','leaked_storage : \"Variable \"\"cur\"\" goes out of scope\"\r\n'),
 (393830,'emmcfs_btree_remove()','D:','/usr/src/linux-2.6.37/fs/emmcfs/btree.c',871,875,'int emmcfs_btree_remove(struct emmcfs_btree *tree,\r\n			struct emmcfs_generic_key *key)\r\n{\r\n	return btree_remove(tree, key, 1);\r\n}\r\n','wraper btree_remove','1','1','',''),
 (393831,'nls_tolower()','D:','/usr/src/linux-2.6.37/include/linux/nls.h',59,64,NULL,NULL,NULL,NULL,'',''),
 (393832,'nls_table.charset2lower[]','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393833,'nls_table.charset2lower','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393834,'nls_toupper()','D:','/usr/src/linux-2.6.37/include/linux/nls.h',66,71,NULL,NULL,NULL,NULL,'',''),
 (393835,'nls_table.charset2upper[]','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393836,'nls_table.charset2upper','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393837,'nls_strnicmp()','D:','/usr/src/linux-2.6.37/include/linux/nls.h',73,82,NULL,NULL,NULL,NULL,'',''),
 (393838,'nls_nullsize()','D:','/usr/src/linux-2.6.37/include/linux/nls.h',92,101,NULL,NULL,NULL,NULL,'',''),
 (393839,'nls_table.uni2char','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393840,'*nls_table.uni2char()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393841,'emmcfs_cattree_cmpfn()','D:','/usr/src/linux-2.6.37/fs/emmcfs/cattree.c',27,65,'int emmcfs_cattree_cmpfn(struct emmcfs_generic_key *__key1,\r\n		struct emmcfs_generic_key *__key2)\r\n{\r\n	struct emmcfs_cattree_key *key1, *key2;\r\n	__u16 *ch1, *ch2;\r\n	__s16 diff;\r\n	int i;\r\n\r\n#ifdef __NCC__\n/*ig  \n	key1 = container_of(__key1, struct emmcfs_cattree_key, gen_key);\r\n	key2 = container_of(__key2, struct emmcfs_cattree_key, gen_key);\r\n*/\n	key1 = __key1;\r\n	key2 = __key2;\r\n#else\n	key1 = container_of(__key1, struct emmcfs_cattree_key, gen_key);\r\n	key2 = container_of(__key2, struct emmcfs_cattree_key, gen_key);\r\n#endif\n\n\r\n	if (key1->parent_id != key2->parent_id)\r\n		return (__s64) le64_to_cpu(key1->parent_id) -\r\n			(__s64) le64_to_cpu(key2->parent_id);\r\n\r\n	ch1 = key1->name.unicode_str;\r\n	ch2 = key2->name.unicode_str;\r\n	for (i = min(le32_to_cpu(key1->name.length),\r\n				le32_to_cpu(key2->name.length)); i > 0; i--) {\r\n		diff = le16_to_cpu(*ch1) - le16_to_cpu(*ch2);\r\n		if (diff)\r\n			return diff;\r\n		ch1++;\r\n		ch2++;\r\n	}\r\n\r\n	return le32_to_cpu(key1->name.length) -\r\n		le32_to_cpu(key2->name.length);\r\n}','Switching layer\nParser layer\n\nPre check fery strange - difference between two id\nNo logging\nNo post check\n','4','19','',''),
 (393842,'emmcfs_cattree_key.parent_id','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393843,'emmcfs_cattree_key.name','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393844,'emmcfs_unicode_string.unicode_str','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393845,'emmcfs_unicode_string.length','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393846,'emmcfs_cattree_find()','D:','/usr/src/linux-2.6.37/fs/emmcfs/cattree.c',67,93,'int emmcfs_cattree_find(struct emmcfs_sb_info *sbi,\r\n		__u64 parent_id, const char *name, int len,\r\n		struct emmcfs_find_data *fd, enum emmcfs_get_bnode_mode mode)\r\n{\r\n	struct emmcfs_cattree_key *key, *found_key;\r\n	int ret = 0;\r\n	BUG_ON(fd->bnode);\r\n\r\n	key = kzalloc(sizeof(*key), GFP_KERNEL);\r\n	if (!key)\r\n		return -ENOMEM;\r\n\r\n	key->parent_id = cpu_to_le64(parent_id);\r\n	key->name.length = utf8s_to_utf16s(name, len, key->name.unicode_str);\r\n\r\n	fd->bnode = emmcfs_btree_find(sbi->catalog_tree, &key->gen_key,\r\n			&fd->pos, mode);\r\n\r\n	found_key = emmcfs_get_btree_record(fd->bnode, fd->pos);\r\n	if (emmcfs_cattree_cmpfn(&key->gen_key, &found_key->gen_key)) {\r\n		emmcfs_put_bnode(fd->bnode);\r\n		ret = -ENOENT;\r\n	}\r\n\r\n	kfree(key);\r\n	return ret;\r\n}','Object level\nCall FSM\n\nPre check BUG_ON\nPost check -ENOMEM, -ENOENT\nNo logging','3','15','',''),
 (393847,'emmcfs_find_data.bnode','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'','');
INSERT INTO `emmcfs`.`element` VALUES  (393848,'utf8s_to_utf16s()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393849,'emmcfs_sb_info.catalog_tree','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393850,'emmcfs_find_data.pos','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393851,'emmcfs_alloc_cattree_key()','D:','/usr/src/linux-2.6.37/fs/emmcfs/cattree.c',95,124,'struct emmcfs_cattree_key *emmcfs_alloc_cattree_key(int name_len,\r\n		int record_type)\r\n{\r\n	u32 record_len = 0;\r\n	u32 key_len = sizeof(struct emmcfs_cattree_key) -\r\n			sizeof(struct emmcfs_unicode_string) +\r\n			sizeof(__le32) +\r\n			/* TODO - if the terminating #0 symbol necessary and\r\n			 * is used then \'+ 1\' is necessary\r\n			 */\r\n			(name_len + 1) * sizeof(__le16);\r\n\r\n	struct emmcfs_cattree_key *form_key;\r\n\r\n	if (record_type & EMMCFS_CATALOG_FILE_RECORD)\r\n		record_len = sizeof(struct emmcfs_catalog_file_record);\r\n	else if (record_type == EMMCFS_CATALOG_FOLDER_RECORD)\r\n		record_len = sizeof(struct emmcfs_catalog_folder_record);\r\n	else if (record_type == EMMCFS_CATALOG_HLINK_RECORD)\r\n		record_len = sizeof(struct emmcfs_catalog_folder_record);\r\n\r\n	form_key = kzalloc(key_len + record_len, GFP_KERNEL);\r\n	if (!form_key)\r\n		return ERR_PTR(-ENOMEM);\r\n\r\n	form_key->gen_key.key_len = cpu_to_le32(key_len);\r\n	form_key->gen_key.record_len = cpu_to_le32(key_len + record_len);\r\n\r\n	return form_key;\r\n}','Object layer\nFSM layer\n\nNo pre check\nNo logging\nPost check ERR_PTR, -ENOMEM\n','5','15','',''),
 (393852,'emmcfs_fill_cattree_key()','D:','/usr/src/linux-2.6.37/fs/emmcfs/cattree.c',126,133,'void emmcfs_fill_cattree_key(struct emmcfs_cattree_key *fill_key, u64 parent_id,\r\n		struct qstr *name)\r\n{\r\n	fill_key->name.length =	cpu_to_le32(utf8s_to_utf16s(name->name,\r\n			name->len,\r\n			fill_key->name.unicode_str));\r\n	fill_key->parent_id = cpu_to_le64(parent_id);\r\n}','switching lavel\n\nNo Pre and Post check, logging','1','2','',''),
 (393853,'qstr.len','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393854,'get_record_type_on_mode()','D:','/usr/src/linux-2.6.37/fs/emmcfs/cattree.c',135,147,'static inline int get_record_type_on_mode(umode_t mode)\r\n{\r\n	if (S_ISDIR(mode))\r\n		return EMMCFS_CATALOG_FOLDER_RECORD;\r\n	else if (S_ISREG(mode))\r\n		return EMMCFS_CATALOG_FILE_RECORD;\r\n	else if (S_ISLNK(mode))\r\n		return EMMCFS_CATALOG_FILE_RECORD |\r\n				EMMCFS_CATALOG_FILE_RECORD_SYMLINK;\r\n	else\r\n		BUG();\r\n	return -1;\r\n}','FSM layer\n\nNo pre check\nNo logging\nPost check BUG\n','4','8','',''),
 (393855,'emmcfs_fill_cattree_value()','D:','/usr/src/linux-2.6.37/fs/emmcfs/cattree.c',149,182,'void emmcfs_fill_cattree_value(struct inode *inode, void *value_area)\r\n{\r\n	int rec_type = get_record_type_on_mode(inode->i_mode);\r\n	struct emmcfs_catalog_folder_record *comm_rec = value_area;\r\n	((struct emmcfs_catalog_common_record *)comm_rec)->record_type =\r\n			cpu_to_le16(rec_type);\r\n\r\n	/* TODO - set magic */\r\n/*	memcpy(comm_rec->magic, get_magic(le16_to_cpu(comm_rec->record_type)),\r\n			sizeof(EMMCFS_CAT_FOLDER_MAGIC) - 1);*/\r\n	comm_rec->permissions.file_mode = cpu_to_le16(inode->i_mode);\r\n	comm_rec->permissions.uid = cpu_to_le32(inode->i_uid);\r\n	comm_rec->permissions.gid = cpu_to_le32(inode->i_gid);\r\n	comm_rec->total_items_count = cpu_to_le64(inode->i_size);\r\n	comm_rec->links_count = cpu_to_le64(inode->i_nlink);\r\n	comm_rec->object_id = cpu_to_le64(inode->i_ino);\r\n\r\n	comm_rec->creation_time.seconds = cpu_to_le64(inode->i_ctime.tv_sec);\r\n	comm_rec->access_time.seconds = cpu_to_le64(inode->i_atime.tv_sec);\r\n	comm_rec->modification_time.seconds =\r\n			cpu_to_le64(inode->i_mtime.tv_sec);\r\n\r\n	comm_rec->creation_time.nanoseconds =\r\n			cpu_to_le64(inode->i_ctime.tv_nsec);\r\n	comm_rec->access_time.nanoseconds =\r\n			cpu_to_le64(inode->i_atime.tv_nsec);\r\n	comm_rec->modification_time.nanoseconds =\r\n			cpu_to_le64(inode->i_mtime.tv_nsec);\r\n\r\n	if (rec_type & EMMCFS_CATALOG_FILE_RECORD) {\r\n		struct emmcfs_catalog_file_record *file_rec = value_area;\r\n		emmcfs_form_fork(&file_rec->data_fork, inode);\r\n	}\r\n}','Switching layer\n\nNo pre check\nNo logging\nNo post check','2','18','',''),
 (393856,'emmcfs_catalog_common_record.record_type','S:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393857,'emmcfs_catalog_folder_record.permissions','S:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393858,'emmcfs_posix_permissions.file_mode','S:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393859,'emmcfs_posix_permissions.uid','S:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393860,'inode.i_uid','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393861,'emmcfs_posix_permissions.gid','S:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393862,'inode.i_gid','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393863,'emmcfs_catalog_folder_record.total_items_count','S:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393864,'emmcfs_catalog_folder_record.links_count','S:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393865,'emmcfs_catalog_folder_record.object_id','S:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393866,'emmcfs_catalog_folder_record.creation_time','S:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393867,'emmcfs_date.seconds','S:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393868,'inode.i_ctime','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393869,'emmcfs_catalog_folder_record.access_time','S:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393870,'inode.i_atime','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393871,'emmcfs_catalog_folder_record.modification_time','S:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393872,'inode.i_mtime','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393873,'emmcfs_date.nanoseconds','S:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393874,'emmcfs_form_fork()','F:','/usr/src/linux-2.6.37/fs/emmcfs/inode.c',111,135,'/**\r\n * @brief		Form layout fork from run time fork\r\n * @param [out] ifork	Run time fork\r\n * @param [in] lfork	Layout fork\r\n * @return		void\r\n */\r\nvoid emmcfs_form_fork(struct emmcfs_fork *lfork, struct inode *inode)\r\n{\r\n	struct emmcfs_fork_info *ifork = &(EMMCFS_I(inode)->fork);\r\n	struct emmcfs_sb_info *sbi = inode->i_sb->s_fs_info;\r\n	unsigned i;\r\n\r\n	lfork->internal.fork.size_in_bytes = cpu_to_le64(inode->i_size);\r\n	lfork->internal.fork.total_blocks_count = cpu_to_le32(\r\n				(inode->i_size >> sbi->block_size_shift) +\r\n		/* (inode->i_size % sbi->block_size) != 0 - more readable */\r\n		((inode->i_size & ((1 << sbi->block_size_shift) - 1)) != 0));\r\n\r\n	for (i = 0; i < ifork->used_extents; ++i) {\r\n		struct emmcfs_extent *lextent;\r\n\r\n		lextent = &lfork->internal.fork.extents[i];\r\n		lextent->begin = cpu_to_le64(ifork->extents[i].first_block);\r\n		lextent->in_blocks_or_lebs.length = cpu_to_le32(\r\n					ifork->extents[i].block_count);\r\n		lextent->magic = EMMCFS_EXTENT_MAGIC;\r\n		lextent->flags = EMMCFS_BLOCK_EXTENT;\r\n	}\r\n	lfork->magic = EMMCFS_FORK_MAGIC;\r\n	lfork->flags = EMMCFS_EXTENTS_FORK;\r\n}','Switching layer\n\nNo pre check\nNo logging\nNo post check\n','2','16','',''),
 (393875,'emmcfs_catalog_file_record.data_fork','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393876,'emmcfs_add_new_cattree_object()','D:','/usr/src/linux-2.6.37/fs/emmcfs/cattree.c',184,220,'int emmcfs_add_new_cattree_object(struct inode *inode, u64 parent_id,\r\n		struct qstr *name)\r\n{\r\n	struct emmcfs_sb_info	*sbi = inode->i_sb->s_fs_info;\r\n	void *record;\r\n	int record_type;\r\n	int ret = 0;\r\n\r\n	BUG_ON(inode->i_ino < EMMCFS_1ST_FILE_INO);\r\n\r\n	if (EMMCFS_I(inode)->hlink_id == INVALID_HLINK_ID)\r\n		record_type = get_record_type_on_mode(inode->i_mode);\r\n	else\r\n		record_type = EMMCFS_CATALOG_HLINK_RECORD;\r\n\r\n	record = emmcfs_alloc_cattree_key(name->len, record_type);\r\n	if (IS_ERR(record))\r\n		return PTR_ERR(record);\r\n	emmcfs_fill_cattree_key(record, parent_id, name);\r\n\r\n	if (EMMCFS_I(inode)->hlink_id == INVALID_HLINK_ID) {\r\n		emmcfs_fill_cattree_value(inode, get_value_pointer(record));\r\n	} else {\r\n		((struct emmcfs_catalog_hlink_record *)\r\n				get_value_pointer(record))->hlink_id =\r\n					cpu_to_le64(EMMCFS_I(inode)->hlink_id);\r\n	}\r\n\r\n	ret = emmcfs_btree_insert(sbi->catalog_tree, record);\r\n	if (ret)\r\n		goto exit;\r\n\r\n	EMMCFS_I(inode)->is_new = 0;\r\nexit:\r\n	kfree(record);\r\n	return ret;\r\n}','Object level\nFSM level\n\nPre check BUG_ON\nPost check IS_ERR\nNo logging','5','21','',''),
 (393877,'emmcfs_inode_info.hlink_id','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393878,'emmcfs_catalog_hlink_record.hlink_id','S:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393879,'emmcfs_inode_info.is_new','S:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393880,'emmcfs_find_first_catalog_child()','D:','/usr/src/linux-2.6.37/fs/emmcfs/cattree.c',222,269,'struct emmcfs_bnode *emmcfs_find_first_catalog_child(struct inode *inode,\r\n		int *pos)\r\n{\r\n	struct emmcfs_cattree_key *search_key =\r\n		kzalloc(sizeof(*search_key), GFP_KERNEL);\r\n	struct emmcfs_bnode *bnode = NULL;\r\n	struct emmcfs_cattree_key *found_key;\r\n	struct emmcfs_sb_info *sbi = inode->i_sb->s_fs_info;\r\n\r\n	if (!search_key)\r\n		return ERR_PTR(-ENOMEM);\r\n\r\n	search_key->parent_id = cpu_to_le64(inode->i_ino);\r\n	search_key->name.length = 0;\r\n	bnode = emmcfs_btree_find(sbi->catalog_tree, &search_key->gen_key, pos,\r\n			EMMCFS_BNODE_MODE_RO);\r\n\r\n	if (IS_ERR(bnode)) {\r\n		*pos = -1;\r\n		goto exit;\r\n	}\r\n\r\n	BUG_ON(*pos >= EMMCFS_BNODE_DSCR(bnode)->recs_count);\r\n	found_key = emmcfs_get_btree_record(bnode, *pos);\r\n\r\n	if (found_key->parent_id == search_key->parent_id)\r\n		goto exit;\r\n\r\n	found_key = emmcfs_get_next_btree_record(&bnode, pos);\r\n	if (IS_ERR(found_key)) {\r\n		*pos = -1;\r\n		emmcfs_put_bnode(bnode);\r\n		/* If we are here, found_key contains err code */\r\n		bnode = (void *) found_key;\r\n		goto exit;\r\n	}\r\n\r\n	found_key = emmcfs_get_btree_record(bnode, *pos);\r\n	if (found_key->parent_id != search_key->parent_id) {\r\n		emmcfs_put_bnode(bnode);\r\n		bnode = ERR_PTR(-ENOENT);\r\n		*pos = -1;\r\n	}\r\n\r\nexit:\r\n	kfree(search_key);\r\n	return bnode;\r\n}','Object level\nFSM level\n\nBus\n\nPre check BUG_ON\nPost check IS_ERR, ERR_PTR\nNo logging','6','29','',''),
 (393881,'wait_on_inode()','D:','/usr/src/linux-2.6.37/include/linux/writeback.h',71,75,NULL,NULL,NULL,NULL,'',''),
 (393882,'inode.i_state','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393883,'inode_wait','g:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393884,'inode_sync_wait()','D:','/usr/src/linux-2.6.37/include/linux/writeback.h',76,81,NULL,NULL,NULL,NULL,'',''),
 (393885,'balance_dirty_pages_ratelimited()','D:','/usr/src/linux-2.6.37/include/linux/writeback.h',135,139,NULL,NULL,NULL,NULL,'',''),
 (393886,'balance_dirty_pages_ratelimited_nr()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393887,'wb_has_dirty_io()','D:','/usr/src/linux-2.6.37/include/linux/backing-dev.h',116,121,NULL,NULL,NULL,NULL,'',''),
 (393888,'bdi_writeback.b_dirty','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393889,'bdi_writeback.b_io','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393890,'bdi_writeback.b_more_io','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393891,'__add_bdi_stat()','D:','/usr/src/linux-2.6.37/include/linux/backing-dev.h',123,127,NULL,NULL,NULL,NULL,'',''),
 (393892,'backing_dev_info.bdi_stat[]','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393893,'backing_dev_info.bdi_stat','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393894,'__inc_bdi_stat()','D:','/usr/src/linux-2.6.37/include/linux/backing-dev.h',129,133,NULL,NULL,NULL,NULL,'',''),
 (393895,'inc_bdi_stat()','D:','/usr/src/linux-2.6.37/include/linux/backing-dev.h',135,143,NULL,NULL,NULL,NULL,'',''),
 (393896,'__dec_bdi_stat()','D:','/usr/src/linux-2.6.37/include/linux/backing-dev.h',145,149,NULL,NULL,NULL,NULL,'',''),
 (393897,'dec_bdi_stat()','D:','/usr/src/linux-2.6.37/include/linux/backing-dev.h',151,159,NULL,NULL,NULL,NULL,'',''),
 (393898,'bdi_stat()','D:','/usr/src/linux-2.6.37/include/linux/backing-dev.h',161,165,NULL,NULL,NULL,NULL,'',''),
 (393899,'__bdi_stat_sum()','D:','/usr/src/linux-2.6.37/include/linux/backing-dev.h',167,171,NULL,NULL,NULL,NULL,'',''),
 (393900,'bdi_stat_sum()','D:','/usr/src/linux-2.6.37/include/linux/backing-dev.h',173,184,NULL,NULL,NULL,NULL,'',''),
 (393901,'bdi_stat_error()','D:','/usr/src/linux-2.6.37/include/linux/backing-dev.h',191,198,NULL,NULL,NULL,NULL,'',''),
 (393902,'bdi_congested()','D:','/usr/src/linux-2.6.37/include/linux/backing-dev.h',258,263,NULL,NULL,NULL,NULL,'',''),
 (393903,'backing_dev_info.congested_fn','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393904,'*backing_dev_info.congested_fn()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393905,'backing_dev_info.congested_data','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393906,'backing_dev_info.state','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393907,'bdi_read_congested()','D:','/usr/src/linux-2.6.37/include/linux/backing-dev.h',265,268,NULL,NULL,NULL,NULL,'',''),
 (393908,'bdi_write_congested()','D:','/usr/src/linux-2.6.37/include/linux/backing-dev.h',270,273,NULL,NULL,NULL,NULL,'',''),
 (393909,'bdi_rw_congested()','D:','/usr/src/linux-2.6.37/include/linux/backing-dev.h',275,279,NULL,NULL,NULL,NULL,'',''),
 (393910,'bdi_cap_writeback_dirty()','D:','/usr/src/linux-2.6.37/include/linux/backing-dev.h',291,294,NULL,NULL,NULL,NULL,'',''),
 (393911,'backing_dev_info.capabilities','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393912,'bdi_cap_account_dirty()','D:','/usr/src/linux-2.6.37/include/linux/backing-dev.h',296,299,NULL,NULL,NULL,NULL,'',''),
 (393913,'bdi_cap_account_writeback()','D:','/usr/src/linux-2.6.37/include/linux/backing-dev.h',301,306,NULL,NULL,NULL,NULL,'',''),
 (393914,'bdi_cap_swap_backed()','D:','/usr/src/linux-2.6.37/include/linux/backing-dev.h',308,311,NULL,NULL,NULL,NULL,'',''),
 (393915,'bdi_cap_flush_forker()','D:','/usr/src/linux-2.6.37/include/linux/backing-dev.h',313,316,NULL,NULL,NULL,NULL,'',''),
 (393916,'default_backing_dev_info','g:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393917,'mapping_cap_writeback_dirty()','D:','/usr/src/linux-2.6.37/include/linux/backing-dev.h',318,321,NULL,NULL,NULL,NULL,'',''),
 (393918,'address_space.backing_dev_info','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393919,'mapping_cap_account_dirty()','D:','/usr/src/linux-2.6.37/include/linux/backing-dev.h',323,326,NULL,NULL,NULL,NULL,'',''),
 (393920,'mapping_cap_swap_backed()','D:','/usr/src/linux-2.6.37/include/linux/backing-dev.h',328,331,NULL,NULL,NULL,NULL,'',''),
 (393921,'bdi_sched_wait()','D:','/usr/src/linux-2.6.37/include/linux/backing-dev.h',333,337,NULL,NULL,NULL,NULL,'',''),
 (393922,'schedule()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393923,'blk_run_backing_dev()','D:','/usr/src/linux-2.6.37/include/linux/backing-dev.h',339,344,NULL,NULL,NULL,NULL,'',''),
 (393924,'backing_dev_info.unplug_io_fn','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393925,'*backing_dev_info.unplug_io_fn()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393926,'blk_run_address_space()','D:','/usr/src/linux-2.6.37/include/linux/backing-dev.h',346,350,NULL,NULL,NULL,NULL,'',''),
 (393927,'call_usermodehelper_fns()','D:','/usr/src/linux-2.6.37/include/linux/kmod.h',86,103,NULL,NULL,NULL,NULL,'',''),
 (393928,'call_usermodehelper_setup()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393929,'call_usermodehelper_setfns()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393930,'call_usermodehelper_exec()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393931,'call_usermodehelper()','D:','/usr/src/linux-2.6.37/include/linux/kmod.h',105,110,NULL,NULL,NULL,NULL,'',''),
 (393932,'fill_ldt()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/desc.h',9,31,NULL,NULL,NULL,NULL,'',''),
 (393933,'desc_struct.limit0','S:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393934,'user_desc.limit','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393935,'desc_struct.base0','S:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393936,'user_desc.base_addr','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393937,'desc_struct.base1','S:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393938,'desc_struct.type','S:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393939,'user_desc.read_exec_only','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393940,'user_desc.contents','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393941,'desc_struct.s','S:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393942,'desc_struct.dpl','S:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393943,'desc_struct.p','S:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393944,'user_desc.seg_not_present','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393945,'desc_struct.limit','S:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393946,'desc_struct.avl','S:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393947,'user_desc.useable','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393948,'desc_struct.d','S:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393949,'user_desc.seg_32bit','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393950,'desc_struct.g','S:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393951,'user_desc.limit_in_pages','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393952,'desc_struct.base2','S:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393953,'desc_struct.l','S:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393954,'get_cpu_gdt_table()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/desc.h',41,44,NULL,NULL,NULL,NULL,'',''),
 (393955,'gdt_page.gdt','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393956,'pack_gate()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/desc.h',64,71,NULL,NULL,NULL,NULL,'',''),
 (393957,'desc_struct.a','S:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393958,'desc_struct.b','S:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393959,'desc_empty()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/desc.h',75,79,NULL,NULL,NULL,NULL,'',''),
 (393960,'native_write_idt_entry()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/desc.h',115,119,NULL,NULL,NULL,NULL,'',''),
 (393961,'native_write_ldt_entry()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/desc.h',121,125,NULL,NULL,NULL,NULL,'',''),
 (393962,'native_write_gdt_entry()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/desc.h',127,143,NULL,NULL,NULL,NULL,'',''),
 (393963,'pack_descriptor()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/desc.h',145,154,NULL,NULL,NULL,NULL,'',''),
 (393964,'set_tssldt_descriptor()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/desc.h',157,174,NULL,NULL,NULL,NULL,'',''),
 (393965,'__set_tss_desc()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/desc.h',176,199,NULL,NULL,NULL,NULL,'',''),
 (393966,'native_set_ldt()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/desc.h',203,217,NULL,NULL,NULL,NULL,'',''),
 (393967,'native_load_tr_desc()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/desc.h',219,222,NULL,NULL,NULL,NULL,'',''),
 (393968,'native_load_gdt()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/desc.h',224,227,NULL,NULL,NULL,NULL,'',''),
 (393969,'native_load_idt()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/desc.h',229,232,NULL,NULL,NULL,NULL,'',''),
 (393970,'native_store_gdt()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/desc.h',234,237,NULL,NULL,NULL,NULL,'',''),
 (393971,'native_store_idt()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/desc.h',239,242,NULL,NULL,NULL,NULL,'',''),
 (393972,'native_store_tr()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/desc.h',244,249,NULL,NULL,NULL,NULL,'',''),
 (393973,'native_load_tls()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/desc.h',251,258,NULL,NULL,NULL,NULL,'',''),
 (393974,'thread_struct.tls_array[]','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393975,'thread_struct.tls_array','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393976,'clear_LDT()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/desc.h',276,279,NULL,NULL,NULL,NULL,'',''),
 (393977,'load_LDT_nolock()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/desc.h',284,287,NULL,NULL,NULL,NULL,'',''),
 (393978,'mm_context_t.ldt','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393979,'mm_context_t.size','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393980,'load_LDT()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/desc.h',289,294,NULL,NULL,NULL,NULL,'',''),
 (393981,'get_desc_base()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/desc.h',296,299,NULL,NULL,NULL,NULL,'',''),
 (393982,'set_desc_base()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/desc.h',301,306,NULL,NULL,NULL,NULL,'',''),
 (393983,'get_desc_limit()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/desc.h',308,311,NULL,NULL,NULL,NULL,'',''),
 (393984,'set_desc_limit()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/desc.h',313,317,NULL,NULL,NULL,NULL,'',''),
 (393985,'_set_gate()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/desc.h',319,329,NULL,NULL,NULL,NULL,'',''),
 (393986,'idt_table','g:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393987,'set_intr_gate()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/desc.h',337,341,NULL,NULL,NULL,NULL,'',''),
 (393988,'alloc_system_vector()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/desc.h',347,355,NULL,NULL,NULL,NULL,'',''),
 (393989,'used_vectors','g:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393990,'first_system_vector','g:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (393991,'alloc_intr_gate()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/desc.h',357,361,NULL,NULL,NULL,NULL,'',''),
 (393992,'set_system_intr_gate()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/desc.h',366,370,NULL,NULL,NULL,NULL,'',''),
 (393993,'set_system_trap_gate()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/desc.h',372,376,NULL,NULL,NULL,NULL,'',''),
 (393994,'set_trap_gate()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/desc.h',378,382,NULL,NULL,NULL,NULL,'',''),
 (393995,'set_task_gate()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/desc.h',384,388,NULL,NULL,NULL,NULL,'',''),
 (393996,'set_intr_gate_ist()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/desc.h',390,394,NULL,NULL,NULL,NULL,'',''),
 (393997,'set_system_intr_gate_ist()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/desc.h',396,400,NULL,NULL,NULL,NULL,'',''),
 (393998,'elf_coredump_extra_notes_size()','D:','/usr/src/linux-2.6.37/include/linux/elf.h',439,439,NULL,NULL,NULL,NULL,'',''),
 (393999,'elf_coredump_extra_notes_write()','D:','/usr/src/linux-2.6.37/include/linux/elf.h',440,441,NULL,NULL,NULL,NULL,'',''),
 (394000,'__check_old_set_param()','D:','/usr/src/linux-2.6.37/include/linux/moduleparam.h',164,168,NULL,NULL,NULL,NULL,'',''),
 (394001,'trace_module_load()','D:','/usr/src/linux-2.6.37/include/trace/events/module.h',18,18,NULL,NULL,NULL,NULL,'',''),
 (394002,'__tracepoint_module_load','g:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394003,'register_trace_module_load()','D:','/usr/src/linux-2.6.37/include/trace/events/module.h',18,18,NULL,NULL,NULL,NULL,'',''),
 (394004,'unregister_trace_module_load()','D:','/usr/src/linux-2.6.37/include/trace/events/module.h',18,18,NULL,NULL,NULL,NULL,'',''),
 (394005,'check_trace_callback_type_module_load()','D:','/usr/src/linux-2.6.37/include/trace/events/module.h',18,18,NULL,NULL,NULL,NULL,'',''),
 (394006,'trace_module_free()','D:','/usr/src/linux-2.6.37/include/trace/events/module.h',37,37,NULL,NULL,NULL,NULL,'',''),
 (394007,'__tracepoint_module_free','g:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394008,'register_trace_module_free()','D:','/usr/src/linux-2.6.37/include/trace/events/module.h',37,37,NULL,NULL,NULL,NULL,'',''),
 (394009,'unregister_trace_module_free()','D:','/usr/src/linux-2.6.37/include/trace/events/module.h',37,37,NULL,NULL,NULL,NULL,'',''),
 (394010,'check_trace_callback_type_module_free()','D:','/usr/src/linux-2.6.37/include/trace/events/module.h',37,37,NULL,NULL,NULL,NULL,'',''),
 (394011,'trace_module_get()','D:','/usr/src/linux-2.6.37/include/trace/events/module.h',79,79,NULL,NULL,NULL,NULL,'',''),
 (394012,'__tracepoint_module_get','g:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394013,'register_trace_module_get()','D:','/usr/src/linux-2.6.37/include/trace/events/module.h',79,79,NULL,NULL,NULL,NULL,'',''),
 (394014,'unregister_trace_module_get()','D:','/usr/src/linux-2.6.37/include/trace/events/module.h',79,79,NULL,NULL,NULL,NULL,'',''),
 (394015,'check_trace_callback_type_module_get()','D:','/usr/src/linux-2.6.37/include/trace/events/module.h',79,79,NULL,NULL,NULL,NULL,'',''),
 (394016,'trace_module_put()','D:','/usr/src/linux-2.6.37/include/trace/events/module.h',86,86,NULL,NULL,NULL,NULL,'',''),
 (394017,'__tracepoint_module_put','g:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394018,'register_trace_module_put()','D:','/usr/src/linux-2.6.37/include/trace/events/module.h',86,86,NULL,NULL,NULL,NULL,'',''),
 (394019,'unregister_trace_module_put()','D:','/usr/src/linux-2.6.37/include/trace/events/module.h',86,86,NULL,NULL,NULL,NULL,'',''),
 (394020,'check_trace_callback_type_module_put()','D:','/usr/src/linux-2.6.37/include/trace/events/module.h',86,86,NULL,NULL,NULL,NULL,'',''),
 (394021,'trace_module_request()','D:','/usr/src/linux-2.6.37/include/trace/events/module.h',94,94,NULL,NULL,NULL,NULL,'',''),
 (394022,'__tracepoint_module_request','g:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394023,'register_trace_module_request()','D:','/usr/src/linux-2.6.37/include/trace/events/module.h',94,94,NULL,NULL,NULL,NULL,'',''),
 (394024,'unregister_trace_module_request()','D:','/usr/src/linux-2.6.37/include/trace/events/module.h',94,94,NULL,NULL,NULL,NULL,'',''),
 (394025,'check_trace_callback_type_module_request()','D:','/usr/src/linux-2.6.37/include/trace/events/module.h',94,94,NULL,NULL,NULL,NULL,'',''),
 (394026,'module_is_live()','D:','/usr/src/linux-2.6.37/include/linux/module.h',403,406,NULL,NULL,NULL,NULL,'',''),
 (394027,'module.state','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394028,'within_module_core()','D:','/usr/src/linux-2.6.37/include/linux/module.h',414,418,NULL,NULL,NULL,NULL,'',''),
 (394029,'module.module_core','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394030,'module.core_size','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394031,'within_module_init()','D:','/usr/src/linux-2.6.37/include/linux/module.h',420,424,NULL,NULL,NULL,NULL,'',''),
 (394032,'module.module_init','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394033,'module.init_size','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394034,'__module_get()','D:','/usr/src/linux-2.6.37/include/linux/module.h',475,483,NULL,NULL,NULL,NULL,'',''),
 (394035,'try_module_get()','D:','/usr/src/linux-2.6.37/include/linux/module.h',485,501,NULL,NULL,NULL,NULL,'',''),
 (394036,'device_set_wakeup_capable()','D:','/usr/src/linux-2.6.37/include/linux/pm_wakeup.h',65,68,NULL,NULL,NULL,NULL,'',''),
 (394037,'device.power','S:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394038,'dev_pm_info.can_wakeup','S:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394039,'device_can_wakeup()','D:','/usr/src/linux-2.6.37/include/linux/pm_wakeup.h',70,73,NULL,NULL,NULL,NULL,'',''),
 (394040,'device_may_wakeup()','D:','/usr/src/linux-2.6.37/include/linux/pm_wakeup.h',77,80,NULL,NULL,NULL,NULL,'',''),
 (394041,'dev_pm_info.wakeup','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394042,'dev_name()','D:','/usr/src/linux-2.6.37/include/linux/device.h',463,470,NULL,NULL,NULL,NULL,'',''),
 (394043,'device.init_name','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394044,'device.kobj','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394045,'dev_to_node()','D:','/usr/src/linux-2.6.37/include/linux/device.h',485,488,NULL,NULL,NULL,NULL,'',''),
 (394046,'set_dev_node()','D:','/usr/src/linux-2.6.37/include/linux/device.h',489,491,NULL,NULL,NULL,NULL,'',''),
 (394047,'dev_get_uevent_suppress()','D:','/usr/src/linux-2.6.37/include/linux/device.h',494,497,NULL,NULL,NULL,NULL,'',''),
 (394048,'kobject.uevent_suppress','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394049,'dev_set_uevent_suppress()','D:','/usr/src/linux-2.6.37/include/linux/device.h',499,502,NULL,NULL,NULL,NULL,'',''),
 (394050,'device_is_registered()','D:','/usr/src/linux-2.6.37/include/linux/device.h',504,507,NULL,NULL,NULL,NULL,'',''),
 (394051,'kobject.state_in_sysfs','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394052,'device_enable_async_suspend()','D:','/usr/src/linux-2.6.37/include/linux/device.h',509,513,NULL,NULL,NULL,NULL,'',''),
 (394053,'dev_pm_info.status','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394054,'dev_pm_info.async_suspend','S:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394055,'device_disable_async_suspend()','D:','/usr/src/linux-2.6.37/include/linux/device.h',515,519,NULL,NULL,NULL,NULL,'',''),
 (394056,'device_async_suspend_enabled()','D:','/usr/src/linux-2.6.37/include/linux/device.h',521,524,NULL,NULL,NULL,NULL,'',''),
 (394057,'device_lock()','D:','/usr/src/linux-2.6.37/include/linux/device.h',526,529,NULL,NULL,NULL,NULL,'',''),
 (394058,'mutex_lock()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394059,'device.mutex','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394060,'device_trylock()','D:','/usr/src/linux-2.6.37/include/linux/device.h',531,534,NULL,NULL,NULL,NULL,'',''),
 (394061,'mutex_trylock()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394062,'device_unlock()','D:','/usr/src/linux-2.6.37/include/linux/device.h',536,539,NULL,NULL,NULL,NULL,'',''),
 (394063,'mutex_unlock()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394064,'root_device_register()','D:','/usr/src/linux-2.6.37/include/linux/device.h',568,571,NULL,NULL,NULL,NULL,'',''),
 (394065,'__root_device_register()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394066,'dev_get_platdata()','D:','/usr/src/linux-2.6.37/include/linux/device.h',574,577,NULL,NULL,NULL,NULL,'',''),
 (394067,'device.platform_data','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394068,'part_to_disk()','D:','/usr/src/linux-2.6.37/include/linux/genhd.h',184,193,NULL,NULL,NULL,NULL,'',''),
 (394069,'part_pack_uuid()','D:','/usr/src/linux-2.6.37/include/linux/genhd.h',207,223,NULL,NULL,NULL,NULL,'',''),
 (394070,'hex_to_bin()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394071,'part_unpack_uuid()','D:','/usr/src/linux-2.6.37/include/linux/genhd.h',225,229,NULL,NULL,NULL,NULL,'',''),
 (394072,'sprintf()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394073,'disk_max_parts()','D:','/usr/src/linux-2.6.37/include/linux/genhd.h',231,236,NULL,NULL,NULL,NULL,'',''),
 (394074,'gendisk.flags','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394075,'gendisk.minors','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394076,'disk_partitionable()','D:','/usr/src/linux-2.6.37/include/linux/genhd.h',238,241,NULL,NULL,NULL,NULL,'',''),
 (394077,'disk_devt()','D:','/usr/src/linux-2.6.37/include/linux/genhd.h',243,246,NULL,NULL,NULL,NULL,'',''),
 (394078,'gendisk.part0','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394079,'hd_struct.__dev','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394080,'device.devt','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394081,'part_devt()','D:','/usr/src/linux-2.6.37/include/linux/genhd.h',248,251,NULL,NULL,NULL,NULL,'',''),
 (394082,'disk_put_part()','D:','/usr/src/linux-2.6.37/include/linux/genhd.h',255,259,NULL,NULL,NULL,NULL,'',''),
 (394083,'put_device()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394084,'part_stat_set_all()','D:','/usr/src/linux-2.6.37/include/linux/genhd.h',312,319,NULL,NULL,NULL,NULL,'',''),
 (394085,'cpu_possible_mask','g:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394086,'init_part_stats()','D:','/usr/src/linux-2.6.37/include/linux/genhd.h',321,327,NULL,NULL,NULL,NULL,'',''),
 (394087,'hd_struct.dkstats','S:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394088,'__alloc_percpu()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394089,'free_part_stats()','D:','/usr/src/linux-2.6.37/include/linux/genhd.h',329,332,NULL,NULL,NULL,NULL,'',''),
 (394090,'free_percpu()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394091,'part_inc_in_flight()','D:','/usr/src/linux-2.6.37/include/linux/genhd.h',373,378,NULL,NULL,NULL,NULL,'',''),
 (394092,'hd_struct.in_flight[]','S:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394093,'hd_struct.in_flight','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394094,'hd_struct.partno','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394095,'part_dec_in_flight()','D:','/usr/src/linux-2.6.37/include/linux/genhd.h',380,385,NULL,NULL,NULL,NULL,'',''),
 (394096,'part_in_flight()','D:','/usr/src/linux-2.6.37/include/linux/genhd.h',387,390,NULL,NULL,NULL,NULL,'',''),
 (394097,'alloc_part_info()','D:','/usr/src/linux-2.6.37/include/linux/genhd.h',392,398,NULL,NULL,NULL,NULL,'',''),
 (394098,'gendisk.node_id','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394099,'free_part_info()','D:','/usr/src/linux-2.6.37/include/linux/genhd.h',400,403,NULL,NULL,NULL,NULL,'',''),
 (394100,'hd_struct.info','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394101,'get_disk_ro()','D:','/usr/src/linux-2.6.37/include/linux/genhd.h',418,421,NULL,NULL,NULL,NULL,'',''),
 (394102,'hd_struct.policy','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394103,'get_start_sect()','D:','/usr/src/linux-2.6.37/include/linux/genhd.h',427,430,NULL,NULL,NULL,NULL,'',''),
 (394104,'block_device.bd_part','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394105,'hd_struct.start_sect','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394106,'get_capacity()','D:','/usr/src/linux-2.6.37/include/linux/genhd.h',431,434,NULL,NULL,NULL,NULL,'',''),
 (394107,'hd_struct.nr_sects','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394108,'set_capacity()','D:','/usr/src/linux-2.6.37/include/linux/genhd.h',435,438,NULL,NULL,NULL,NULL,'',''),
 (394109,'mempool_create_slab_pool()','D:','/usr/src/linux-2.6.37/include/linux/mempool.h',42,47,NULL,NULL,NULL,NULL,'',''),
 (394110,'mempool_create()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394111,'mempool_alloc_slab','g:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394112,'mempool_free_slab','g:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394113,'mempool_create_kmalloc_pool()','D:','/usr/src/linux-2.6.37/include/linux/mempool.h',55,59,NULL,NULL,NULL,NULL,'',''),
 (394114,'mempool_kmalloc','g:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394115,'mempool_kfree','g:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394116,'mempool_create_page_pool()','D:','/usr/src/linux-2.6.37/include/linux/mempool.h',67,71,NULL,NULL,NULL,NULL,'',''),
 (394117,'mempool_alloc_pages','g:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394118,'mempool_free_pages','g:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394119,'ioc_task_link()','D:','/usr/src/linux-2.6.37/include/linux/iocontext.h',59,71,NULL,NULL,NULL,NULL,'',''),
 (394120,'io_context.refcount','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394121,'io_context.nr_tasks','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394122,'task_ioprio()','D:','/usr/src/linux-2.6.37/include/linux/ioprio.h',49,55,NULL,NULL,NULL,NULL,'',''),
 (394123,'io_context.ioprio','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394124,'task_ioprio_class()','D:','/usr/src/linux-2.6.37/include/linux/ioprio.h',57,63,NULL,NULL,NULL,NULL,'',''),
 (394125,'task_nice_ioprio()','D:','/usr/src/linux-2.6.37/include/linux/ioprio.h',65,68,NULL,NULL,NULL,NULL,'',''),
 (394126,'task_nice()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394127,'task_nice_ioclass()','D:','/usr/src/linux-2.6.37/include/linux/ioprio.h',74,82,NULL,NULL,NULL,NULL,'',''),
 (394128,'task_struct.policy','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394129,'readb()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/io.h',56,56,NULL,NULL,NULL,NULL,'',''),
 (394130,'readw()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/io.h',57,57,NULL,NULL,NULL,NULL,'',''),
 (394131,'readl()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/io.h',58,58,NULL,NULL,NULL,NULL,'',''),
 (394132,'__readb()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/io.h',60,60,NULL,NULL,NULL,NULL,'',''),
 (394133,'__readw()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/io.h',61,61,NULL,NULL,NULL,NULL,'',''),
 (394134,'__readl()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/io.h',62,62,NULL,NULL,NULL,NULL,'',''),
 (394135,'writeb()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/io.h',64,64,NULL,NULL,NULL,NULL,'',''),
 (394136,'writew()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/io.h',65,65,NULL,NULL,NULL,NULL,'',''),
 (394137,'writel()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/io.h',66,66,NULL,NULL,NULL,NULL,'',''),
 (394138,'__writeb()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/io.h',68,68,NULL,NULL,NULL,NULL,'',''),
 (394139,'__writew()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/io.h',69,69,NULL,NULL,NULL,NULL,'',''),
 (394140,'__writel()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/io.h',70,70,NULL,NULL,NULL,NULL,'',''),
 (394141,'readq()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/io.h',92,101,NULL,NULL,NULL,NULL,'',''),
 (394142,'writeq()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/io.h',103,107,NULL,NULL,NULL,NULL,'',''),
 (394143,'virt_to_phys()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/io.h',133,136,NULL,NULL,NULL,NULL,'',''),
 (394144,'phys_to_virt()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/io.h',151,154,NULL,NULL,NULL,NULL,'',''),
 (394145,'isa_virt_to_bus()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/io.h',166,169,NULL,NULL,NULL,NULL,'',''),
 (394146,'ioremap()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/io.h',204,207,NULL,NULL,NULL,NULL,'',''),
 (394147,'ioremap_nocache()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394148,'memset_io()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/io.h',224,228,NULL,NULL,NULL,NULL,'',''),
 (394149,'memcpy_fromio()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/io.h',230,234,NULL,NULL,NULL,NULL,'',''),
 (394150,'memcpy_toio()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/io.h',236,240,NULL,NULL,NULL,NULL,'',''),
 (394151,'flush_write_buffers()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/io.h',260,265,NULL,NULL,NULL,NULL,'',''),
 (394152,'outb()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/io.h',330,330,NULL,NULL,NULL,NULL,'',''),
 (394153,'inb()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/io.h',330,330,NULL,NULL,NULL,NULL,'',''),
 (394154,'outb_p()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/io.h',330,330,NULL,NULL,NULL,NULL,'',''),
 (394155,'inb_p()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/io.h',330,330,NULL,NULL,NULL,NULL,'',''),
 (394156,'outsb()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/io.h',330,330,NULL,NULL,NULL,NULL,'',''),
 (394157,'insb()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/io.h',330,330,NULL,NULL,NULL,NULL,'',''),
 (394158,'outw()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/io.h',331,331,NULL,NULL,NULL,NULL,'',''),
 (394159,'inw()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/io.h',331,331,NULL,NULL,NULL,NULL,'',''),
 (394160,'outw_p()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/io.h',331,331,NULL,NULL,NULL,NULL,'',''),
 (394161,'inw_p()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/io.h',331,331,NULL,NULL,NULL,NULL,'',''),
 (394162,'outsw()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/io.h',331,331,NULL,NULL,NULL,NULL,'',''),
 (394163,'insw()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/io.h',331,331,NULL,NULL,NULL,NULL,'',''),
 (394164,'outl()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/io.h',332,332,NULL,NULL,NULL,NULL,'',''),
 (394165,'inl()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/io.h',332,332,NULL,NULL,NULL,NULL,'',''),
 (394166,'outl_p()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/io.h',332,332,NULL,NULL,NULL,NULL,'',''),
 (394167,'inl_p()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/io.h',332,332,NULL,NULL,NULL,NULL,'',''),
 (394168,'outsl()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/io.h',332,332,NULL,NULL,NULL,NULL,'',''),
 (394169,'insl()','D:','/usr/src/linux-2.6.37/arch/x86/include/asm/io.h',332,332,NULL,NULL,NULL,NULL,'',''),
 (394170,'bio_cur_bytes()','D:','/usr/src/linux-2.6.37/include/linux/bio.h',70,76,NULL,NULL,NULL,NULL,'',''),
 (394171,'bio.bi_vcnt','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394172,'bio.bi_io_vec[]','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394173,'bio.bi_io_vec','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394174,'bio.bi_idx','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394175,'bio_vec.bv_len','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394176,'bio.bi_size','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394177,'bio_data()','D:','/usr/src/linux-2.6.37/include/linux/bio.h',78,84,NULL,NULL,NULL,NULL,'',''),
 (394178,'page_address()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394179,'bio_vec.bv_page','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394180,'bio_vec.bv_offset','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394181,'bio_has_allocated_vec()','D:','/usr/src/linux-2.6.37/include/linux/bio.h',86,89,NULL,NULL,NULL,NULL,'',''),
 (394182,'bio.bi_inline_vecs','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394183,'bio_flush_dcache_pages()','D:','/usr/src/linux-2.6.37/include/linux/bio.h',255,257,NULL,NULL,NULL,NULL,'',''),
 (394184,'bio_set_completion_cpu()','D:','/usr/src/linux-2.6.37/include/linux/bio.h',274,277,NULL,NULL,NULL,NULL,'',''),
 (394185,'bio.bi_comp_cpu','S:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394186,'bvec_kmap_irq()','D:','/usr/src/linux-2.6.37/include/linux/bio.h',320,334,NULL,NULL,NULL,NULL,'',''),
 (394187,'__kmap_atomic()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394188,'bvec_kunmap_irq()','D:','/usr/src/linux-2.6.37/include/linux/bio.h',337,343,NULL,NULL,NULL,NULL,'',''),
 (394189,'__bio_kmap_irq()','D:','/usr/src/linux-2.6.37/include/linux/bio.h',366,370,NULL,NULL,NULL,NULL,'',''),
 (394190,'bio_has_data()','D:','/usr/src/linux-2.6.37/include/linux/bio.h',380,383,NULL,NULL,NULL,NULL,'',''),
 (394191,'bio_list_empty()','D:','/usr/src/linux-2.6.37/include/linux/bio.h',397,400,NULL,NULL,NULL,NULL,'',''),
 (394192,'bio_list.head','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394193,'bio_list_init()','D:','/usr/src/linux-2.6.37/include/linux/bio.h',402,405,NULL,NULL,NULL,NULL,'',''),
 (394194,'bio_list.tail','S:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394195,'bio_list_size()','D:','/usr/src/linux-2.6.37/include/linux/bio.h',410,419,NULL,NULL,NULL,NULL,'',''),
 (394196,'bio.bi_next','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394197,'bio_list_add()','D:','/usr/src/linux-2.6.37/include/linux/bio.h',421,431,NULL,NULL,NULL,NULL,'',''),
 (394198,'bio_list_add_head()','D:','/usr/src/linux-2.6.37/include/linux/bio.h',433,441,NULL,NULL,NULL,NULL,'',''),
 (394199,'bio_list_merge()','D:','/usr/src/linux-2.6.37/include/linux/bio.h',443,454,NULL,NULL,NULL,NULL,'',''),
 (394200,'bio_list_merge_head()','D:','/usr/src/linux-2.6.37/include/linux/bio.h',456,468,NULL,NULL,NULL,NULL,'',''),
 (394201,'bio_list_peek()','D:','/usr/src/linux-2.6.37/include/linux/bio.h',470,473,NULL,NULL,NULL,NULL,'',''),
 (394202,'bio_list_pop()','D:','/usr/src/linux-2.6.37/include/linux/bio.h',475,488,NULL,NULL,NULL,NULL,'',''),
 (394203,'bio_list_get()','D:','/usr/src/linux-2.6.37/include/linux/bio.h',490,497,NULL,NULL,NULL,NULL,'',''),
 (394204,'req_get_ioprio()','D:','/usr/src/linux-2.6.37/include/linux/blkdev.h',168,171,NULL,NULL,NULL,NULL,'',''),
 (394205,'request.ioprio','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394206,'queue_is_locked()','D:','/usr/src/linux-2.6.37/include/linux/blkdev.h',409,417,NULL,NULL,NULL,NULL,'',''),
 (394207,'request_queue.queue_lock','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394208,'queue_flag_set_unlocked()','D:','/usr/src/linux-2.6.37/include/linux/blkdev.h',419,423,NULL,NULL,NULL,NULL,'',''),
 (394209,'request_queue.queue_flags','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394210,'queue_flag_test_and_clear()','D:','/usr/src/linux-2.6.37/include/linux/blkdev.h',425,436,NULL,NULL,NULL,NULL,'',''),
 (394211,'queue_flag_test_and_set()','D:','/usr/src/linux-2.6.37/include/linux/blkdev.h',438,449,NULL,NULL,NULL,NULL,'',''),
 (394212,'queue_flag_set()','D:','/usr/src/linux-2.6.37/include/linux/blkdev.h',451,455,NULL,NULL,NULL,NULL,'',''),
 (394213,'queue_flag_clear_unlocked()','D:','/usr/src/linux-2.6.37/include/linux/blkdev.h',457,461,NULL,NULL,NULL,NULL,'',''),
 (394214,'queue_in_flight()','D:','/usr/src/linux-2.6.37/include/linux/blkdev.h',463,466,NULL,NULL,NULL,NULL,'',''),
 (394215,'request_queue.in_flight[]','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394216,'request_queue.in_flight','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394217,'queue_flag_clear()','D:','/usr/src/linux-2.6.37/include/linux/blkdev.h',468,472,NULL,NULL,NULL,NULL,'',''),
 (394218,'blk_queue_cluster()','D:','/usr/src/linux-2.6.37/include/linux/blkdev.h',511,514,NULL,NULL,NULL,NULL,'',''),
 (394219,'request_queue.limits','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394220,'queue_limits.cluster','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394221,'rw_is_sync()','D:','/usr/src/linux-2.6.37/include/linux/blkdev.h',519,522,NULL,NULL,NULL,NULL,'',''),
 (394222,'rq_is_sync()','D:','/usr/src/linux-2.6.37/include/linux/blkdev.h',524,527,NULL,NULL,NULL,NULL,'',''),
 (394223,'request.cmd_flags','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394224,'blk_queue_full()','D:','/usr/src/linux-2.6.37/include/linux/blkdev.h',529,534,NULL,NULL,NULL,NULL,'',''),
 (394225,'blk_set_queue_full()','D:','/usr/src/linux-2.6.37/include/linux/blkdev.h',536,542,NULL,NULL,NULL,NULL,'',''),
 (394226,'blk_clear_queue_full()','D:','/usr/src/linux-2.6.37/include/linux/blkdev.h',544,550,NULL,NULL,NULL,NULL,'',''),
 (394227,'rq_flush_dcache_pages()','D:','/usr/src/linux-2.6.37/include/linux/blkdev.h',642,644,NULL,NULL,NULL,NULL,'',''),
 (394228,'blk_clear_queue_congested()','D:','/usr/src/linux-2.6.37/include/linux/blkdev.h',684,687,NULL,NULL,NULL,NULL,'',''),
 (394229,'clear_bdi_congested()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394230,'request_queue.backing_dev_info','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394231,'blk_set_queue_congested()','D:','/usr/src/linux-2.6.37/include/linux/blkdev.h',693,696,NULL,NULL,NULL,NULL,'',''),
 (394232,'set_bdi_congested()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394233,'bdev_get_queue()','D:','/usr/src/linux-2.6.37/include/linux/blkdev.h',718,721,NULL,NULL,NULL,NULL,'',''),
 (394234,'block_device.bd_disk','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394235,'gendisk.queue','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394236,'blk_rq_pos()','D:','/usr/src/linux-2.6.37/include/linux/blkdev.h',731,734,NULL,NULL,NULL,NULL,'',''),
 (394237,'request.__sector','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394238,'blk_rq_bytes()','D:','/usr/src/linux-2.6.37/include/linux/blkdev.h',736,739,NULL,NULL,NULL,NULL,'',''),
 (394239,'request.__data_len','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394240,'blk_rq_cur_bytes()','D:','/usr/src/linux-2.6.37/include/linux/blkdev.h',741,744,NULL,NULL,NULL,NULL,'',''),
 (394241,'request.bio','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394242,'blk_rq_sectors()','D:','/usr/src/linux-2.6.37/include/linux/blkdev.h',748,751,NULL,NULL,NULL,NULL,'',''),
 (394243,'blk_rq_cur_sectors()','D:','/usr/src/linux-2.6.37/include/linux/blkdev.h',753,756,NULL,NULL,NULL,NULL,'',''),
 (394244,'blk_map_queue_find_tag()','D:','/usr/src/linux-2.6.37/include/linux/blkdev.h',875,881,NULL,NULL,NULL,NULL,'',''),
 (394245,'blk_queue_tag.real_max_depth','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394246,'blk_queue_tag.tag_index[]','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394247,'blk_queue_tag.tag_index','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394248,'sb_issue_discard()','D:','/usr/src/linux-2.6.37/include/linux/blkdev.h',890,896,NULL,NULL,NULL,NULL,'',''),
 (394249,'blkdev_issue_discard()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394250,'sb_issue_zeroout()','D:','/usr/src/linux-2.6.37/include/linux/blkdev.h',897,904,NULL,NULL,NULL,NULL,'',''),
 (394251,'blkdev_issue_zeroout()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394252,'queue_bounce_pfn()','D:','/usr/src/linux-2.6.37/include/linux/blkdev.h',918,921,NULL,NULL,NULL,NULL,'',''),
 (394253,'queue_limits.bounce_pfn','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394254,'queue_segment_boundary()','D:','/usr/src/linux-2.6.37/include/linux/blkdev.h',923,926,NULL,NULL,NULL,NULL,'',''),
 (394255,'queue_limits.seg_boundary_mask','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394256,'queue_max_sectors()','D:','/usr/src/linux-2.6.37/include/linux/blkdev.h',928,931,NULL,NULL,NULL,NULL,'',''),
 (394257,'queue_limits.max_sectors','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394258,'queue_max_hw_sectors()','D:','/usr/src/linux-2.6.37/include/linux/blkdev.h',933,936,NULL,NULL,NULL,NULL,'',''),
 (394259,'queue_limits.max_hw_sectors','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394260,'queue_max_segments()','D:','/usr/src/linux-2.6.37/include/linux/blkdev.h',938,941,NULL,NULL,NULL,NULL,'',''),
 (394261,'queue_limits.max_segments','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394262,'queue_max_segment_size()','D:','/usr/src/linux-2.6.37/include/linux/blkdev.h',943,946,NULL,NULL,NULL,NULL,'',''),
 (394263,'queue_limits.max_segment_size','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394264,'queue_logical_block_size()','D:','/usr/src/linux-2.6.37/include/linux/blkdev.h',948,956,NULL,NULL,NULL,NULL,'',''),
 (394265,'queue_limits.logical_block_size','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394266,'bdev_logical_block_size()','D:','/usr/src/linux-2.6.37/include/linux/blkdev.h',958,961,NULL,NULL,NULL,NULL,'',''),
 (394267,'queue_physical_block_size()','D:','/usr/src/linux-2.6.37/include/linux/blkdev.h',963,966,NULL,NULL,NULL,NULL,'',''),
 (394268,'queue_limits.physical_block_size','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394269,'bdev_physical_block_size()','D:','/usr/src/linux-2.6.37/include/linux/blkdev.h',968,971,NULL,NULL,NULL,NULL,'',''),
 (394270,'queue_io_min()','D:','/usr/src/linux-2.6.37/include/linux/blkdev.h',973,976,NULL,NULL,NULL,NULL,'',''),
 (394271,'queue_limits.io_min','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394272,'bdev_io_min()','D:','/usr/src/linux-2.6.37/include/linux/blkdev.h',978,981,NULL,NULL,NULL,NULL,'',''),
 (394273,'queue_io_opt()','D:','/usr/src/linux-2.6.37/include/linux/blkdev.h',983,986,NULL,NULL,NULL,NULL,'',''),
 (394274,'queue_limits.io_opt','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394275,'bdev_io_opt()','D:','/usr/src/linux-2.6.37/include/linux/blkdev.h',988,991,NULL,NULL,NULL,NULL,'',''),
 (394276,'queue_alignment_offset()','D:','/usr/src/linux-2.6.37/include/linux/blkdev.h',993,999,NULL,NULL,NULL,NULL,'',''),
 (394277,'queue_limits.misaligned','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394278,'queue_limits.alignment_offset','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394279,'queue_limit_alignment_offset()','D:','/usr/src/linux-2.6.37/include/linux/blkdev.h',1001,1008,NULL,NULL,NULL,NULL,'',''),
 (394280,'bdev_alignment_offset()','D:','/usr/src/linux-2.6.37/include/linux/blkdev.h',1010,1021,NULL,NULL,NULL,NULL,'',''),
 (394281,'block_device.bd_contains','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394282,'hd_struct.alignment_offset','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394283,'queue_discard_alignment()','D:','/usr/src/linux-2.6.37/include/linux/blkdev.h',1023,1029,NULL,NULL,NULL,NULL,'',''),
 (394284,'queue_limits.discard_misaligned','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394285,'queue_limits.discard_alignment','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394286,'queue_limit_discard_alignment()','D:','/usr/src/linux-2.6.37/include/linux/blkdev.h',1031,1037,NULL,NULL,NULL,NULL,'',''),
 (394287,'queue_limits.discard_granularity','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394288,'queue_discard_zeroes_data()','D:','/usr/src/linux-2.6.37/include/linux/blkdev.h',1039,1045,NULL,NULL,NULL,NULL,'',''),
 (394289,'queue_limits.discard_zeroes_data','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394290,'bdev_discard_zeroes_data()','D:','/usr/src/linux-2.6.37/include/linux/blkdev.h',1047,1050,NULL,NULL,NULL,NULL,'',''),
 (394291,'queue_dma_alignment()','D:','/usr/src/linux-2.6.37/include/linux/blkdev.h',1052,1055,NULL,NULL,NULL,NULL,'',''),
 (394292,'request_queue.dma_alignment','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394293,'blk_rq_aligned()','D:','/usr/src/linux-2.6.37/include/linux/blkdev.h',1057,1062,NULL,NULL,NULL,NULL,'',''),
 (394294,'request_queue.dma_pad_mask','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394295,'blksize_bits()','D:','/usr/src/linux-2.6.37/include/linux/blkdev.h',1065,1073,NULL,NULL,NULL,NULL,'',''),
 (394296,'block_size()','D:','/usr/src/linux-2.6.37/include/linux/blkdev.h',1075,1078,NULL,NULL,NULL,NULL,'',''),
 (394297,'block_device.bd_block_size','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394298,'put_dev_sector()','D:','/usr/src/linux-2.6.37/include/linux/blkdev.h',1084,1087,NULL,NULL,NULL,NULL,'',''),
 (394299,'Sector.v','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394300,'set_start_time_ns()','D:','/usr/src/linux-2.6.37/include/linux/blkdev.h',1123,1123,NULL,NULL,NULL,NULL,'',''),
 (394301,'set_io_start_time_ns()','D:','/usr/src/linux-2.6.37/include/linux/blkdev.h',1124,1124,NULL,NULL,NULL,NULL,'',''),
 (394302,'rq_start_time_ns()','D:','/usr/src/linux-2.6.37/include/linux/blkdev.h',1125,1128,NULL,NULL,NULL,NULL,'',''),
 (394303,'rq_io_start_time_ns()','D:','/usr/src/linux-2.6.37/include/linux/blkdev.h',1129,1132,NULL,NULL,NULL,NULL,'',''),
 (394304,'blk_throtl_bio()','D:','/usr/src/linux-2.6.37/include/linux/blkdev.h',1142,1145,NULL,NULL,NULL,NULL,'',''),
 (394305,'blk_throtl_init()','D:','/usr/src/linux-2.6.37/include/linux/blkdev.h',1147,1147,NULL,NULL,NULL,NULL,'',''),
 (394306,'blk_throtl_exit()','D:','/usr/src/linux-2.6.37/include/linux/blkdev.h',1148,1148,NULL,NULL,NULL,NULL,'',''),
 (394307,'throtl_schedule_delayed_work()','D:','/usr/src/linux-2.6.37/include/linux/blkdev.h',1149,1149,NULL,NULL,NULL,NULL,'',''),
 (394308,'throtl_shutdown_timer_wq()','D:','/usr/src/linux-2.6.37/include/linux/blkdev.h',1150,1150,NULL,NULL,NULL,NULL,'',''),
 (394309,'bdev_get_integrity()','D:','/usr/src/linux-2.6.37/include/linux/blkdev.h',1204,1208,NULL,NULL,NULL,NULL,'',''),
 (394310,'gendisk.integrity','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394311,'blk_get_integrity()','D:','/usr/src/linux-2.6.37/include/linux/blkdev.h',1210,1213,NULL,NULL,NULL,NULL,'',''),
 (394312,'blk_integrity_rq()','D:','/usr/src/linux-2.6.37/include/linux/blkdev.h',1215,1221,NULL,NULL,NULL,NULL,'',''),
 (394313,'bio.bi_integrity','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394314,'blk_queue_max_integrity_segments()','D:','/usr/src/linux-2.6.37/include/linux/blkdev.h',1223,1227,NULL,NULL,NULL,NULL,'',''),
 (394315,'queue_limits.max_integrity_segments','S:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394316,'queue_max_integrity_segments()','D:','/usr/src/linux-2.6.37/include/linux/blkdev.h',1229,1233,NULL,NULL,NULL,NULL,'',''),
 (394317,'snapshot_end_io_write()','D:','/usr/src/linux-2.6.37/fs/emmcfs/data.c',37,62,'static void snapshot_end_io_write(struct bio *bio, int err)\r\n{\r\n	const int uptodate = test_bit(BIO_UPTODATE, &bio->bi_flags);\r\n	struct bio_vec *bvec = bio->bi_io_vec + bio->bi_vcnt - 1;\r\n\r\n	do {\r\n		struct page *page = bvec->bv_page;\r\n\r\n		if (--bvec >= bio->bi_io_vec)\r\n			prefetchw(&bvec->bv_page->flags);\r\n		if (!uptodate) {\r\n			SetPageError(page);\r\n			if (page->mapping)\r\n				set_bit(AS_EIO, &page->mapping->flags);\r\n			BUG();\r\n		}\r\n		/*end_page_writeback(page);*/\r\n		unlock_page(page);\r\n		__free_pages(page, 0);\r\n\r\n	} while (bvec >= bio->bi_io_vec);\r\n\r\n	if (bio->bi_private)\r\n		complete(bio->bi_private);\r\n	bio_put(bio);\r\n}','Memory layer\n\nNo pre check\nNo logging\nPost check BUG\n\nCopy of end_io_write()\n','6','17','',''),
 (394318,'bio.bi_flags','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394319,'__free_pages()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394320,'bio.bi_private','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394321,'complete()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394322,'bio_put()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394323,'end_io_write()','D:','/usr/src/linux-2.6.37/fs/emmcfs/data.c',65,87,'static void end_io_write(struct bio *bio, int err)\r\n{\r\n	const int uptodate = test_bit(BIO_UPTODATE, &bio->bi_flags);\r\n	struct bio_vec *bvec = bio->bi_io_vec + bio->bi_vcnt - 1;\r\n\r\n	do {\r\n		struct page *page = bvec->bv_page;\r\n\r\n		if (--bvec >= bio->bi_io_vec)\r\n			prefetchw(&bvec->bv_page->flags);\r\n		if (!uptodate) {\r\n			SetPageError(page);\r\n			if (page->mapping)\r\n				set_bit(AS_EIO, &page->mapping->flags);\r\n			BUG();\r\n		}\r\n		/*end_page_writeback(page);*/\r\n	} while (bvec >= bio->bi_io_vec);\r\n\r\n	if (bio->bi_private)\r\n		complete(bio->bi_private);\r\n	bio_put(bio);\r\n}','Memory layer\n\nNo pre check\nNo logging\nPost check BUG()','6','15','',''),
 (394324,'read_end_io()','D:','/usr/src/linux-2.6.37/fs/emmcfs/data.c',89,110,'static void read_end_io(struct bio *bio, int err)\r\n{\r\n	const int uptodate = test_bit(BIO_UPTODATE, &bio->bi_flags);\r\n	struct bio_vec *bvec = bio->bi_io_vec + bio->bi_vcnt - 1;\r\n	struct completion *wait = bio->bi_private;\r\n\r\n	do {\r\n		struct page *page = bvec->bv_page;\r\n\r\n		if (--bvec >= bio->bi_io_vec)\r\n			prefetchw(&bvec->bv_page->flags);\r\n\r\n		if (uptodate) {\r\n			SetPageUptodate(page);\r\n		} else {\r\n			ClearPageUptodate(page);\r\n			SetPageError(page);\r\n		}\r\n	} while (bvec >= bio->bi_io_vec);\r\n	complete(wait);\r\n	bio_put(bio);\r\n}','Memory layer\n\nNo pre check\nNo logging\nNo post check\n','4','14','',''),
 (394325,'allocate_new_bio()','D:','/usr/src/linux-2.6.37/fs/emmcfs/data.c',118,139,'/**\r\n* @brief allocate new bio\r\n* @bdev		: emmcfs super-block information\r\n* @first_sector	: bio first sector\r\n* @nr_vecs	: bio pages number\r\n*/\r\nstruct bio *allocate_new_bio(struct block_device *bdev, sector_t first_sector,\r\n		int nr_vecs)\r\n{\r\n	/*int nr_vecs;*/\r\n	gfp_t gfp_flags = GFP_NOFS|__GFP_HIGH;\r\n	struct bio *bio;\r\n\r\n	/*nr_vecs = bio_get_nr_vecs(bdev);*/\r\n	bio = bio_alloc(gfp_flags, nr_vecs);\r\n\r\n	if (bio == NULL && (current->flags & PF_MEMALLOC)) {\r\n		while (!bio && (nr_vecs /= 2))\r\n			bio = bio_alloc(gfp_flags, nr_vecs);\r\n	}\r\n\r\n	if (bio) {\r\n		bio->bi_bdev = bdev;\r\n		bio->bi_sector = first_sector;\r\n	}\r\n\r\n	return bio;\r\n}','Object layer\nFSM layer\nSwitching layer\nParser layer\n\nNo pre check\nNo logging\nNo post check\n\n','6','10','',''),
 (394326,'bio_alloc()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394327,'task_struct.flags','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394328,'bio.bi_bdev','S:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394329,'bio.bi_sector','S:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394330,'emmcfs_write_snapshot_pages()','D:','/usr/src/linux-2.6.37/fs/emmcfs/data.c',155,204,'/**\r\n * @brief write page to the given sector address\r\n * @bdev:		emmcfs super-block information\r\n * @page:		pointer to locked page\r\n * @sectour_addr:	sector address\r\n * @page_count:		page count to write\r\n * @mode\r\n *\r\n * Write the locked page to the sector address.\r\n * write operation is synchronous, and caller must unlock the page.\r\n *\r\n * Returns 0 on success, errno on failure\r\n */\r\nint emmcfs_write_snapshot_pages(struct block_device *bdev,\r\n			struct page **pages,\r\n			sector_t start_sector,\r\n			unsigned int page_count,\r\n			int mode)\r\n{\r\n	struct bio *bio;\r\n	int count;\r\n	unsigned int full_size = page_count << PAGE_CACHE_SHIFT;\r\n#if LINUX_VERSION_CODE == KERNEL_VERSION(3, 0, 20)\r\n	struct blk_plug plug;\r\n	blk_start_plug(&plug);\r\n#endif\r\n	/* Allocate a new bio */\r\n	bio = allocate_new_bio(bdev, start_sector, page_count);\r\n	/* Initialize the bio */\r\n	/*FIXME  check : all pages fit to bio or not*/\r\n	bio->bi_end_io = snapshot_end_io_write;\r\n\r\n	for (count = 0; count < page_count; count++)\r\n		full_size -= bio_add_page(bio, pages[count],\r\n				PAGE_CACHE_SIZE, 0);\r\n\r\n	if (full_size) {\r\n		EMMCFS_ERR(\"FAIL to add pages to BIO\");\r\n/*ig		BUG_ON(1);\r */\n	}\r\n\r\n	if (mode) {\r\n/*ig		DECLARE_COMPLETION_ONSTACK(wait);\r \n		bio->bi_private = &wait;\r*/\n/*ig		submit_bio(WRITE_BARRIER, bio);\r*/\n/*ig		submit_bio(0, bio);\r */\n/*ig		wait_for_completion(&wait);\r */\n	} else {\r\n/*ig		submit_bio(WRITE, bio);\r */\n	}\r\n\r\n#if LINUX_VERSION_CODE == KERNEL_VERSION(3, 0, 20)\r\n		blk_finish_plug(&plug);\r\n#endif\r\n	return 0;\r\n}','Memory layer\n\nNo pre check\nNo logging\nPost check EMMCFS_ERR, BUG_ON','4','22','',''),
 (394331,'bio.bi_end_io','S:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394332,'snapshot_end_io_write','g:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394333,'bio_add_page()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394334,'emmcfs_read_pages()','D:','/usr/src/linux-2.6.37/fs/emmcfs/data.c',219,266,'/**\r\n * @brief read page from the given sector address\r\n * @bdev:		pointer to block device\r\n * @page:		pointer to locked pages\r\n * @sectour_addr:	sector address\r\n * @sector_count:	sector count to read\r\n * @offset:		offset in page\r\n *\r\n * Fill the locked page with data located in the sector address.\r\n * Read operation is synchronous, and caller must unlock the page.\r\n *\r\n * Returns 0 on success, errno on failure\r\n */\r\nint emmcfs_read_pages(struct block_device *bdev,\r\n			struct page **page,\r\n			sector_t sector_addr,\r\n			unsigned int page_count)\r\n{\r\n	struct bio *bio;\r\n	struct completion wait;\r\n	int count;\r\n#if LINUX_VERSION_CODE == KERNEL_VERSION(3, 0, 20)\r\n	struct blk_plug plug;\r\n#endif\r\n\r\n	/* TODO : check is this necessary?*/\r\n	/* This page can be already read by other threads */\r\n	/*if (PageUptodate(page))\r\n		return 0;*/\r\n\r\n#if LINUX_VERSION_CODE == KERNEL_VERSION(3, 0, 20)\r\n	blk_start_plug(&plug);\r\n#endif\r\n	init_completion(&wait);\r\n\r\n	/* Allocate a new bio */\r\n	bio = allocate_new_bio(bdev, sector_addr, page_count);\r\n\r\n	/* Initialize the bio */\r\n	for (count = 0; count < page_count; count++) {\r\n		bio->bi_end_io = read_end_io;\r\n		if (bio_add_page(bio, page[count], PAGE_CACHE_SIZE, 0)\r\n				< PAGE_CACHE_SIZE) {\r\n			EMMCFS_ERR(\"FAIL to add page to BIO\");\r\n			bio_put(bio);\r\n#if LINUX_VERSION_CODE == KERNEL_VERSION(3, 0, 20)\r\n			blk_finish_plug(&plug);\r\n#endif\r\n			return -EFAULT;\r\n		}\r\n	}\r\n	bio->bi_private = &wait;\r\n	submit_bio(READ, bio);\r\n\r\n	/* Synchronous read operation */\r\n	wait_for_completion(&wait);\r\n#if LINUX_VERSION_CODE == KERNEL_VERSION(3, 0, 20)\r\n	blk_finish_plug(&plug);\r\n#endif\r\n	return 0;\r\n}','Memory layer\n\nNo pre check\nNo logging\nPost check EMMCFS_ERR, -EFAULT\n\nCopy of emmcfs_read_page with loop\n','3','21','',''),
 (394335,'read_end_io','g:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394336,'submit_bio()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394337,'wait_for_completion()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394338,'emmcfs_read_page()','D:','/usr/src/linux-2.6.37/fs/emmcfs/data.c',282,329,'/**\r\n * @brief read page from the given sector address\r\n * @bdev:		pointer to block device\r\n * @page:		pointer to locked page\r\n * @sectour_addr:	sector address\r\n * @sector_count:	sector count to read\r\n * @offset:		offset in page\r\n *\r\n * Fill the locked page with data located in the sector address.\r\n * Read operation is synchronous, and caller must unlock the page.\r\n *\r\n * Returns 0 on success, errno on failure\r\n */\r\nint emmcfs_read_page(struct block_device *bdev,\r\n			struct page *page,\r\n			sector_t sector_addr,\r\n			unsigned int sector_count,\r\n			unsigned int offset)\r\n{\r\n	struct bio *bio;\r\n	struct completion wait;\r\n#if LINUX_VERSION_CODE == KERNEL_VERSION(3, 0, 20)\r\n	struct blk_plug plug;\r\n#endif\r\n\r\n	if (sector_count > SECTOR_PER_PAGE + 1)\r\n		return -EINVAL;\r\n\r\n	/* TODO */\r\n	/* This page can be already read by other threads */\r\n	if (PageUptodate(page))\r\n		return 0;\r\n#if LINUX_VERSION_CODE == KERNEL_VERSION(3, 0, 20)\r\n	blk_start_plug(&plug);\r\n#endif\r\n	init_completion(&wait);\r\n\r\n	/* Allocate a new bio */\r\n	bio = allocate_new_bio(bdev, sector_addr, 1);\r\n\r\n	/* Initialize the bio */\r\n	bio->bi_end_io = read_end_io;\r\n	if (bio_add_page(bio, page, SECTOR_SIZE * sector_count, offset)\r\n			< SECTOR_SIZE * sector_count) {\r\n		EMMCFS_ERR(\"FAIL to add page to BIO\");\r\n		bio_put(bio);\r\n#if LINUX_VERSION_CODE == KERNEL_VERSION(3, 0, 20)\r\n		blk_finish_plug(&plug);\r\n#endif\r\n		return -EFAULT;\r\n	}\r\n	bio->bi_private = &wait;\r\n	submit_bio(READ, bio);\r\n\r\n	/* Synchronous read operation */\r\n	wait_for_completion(&wait);\r\n#if LINUX_VERSION_CODE == KERNEL_VERSION(3, 0, 20)\r\n	blk_finish_plug(&plug);\r\n#endif\r\n	return 0;\r\n}','Memory layer\n\nPre check -EINVAL\nNo logging\nPost check EMMCFS_ERR, -EFAULT','4','21','',''),
 (394339,'emmcfs_write_page()','D:','/usr/src/linux-2.6.37/fs/emmcfs/data.c',343,397,'/**\r\n * @brief write page to the given sector address\r\n * @bdev:		emmcfs super-block information\r\n * @page:		pointer to locked page\r\n * @sectour_addr:	sector address\r\n * @sector_count:	sector count to write\r\n *\r\n * Write the locked page to the sector address.\r\n * write operation is synchronous, and caller must unlock the page.\r\n *\r\n * Returns 0 on success, errno on failure\r\n */\r\nint emmcfs_write_page(struct block_device *bdev,\r\n			struct page *page,\r\n			sector_t sector_addr,\r\n			unsigned int sector_count,\r\n			unsigned int offset)\r\n{\r\n	struct bio *bio;\r\n	struct completion wait;\r\n#if LINUX_VERSION_CODE == KERNEL_VERSION(3, 0, 20)\r\n	struct blk_plug plug;\r\n#endif\r\n\r\n	if (sector_count > SECTOR_PER_PAGE)\r\n		return -EINVAL;\r\n\r\n#if LINUX_VERSION_CODE == KERNEL_VERSION(3, 0, 20)\r\n	blk_start_plug(&plug);\r\n#endif\r\n	init_completion(&wait);\r\n\r\n	/* Allocate a new bio */\r\n	bio = allocate_new_bio(bdev, sector_addr, 1);\r\n\r\n	/* Initialize the bio */\r\n	bio->bi_end_io = end_io_write;\r\n	if (bio_add_page(bio, page, SECTOR_SIZE * sector_count, offset)\r\n			< SECTOR_SIZE * sector_count) {\r\n		EMMCFS_ERR(\"FAIL to add page to BIO\");\r\n		bio_put(bio);\r\n#if LINUX_VERSION_CODE == KERNEL_VERSION(3, 0, 20)\r\n		blk_finish_plug(&plug);\r\n#endif\r\n		return -EFAULT;\r\n	}\r\n	bio->bi_private = &wait;\r\n\r\n/*ig#if LINUX_VERSION_CODE == KERNEL_VERSION(2, 6, 35)\r*/\n/*ig	submit_bio(SWRITE_SYNC, bio);\r*/\n/*ig	submit_bio(0, bio);\r */\n/*ig#elif LINUX_VERSION_CODE == KERNEL_VERSION(3, 0, 20)\r\n	submit_bio(WRITE_FLUSH_FUA, bio);\r\n#else\r\n	BUILD_BUG();\r\n#endif\r\n*/\n	/* Synchronous write operation */\r\n	wait_for_completion(&wait);\r\n#if LINUX_VERSION_CODE == KERNEL_VERSION(3, 0, 20)\r\n	blk_finish_plug(&plug);\r\n#endif\r\n	return 0;\r\n}','Memory layer\n\nPre check -EINVAL\nNo logging\nPost check EMMCFS_ERR, -EFAULT, BUILD_BUG','3','21','','');
INSERT INTO `emmcfs`.`element` VALUES  (394340,'end_io_write','g:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394341,'*bio.bi_end_io()','D:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394342,'emmcfs_exttree_cmpfn()','D:','/usr/src/linux-2.6.37/fs/emmcfs/extents.c',27,50,'int emmcfs_exttree_cmpfn(struct emmcfs_generic_key *__key1,\r\n		struct emmcfs_generic_key *__key2)\r\n{\r\n	struct emmcfs_exttree_key *key1, *key2;\r\n\r\n#ifdef __NCC__\n/*ig	key1 = container_of(__key1, struct emmcfs_exttree_key, gen_key);\r\n	key2 = container_of(__key2, struct emmcfs_exttree_key, gen_key);\r */\n	key1 = __key1;\r\n	key2 = __key2;\r\n#else\n	key1 = container_of(__key1, struct emmcfs_exttree_key, gen_key);\r\n	key2 = container_of(__key2, struct emmcfs_exttree_key, gen_key);\r\n#endif\n\n\r\n	if ((key1->object_id != key2->object_id) ||\r\n			(le32_to_cpu(key2->iblock) == -1))\r\n		return le32_to_cpu(key1->object_id) -\r\n			le32_to_cpu(key2->object_id);\r\n\r\n	return le32_to_cpu(key1->iblock) - le32_to_cpu(key2->iblock);\r\n}\r\n','Switching layer\nFSM layer\n\nNo pre check\nNo logging\nNo post check\n','3','6','',''),
 (394343,'emmcfs_exttree_key.object_id','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394344,'emmcfs_exttree_key.iblock','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394345,'emmcfs_exttree_add()','D:','/usr/src/linux-2.6.37/fs/emmcfs/extents.c',52,87,'int emmcfs_exttree_add(struct emmcfs_inode_info *inode_info, sector_t iblock,\r\n		sector_t start_block, sector_t block_count)\r\n{\r\n	struct emmcfs_sb_info *sbi = inode_info->vfs_inode.i_sb->s_fs_info;\r\n	struct emmcfs_exttree_record *record;\r\n	int ret = 0;\r\n\r\n	record = kzalloc(sizeof(*record), GFP_KERNEL);\r\n	if (!record)\r\n		return -ENOMEM;\r\n\r\n	/* Fill the key */\r\n	memcpy(record->key.gen_key.magic, EMMCFS_EXTTREE_KEY_MAGIC,\r\n			sizeof(EMMCFS_EXTTREE_KEY_MAGIC));\r\n	record->key.gen_key.key_len = cpu_to_le32(sizeof(record->key));\r\n	record->key.gen_key.record_len = cpu_to_le32(sizeof(*record));\r\n	record->key.object_id = cpu_to_le64(inode_info->vfs_inode.i_ino);\r\n	record->key.iblock = cpu_to_le64(iblock);\r\n\r\n	/* Fill the extent */\r\n	record->lextent.begin = cpu_to_le64(start_block);\r\n	record->lextent.in_blocks_or_lebs.length = cpu_to_le32(block_count);\r\n	record->lextent.magic = EMMCFS_EXTENT_MAGIC;\r\n	record->lextent.flags = EMMCFS_BLOCK_EXTENT;\r\n\r\n	EMMCFS_DEBUG_MUTEX(\"exttree mutex w lock\");\r\n	mutex_w_lock(sbi->extents_tree->rw_tree_lock);\r\n	EMMCFS_DEBUG_MUTEX(\"exttree mutex w lock succ\");\r\n	ret = emmcfs_btree_insert(sbi->extents_tree, record);\r\n	EMMCFS_DEBUG_MUTEX(\"exttree mutex w lock un\");\r\n	mutex_w_unlock(sbi->extents_tree->rw_tree_lock);\r\n\r\n	EMMCFS_DEBUG_INO(\"exit with code %d\", ret);\r\n\r\n	return ret;\r\n}','Object level\nswitching level (struct)\nCall parser and memory level\n\nDebug logging\nObject constructor (mem)\n\n','2','23','BUFFER_SIZE','overrun-buffer-arg : \"Overrun of static array \"\"&record->key.gen_key.magic\"\" of size 4 bytes by passing it to a function which indexes it with argument \"\"5U\"\" at byte position 4\"\r\nbuffer_size : \"Possible overrun of destination buffer \"\"record->key.gen_key.magic\"\" (4 bytes) by \"\"\"\"ExtK\"\"\"\" due to maximum size argument (5)\"\r\n'),
 (394346,'emmcfs_inode_info.vfs_inode','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394347,'emmcfs_exttree_record.key','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394348,'emmcfs_exttree_key.gen_key','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394349,'emmcfs_generic_key.magic','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394350,'emmcfs_exttree_record.lextent','S:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394351,'down_write()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394352,'emmcfs_sb_info.extents_tree','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394353,'emmcfs_btree.rw_tree_lock','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394354,'up_write()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394355,'emmcfs_extent_find()','D:','/usr/src/linux-2.6.37/fs/emmcfs/extents.c',89,109,'struct emmcfs_bnode *emmcfs_extent_find(struct emmcfs_inode_info *inode_info,\r\n		sector_t iblock, int *pos, enum emmcfs_get_bnode_mode mode)\r\n{\r\n	struct emmcfs_sb_info *sbi = inode_info->vfs_inode.i_sb->s_fs_info;\r\n	struct emmcfs_exttree_key *key;\r\n	struct emmcfs_bnode *bnode;\r\n\r\n	key = kzalloc(sizeof(*key), GFP_KERNEL);\r\n	if (!key)\r\n		return ERR_PTR(-ENOMEM);\r\n\r\n	key->object_id = cpu_to_le64(inode_info->vfs_inode.i_ino);\r\n	key->iblock = cpu_to_le64(iblock);\r\n\r\n	bnode = emmcfs_btree_find(sbi->extents_tree, &key->gen_key, pos, mode);\r\n	if (!bnode)\r\n		goto pass;\r\n\r\npass:	kfree(key);\r\n	return bnode;\r\n}','Object layer\nSwitching layer\nParser layer\n\nNo pre check\nNo logging\nPost check ERR_PTR, -ENOMEM\n','3','13','',''),
 (394356,'emmcfs_exttree_get_block()','D:','/usr/src/linux-2.6.37/fs/emmcfs/extents.c',111,136,'sector_t emmcfs_exttree_get_block(struct emmcfs_inode_info *inode_info,\r\n				  sector_t iblock, __u32 *max_blocks)\r\n{\r\n	sector_t rc = 0;\r\n	struct emmcfs_bnode *bnode;\r\n	struct emmcfs_exttree_record *record;\r\n	int pos = 0;\r\n	__u64 object_id  = inode_info->vfs_inode.i_ino;\r\n\r\n	bnode = emmcfs_extent_find(inode_info, iblock, &pos,\r\n				   EMMCFS_BNODE_MODE_RO);\r\n	if (!bnode)\r\n		return 0;\r\n\r\n	record = emmcfs_get_btree_record(bnode, pos);\r\n\r\n	if (record->key.object_id != object_id)\r\n		goto out;\r\n\r\n	rc = le64_to_cpu(record->lextent.begin) + (iblock - record->key.iblock);\r\n	*max_blocks = le32_to_cpu(record->lextent.in_blocks_or_lebs.length) -\r\n		(iblock - record->key.iblock);\r\nout:\r\n	emmcfs_put_bnode(bnode);\r\n	return rc;\r\n}','FSM layer\nSwitching layer\n\nNo pre check\nNo logging\nNo post check\n','3','15','',''),
 (394357,'emmcfs_exttree_add_block()','D:','/usr/src/linux-2.6.37/fs/emmcfs/extents.c',138,185,'sector_t emmcfs_exttree_add_block(struct emmcfs_inode_info *inode_info,\r\n				  sector_t iblock, int cnt)\r\n{\r\n	struct emmcfs_bnode *bnode;\r\n	struct emmcfs_exttree_record *record;\r\n	int pos = 0;\r\n	sector_t rc = 0;\r\n	__u64 object_id  = inode_info->vfs_inode.i_ino;\r\n	struct emmcfs_sb_info	*sbi = inode_info->vfs_inode.i_sb->s_fs_info;\r\n\r\n	bnode = emmcfs_extent_find(inode_info, iblock, &pos,\r\n			EMMCFS_BNODE_MODE_RW);\r\n	if (!bnode)\r\n		return 0;\r\n\r\n	record = emmcfs_get_btree_record(bnode, pos);\r\n\r\n	if (record->key.object_id == object_id) {\r\n		__u64 tmp = le64_to_cpu(record->lextent.begin) +\r\n			le32_to_cpu(record->lextent.in_blocks_or_lebs.length);\r\n		rc = emmcfs_get_free_block(sbi->fsm_info, tmp, cnt);\r\n		if (rc == 0)\r\n			goto out;\r\n\r\n		if (rc == tmp) {\r\n			record->lextent.in_blocks_or_lebs.length =\r\n				cpu_to_le32(\r\n				le32_to_cpu(\r\n				record->lextent.in_blocks_or_lebs.length)+1);\r\n			emmcfs_mark_bnode_dirty(bnode);\r\n			goto out;\r\n		} else {\r\n			emmcfs_put_bnode(bnode);\r\n			return emmcfs_exttree_add(inode_info, iblock, rc, cnt) ?\r\n				0 : rc;\r\n		}\r\n	} else {\r\n		emmcfs_put_bnode(bnode);\r\n		rc = emmcfs_get_free_block(sbi->fsm_info,\r\n			sbi->fsm_info->free_space_start, cnt);\r\n		if (rc == 0)\r\n			goto out;\r\n		return emmcfs_exttree_add(inode_info, iblock, rc, cnt) ? 0 : rc;\r\n	}\r\nout:\r\n	emmcfs_put_bnode(bnode);\r\n	return rc;\r\n}','Object level','8','30','USE_AFTER_FREE','deref_arg : \"Dereferencing freed pointer \"\"bnode\"\" in call to function \"\"emmcfs_put_bnode\"\"\"\r\n'),
 (394358,'emmcfs_get_free_block()','F:','/usr/src/linux-2.6.37/fs/emmcfs/fsm.c',33,75,'__u64 emmcfs_get_free_block(struct emmcfs_fsm_info *fsm,\r\n	__u64 block_offset, __u64 length_in_blocks)\r\n{\r\n	__u64 rc = 0;\r\n	__u32 i;\r\n	__u64 start_page = block_offset >> (PAGE_SHIFT + 3),\r\n		end_page = (block_offset + length_in_blocks) >>\r\n		(PAGE_SHIFT + 3), page_index;\r\n\r\n	BUG_ON((start_page >= fsm->page_count) ||\r\n	       (end_page >= fsm->page_count));\r\n\r\n	EMMCFS_ADD_CHUNK(fsm->leb_bitmap_inode, &fsm->pages[start_page],\r\n			end_page - start_page + 1);\r\n\r\n	for (page_index = start_page; page_index <= end_page; page_index++)\r\n		lock_page(fsm->pages[page_index]);\r\n\r\n	spin_lock(&fsm->lock);\r\n	rc = fsm_btree_lookup(&fsm->tree, block_offset, length_in_blocks);\r\n	if (rc) {\r\n		fsm->sbi->free_blocks_count -= length_in_blocks;\r\n		for (i = 0; i < length_in_blocks; i++) {\r\n			__u32 index = rc + i;\r\n			if (index < (fsm->length_in_bytes<<3)) {\r\n				if (test_and_set_bit(index, (void *)fsm->data))\r\n					EMMCFS_DEBUG_FSM(\r\n						\"GFB1 off %llu\\tlen %llu \",\r\n						block_offset, length_in_blocks);\r\n			} else {\r\n				EMMCFS_DEBUG_FSM(\"GFB2 off %llu\\tlen %llu \",\r\n					block_offset, length_in_blocks);\r\n				break;\r\n			}\r\n		}\r\n	}\r\n	spin_unlock(&fsm->lock);\r\n	for (page_index = start_page; page_index <= end_page; page_index++) {\r\n		set_page_dirty(fsm->pages[page_index]);\r\n		unlock_page(fsm->pages[page_index]);\r\n	}\r\n	return rc;\r\n}','check pre condition BUG_ON for border of page count.\nEMMCFS_DEBUG_FSM - logging\nno post check\nMagic numbers are not made ??to the configuration\nObject and FSM - level\nDestructor objects at the end','8','29','',''),
 (394359,'emmcfs_sb_info.fsm_info','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394360,'emmcfs_fsm_info.free_space_start','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394361,'emmcfs_truncate_blocks()','D:','/usr/src/linux-2.6.37/fs/emmcfs/file.c',23,110,'void emmcfs_truncate_blocks(struct inode *inode, loff_t offset)\r\n{\r\n	int i;\r\n	struct emmcfs_inode_info *inode_info = EMMCFS_I(inode);\r\n	struct emmcfs_fork_info *fork = &inode_info->fork;\r\n	struct emmcfs_sb_info	*sbi = inode->i_sb->s_fs_info;\r\n	struct emmcfs_exttree_key *key = 0;\r\n\r\n	if (S_ISDIR(inode->i_mode))\r\n		return;\r\n	if (offset)\r\n		return; /*todo partial (set_size instead of rm) truncate*/\r\n\r\n	if (fork->used_extents == EMMCFS_EXTENTS_COUNT_IN_FORK) {\r\n		/*clearing extents overflow*/\r\n		key = kzalloc(sizeof(*key), GFP_KERNEL);\r\n		while (true) {\r\n			__u64 object_id  = inode->i_ino;\r\n			__u64 iblock = 0;\r\n			struct emmcfs_bnode *bnode;\r\n			struct emmcfs_gen_node_descr *node;\r\n			struct emmcfs_exttree_record *record;\r\n			int pos = 0;\r\n\r\n			EMMCFS_DEBUG_MUTEX(\"exttree mutex w lock\");\r\n			mutex_w_lock(sbi->extents_tree->rw_tree_lock);\r\n			EMMCFS_DEBUG_MUTEX(\"exttree mutex w lock succ\");\r\n			bnode = emmcfs_extent_find(inode_info, -1, &pos,\r\n					EMMCFS_BNODE_MODE_RW);\r\n			if (!bnode) {\r\n				EMMCFS_DEBUG_MUTEX(\"exttree mutex w lock un\");\r\n				mutex_w_unlock(sbi->extents_tree->rw_tree_lock);\r\n				goto pass;\r\n			}\r\n			node = bnode->data;\r\n			if (!node) {\r\n				emmcfs_put_bnode(bnode);\r\n				EMMCFS_DEBUG_MUTEX(\"exttree mutex w lock un\");\r\n				mutex_w_unlock(sbi->extents_tree->rw_tree_lock);\r\n				goto pass;\r\n			}\r\n			record = emmcfs_get_btree_record(bnode, pos);\r\n\r\n			if (record->key.object_id != object_id) {\r\n				emmcfs_put_bnode(bnode);\r\n				EMMCFS_DEBUG_MUTEX(\"exttree mutex w lock un\");\r\n				mutex_w_unlock(sbi->extents_tree->rw_tree_lock);\r\n				goto pass;\r\n			}\r\n			iblock = record->key.iblock;\r\n			emmcfs_put_free_block(sbi->fsm_info,\r\n				le64_to_cpu(record->lextent.begin),\r\n				le32_to_cpu(\r\n				record->lextent.in_blocks_or_lebs.length));\r\n\r\n			emmcfs_put_bnode(bnode);\r\n\r\n			key->object_id = object_id;\r\n			key->iblock = iblock;\r\n\r\n			emmcfs_btree_remove(sbi->extents_tree,\r\n					    (struct emmcfs_generic_key *)key);\r\n			EMMCFS_DEBUG_MUTEX(\"exttree mutex w lock un\");\r\n			mutex_w_unlock(sbi->extents_tree->rw_tree_lock);\r\n		}\r\n	}\r\npass:\r\n\r\n	kfree(key);\r\n	if (fork->total_block_count == 0) {\r\n		fork->used_extents = 0;\r\n		for (i = 0; i < 9; i++) {\r\n			fork->extents[i].first_block = 0;\r\n			fork->extents[i].block_count = 0;\r\n		}\r\n	}\r\n	for (i = 0; i < fork->used_extents; i++) {\r\n		if (fork->extents[i].block_count) {\r\n			emmcfs_put_free_block(sbi->fsm_info,\r\n					      fork->extents[i].first_block,\r\n					      fork->extents[i].block_count);\r\n			fork->extents[i].first_block = 0;\r\n			fork->extents[i].block_count = 0;\r\n		}\r\n	}\r\n	fork->total_block_count = 0;\r\n	mark_inode_dirty(inode);\r\n}','Object layer\nFSM layer\n\nNo pre check \nLogging EMMCFS_DEBUG_MUTEX\nNo post check\n','12','63','',''),
 (394362,'emmcfs_inode_info.fork','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394363,'emmcfs_put_free_block()','F:','/usr/src/linux-2.6.37/fs/emmcfs/fsm.c',77,115,'void emmcfs_put_free_block(struct emmcfs_fsm_info *fsm,\r\n				__u64 block_offset, __u64 length_in_blocks)\r\n{\r\n	__u32 i;\r\n	__u64 start_page = block_offset >> (PAGE_SHIFT + 3),\r\n		end_page = (block_offset + length_in_blocks) >>\r\n		(PAGE_SHIFT + 3), page_index;\r\n	BUG_ON((start_page >= fsm->page_count) ||\r\n	       (end_page >= fsm->page_count));\r\n\r\n	EMMCFS_ADD_CHUNK(fsm->leb_bitmap_inode, &fsm->pages[start_page],\r\n			end_page - start_page + 1);\r\n\r\n	for (page_index = start_page; page_index <= end_page; page_index++)\r\n		lock_page(fsm->pages[page_index]);\r\n\r\n	spin_lock(&fsm->lock);\r\n	fsm_btree_free(&fsm->tree, block_offset, length_in_blocks);\r\n	fsm->sbi->free_blocks_count += length_in_blocks;\r\n	for (i = 0; i < length_in_blocks; i++) {\r\n		__u32 index = block_offset + i;\r\n		if (index < (fsm->length_in_bytes<<3)) {\r\n			if (!test_and_clear_bit(index, (void *)fsm->data))\r\n				EMMCFS_DEBUG_FSM(\r\n					\"PFB1 off %llu\\tlen %llu \",\r\n					block_offset, length_in_blocks);\r\n		} else {\r\n			EMMCFS_DEBUG_FSM(\r\n				\"PFB2 off %llu\\tlen %llu \",\r\n				block_offset, length_in_blocks);\r\n			break;\r\n		}\r\n	}\r\n	spin_unlock(&fsm->lock);\r\n	for (page_index = start_page; page_index <= end_page; page_index++) {\r\n		set_page_dirty(fsm->pages[page_index]);\r\n		unlock_page(fsm->pages[page_index]);\r\n	}\r\n}\r\n','Object layer\nFSM layer\n\nPre check BUG_ON\nLogging EMMCFS_DEBUG_FSM\nNo post check\n','7','26','',''),
 (394364,'emmcfs_fork_info.total_block_count','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394365,'sysdev_create_files()','D:','/usr/src/linux-2.6.37/include/linux/sysdev.h',127,131,NULL,NULL,NULL,NULL,'',''),
 (394366,'sysfs_create_files()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394367,'sys_device.kobj','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394368,'sysdev_remove_files()','D:','/usr/src/linux-2.6.37/include/linux/sysdev.h',133,137,NULL,NULL,NULL,NULL,'',''),
 (394369,'sysfs_remove_files()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394370,'register_one_node()','D:','/usr/src/linux-2.6.37/include/linux/node.h',49,52,NULL,NULL,NULL,NULL,'',''),
 (394371,'unregister_one_node()','D:','/usr/src/linux-2.6.37/include/linux/node.h',53,56,NULL,NULL,NULL,NULL,'',''),
 (394372,'register_cpu_under_node()','D:','/usr/src/linux-2.6.37/include/linux/node.h',57,60,NULL,NULL,NULL,NULL,'',''),
 (394373,'unregister_cpu_under_node()','D:','/usr/src/linux-2.6.37/include/linux/node.h',61,64,NULL,NULL,NULL,NULL,'',''),
 (394374,'register_mem_sect_under_node()','D:','/usr/src/linux-2.6.37/include/linux/node.h',65,69,NULL,NULL,NULL,NULL,'',''),
 (394375,'unregister_mem_sect_under_nodes()','D:','/usr/src/linux-2.6.37/include/linux/node.h',70,73,NULL,NULL,NULL,NULL,'',''),
 (394376,'register_hugetlbfs_with_node()','D:','/usr/src/linux-2.6.37/include/linux/node.h',75,78,NULL,NULL,NULL,NULL,'',''),
 (394377,'btree_node_ctor()','D:','/usr/src/linux-2.6.37/fs/emmcfs/fsm_btree.c',103,106,'/**\r\n * @brief			FMS b-tree node initializer\r\n * @param [in,out] _inode	b-tree node for init\r\n * @return			void\r\n */\r\nstatic void btree_node_ctor(void *node)\r\n{\r\n	memset(node, 0, sizeof(struct emmcfs_fsm_btree_node));\r\n}\r\n','Object layer\n\nNo pre check\nNo logging\nNo post check\n','1','1','',''),
 (394378,'emmcfs_fsm_btree.node_cachep','S:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394379,'kmem_cache_create()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394380,'btree_node_ctor','g:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394381,'allocate_btree_node()','D:','/usr/src/linux-2.6.37/fs/emmcfs/fsm_btree.c',189,217,'/**\r\n* @bref		Function used to allocate memory for the fsm btree node\r\n* @param	btree The btree\r\n* @param	order Order of the B-Tree\r\n* @return	The allocated B-tree node\r\n*/\r\nstatic struct emmcfs_fsm_btree_node *allocate_btree_node(\r\n		struct emmcfs_fsm_btree *tree,\r\n		unsigned int order)\r\n{\r\n\r\n	struct emmcfs_fsm_btree_node *node;\r\n\r\n	/* Allocate memory for the node*/\r\n	node = kmem_cache_alloc(tree->node_cachep, __GFP_WAIT);\r\n\r\n	if (!node) {\r\n		EMMCFS_ERR(\"can\'t allocate memory for FSM b-tree node\");\r\n		return ERR_PTR(-ENOMEM);\r\n	}\r\n	/*node = malloc(sizeof(struct emmcfs_fsm_btree_node));*/\r\n	/* Active node count */\r\n	node->nr_active = 0;\r\n\r\n	/* New node is leaf node */\r\n	node->type = FSM_LEAF_NODE;\r\n\r\n	/* Level in tree */\r\n	node->level = 0;\r\n\r\n	/* Initialize the linked list pointer to NULL */\r\n	node->next = NULL;\r\n\r\n	return node;\r\n}','Object level\n\nPost check EMMCFS_ERR\nNo Pre check and no logging','2','10','',''),
 (394382,'emmcfs_fsm_btree_node.nr_active','S:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394383,'emmcfs_fsm_btree_node.type','S:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394384,'emmcfs_fsm_btree_node.level','S:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394385,'emmcfs_fsm_btree_node.next','S:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394386,'free_btree_node()','D:','/usr/src/linux-2.6.37/fs/emmcfs/fsm_btree.c',225,232,'/**\r\n* @bref		Function used to free the memory allocated to the b-tree\r\n* @param	node The node to be freed\r\n* @param	order Order of the B-Tree\r\n* @return	The allocated B-tree node\r\n*/\r\nstatic int free_btree_node(struct emmcfs_fsm_btree *tree,\r\n			   struct emmcfs_fsm_btree_node *node)\r\n{\r\n	kmem_cache_free(tree->node_cachep, node);\r\n	/*free(node);*/\r\n	node = NULL;\r\n	return 0;\r\n}','Object layer\n\nNo pre check\nNo logging\nNo post check\n','1','3','',''),
 (394387,'kmem_cache_free()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394388,'btree_split_child()','D:','/usr/src/linux-2.6.37/fs/emmcfs/fsm_btree.c',242,283,'/**\r\n* @bref		Used to split the child node and adjust the parent so that\r\n*		it has two children\r\n* @param	parent Parent Node\r\n* @param	index Index of the child node\r\n* @param	child  Full child node\r\n*\r\n*/\r\nstatic void btree_split_child(struct emmcfs_fsm_btree *btree,\r\n			struct emmcfs_fsm_btree_node *parent,\r\n			unsigned int index,\r\n			struct emmcfs_fsm_btree_node *child)\r\n{\r\n	int count = 0;\r\n	unsigned int order = btree->order;\r\n\r\n	struct emmcfs_fsm_btree_node *new_child =\r\n			allocate_btree_node(btree, btree->order);\r\n\r\n	new_child->type = child->type;\r\n	new_child->level = child->level;\r\n	new_child->nr_active = btree->order - 1;\r\n\r\n	/* Copy the higher order keys to the new child */\r\n	for (count = 0; count < order - 1; count++) {\r\n		new_child->key_vals[count] = child->key_vals[count + order];\r\n		if (child->type != FSM_LEAF_NODE) {\r\n			new_child->children[count] =\r\n					child->children[count + order];\r\n		}\r\n	}\r\n\r\n	/* Copy the last child pointer */\r\n	if (child->type != FSM_LEAF_NODE)\r\n		new_child->children[count] = child->children[count + order];\r\n\r\n	child->nr_active = order - 1;\r\n\r\n	for (count = parent->nr_active + 1; count > index + 1; count--)\r\n		parent->children[count] = parent->children[count - 1];\r\n\r\n	parent->children[index + 1] = new_child;\r\n\r\n	for (count = parent->nr_active; count > index; count--)\r\n		parent->key_vals[count] = parent->key_vals[count - 1];\r\n\r\n\r\n	parent->key_vals[index] = child->key_vals[order - 1];\r\n	parent->nr_active++;\r\n}\r\n','Switching layer\nFSM layer\n\nNo pre check\nNo logging\nNo post check\n','6','26','',''),
 (394389,'emmcfs_fsm_btree_node.key_vals[]','S:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394390,'emmcfs_fsm_btree_node.key_vals','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394391,'emmcfs_fsm_btree_node.children[]','S:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394392,'emmcfs_fsm_btree_node.children','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394393,'btree_insert_nonfull()','D:','/usr/src/linux-2.6.37/fs/emmcfs/fsm_btree.c',292,363,'/**\r\n* @bref		Used to insert a key in the non-full node\r\n* @param	btree The emmcfs FSM btree\r\n* @param	node The node to which the key will be added\r\n* @param	the key value pair\r\n* @return	return 0 on success, ERRNO on fail\r\n*/\r\nstatic int btree_insert_nonfull(struct emmcfs_fsm_btree *btree,\r\n		struct emmcfs_fsm_btree_node *parent_node, void *key_val)\r\n{\r\n\r\n	int i, count2, cmp_result;\r\n	struct emmcfs_fsm_btree_node *child;\r\n	struct emmcfs_fsm_btree_node *node = parent_node;\r\n\r\n\r\ninsert:	i = node->nr_active - 1;\r\n\r\n	/* leaf node */\r\n	if (node->type == FSM_LEAF_NODE) {\r\n		int imax = i, imin = 0;\r\n		while (imax >= imin) {\r\n			int imid = (imin + imax) / 2;\r\n			cmp_result = btree->cmp_key(key_val,\r\n						(void *)&node->key_vals[imid]);\r\n			if (cmp_result > 0)\r\n				imin = imid + 1;\r\n			else if (cmp_result < 0)\r\n				imax = imid - 1;\r\n			else	/* key found at index imid */\r\n				return -EEXIST;\r\n		}\r\n		imax++;\r\n		for (imin = node->nr_active-1; imin >= imax; imin--)\r\n			node->key_vals[imin+1] = node->key_vals[imin];\r\n		btree->cpy_key(&node->key_vals[imax], key_val);\r\n		node->nr_active++;\r\n	} else { /* index node */\r\n		for (; i >= 0; i--) {\r\n			cmp_result = btree->cmp_key(key_val,\r\n						    (void *)&node->key_vals[i]);\r\n\r\n			/* Check for identical keys*/\r\n			if (cmp_result == 0)\r\n				return -EEXIST;\r\n\r\n			if (cmp_result > 0)\r\n				break;\r\n		}\r\n\r\n		i++;\r\n\r\n		/* found children node */\r\n		child = node->children[i];\r\n		/* check : full node or no */\r\n		if (child->nr_active == 2 * btree->order - 1) {\r\n			/* Check for identical keys */\r\n			for (count2 = 0; count2 < child->nr_active; count2++) {\r\n				cmp_result = btree->cmp_key(key_val,\r\n					(void *)&child->key_vals[count2]);\r\n				/* Check for identical keys*/\r\n				if (cmp_result == 0)\r\n					return -EEXIST;\r\n\r\n				/*all LEFT keys a smaller*/\r\n				if (cmp_result < 0)\r\n					break;\r\n			}\r\n\r\n			btree_split_child(btree, node, i, child);\r\n			if (btree->cmp_key(key_val,\r\n					  (void *)&node->key_vals[i]) > 0)\r\n				i++;\r\n		}\r\n		node = node->children[i];\r\n		goto insert;\r\n	}\r\n	return 0;\r\n}\r\n','FSM layer\n\nNo pre check\nNo logging\nPost check -EEXIST\n\nImplementation of the trees\n','14','46','',''),
 (394394,'fsm_btree_insert()','D:','/usr/src/linux-2.6.37/fs/emmcfs/fsm_btree.c',372,397,'/**\r\n* @bref		Function used to insert node into a B-Tree\r\n* @param	root Root of the B-Tree\r\n* @param	node The node to be inserted\r\n* @return	0 on success or -ERRNO on failure\r\n*/\r\nint fsm_btree_insert(struct emmcfs_fsm_btree *btree, void *key_val)\r\n{\r\n	struct emmcfs_fsm_btree_node *rnode = NULL;\r\n	int ret = -1;\r\n\r\n	/* initialization check*/\r\n	if (unlikely(btree->root == NULL))\r\n		btree->root = allocate_btree_node(btree, btree->order);\r\n\r\n	rnode = btree->root;\r\n\r\n	if (rnode->nr_active == (2*btree->order - 1)) {\r\n		struct emmcfs_fsm_btree_node *new_root;\r\n		new_root = allocate_btree_node(btree, btree->order);\r\n		new_root->level = btree->root->level + 1;\r\n		btree->root = new_root;\r\n		new_root->type = FSM_INDEX_NODE;\r\n		new_root->nr_active = 0;\r\n		new_root->children[0]  = rnode;\r\n		btree_split_child(btree, new_root, 0, rnode);\r\n		ret = btree_insert_nonfull(btree, new_root, key_val);\r\n	} else\r\n		ret = btree_insert_nonfull(btree, rnode, key_val);\r\n\r\n	return ret;\r\n}\r\n','FSM and switching level\n\nNo pre and post check and no logging.','3','17','',''),
 (394395,'get_max_key_pos()','D:','/usr/src/linux-2.6.37/fs/emmcfs/fsm_btree.c',405,427,'/**\r\n* @bref		Used to get the position of the MAX key within the subtree\r\n* @param	btree The btree\r\n* @param	subtree The subtree to be searched\r\n* @return	The node containing the key and position of the key\r\n*/\r\nstruct emmcfs_fsm_btree_node *get_max_key_pos(\r\n	struct emmcfs_fsm_btree *btree,\r\n	struct emmcfs_fsm_btree_node *nd, int *pos)\r\n{\r\n\r\n	struct emmcfs_fsm_btree_node *node = nd, *ret_node = NULL;\r\n	*pos = 0;\r\n\r\n	while (true) {\r\n		if (node == NULL)\r\n			break;\r\n\r\n		if (node->type == FSM_LEAF_NODE) {\r\n			*pos = node->nr_active - 1;\r\n			return node;\r\n		} else {\r\n			ret_node = node;\r\n			*pos = node->nr_active - 1;\r\n			node = node->children[node->nr_active];\r\n		}\r\n	}\r\n	return ret_node;\r\n}','FSM layer\nSwitching layer\n\nNo pre check\nNo logging\nNo post check\n','4','12','',''),
 (394396,'get_min_key_pos()','D:','/usr/src/linux-2.6.37/fs/emmcfs/fsm_btree.c',435,456,'/**\r\n* @bref		Used to get the position of the MAX key within the subtree\r\n* @param	btree The btree\r\n* @param	subtree The subtree to be searched\r\n* @return	The node containing the key and position of the key\r\n*/\r\nstruct emmcfs_fsm_btree_node *get_min_key_pos(\r\n	struct emmcfs_fsm_btree *btree,\r\n	struct emmcfs_fsm_btree_node *nd, int *pos)\r\n{\r\n	struct emmcfs_fsm_btree_node *node = nd, *ret_node = NULL;\r\n	*pos = 0;\r\n\r\n	while (true) {\r\n		if (node == NULL)\r\n			break;\r\n\r\n		if (node->type == FSM_LEAF_NODE) {\r\n			*pos = 0;\r\n			return node;\r\n		} else {\r\n			ret_node = node;\r\n			*pos = 0;\r\n			node = node->children[0];\r\n		}\r\n	}\r\n	return ret_node;\r\n}','FSM layer\n\nNo pre check\nNo logging\nNo post check\n','4','12','',''),
 (394397,'merge_siblings()','D:','/usr/src/linux-2.6.37/fs/emmcfs/fsm_btree.c',466,527,'/**\r\n* @bref		Merge nodes n1 and n2 (case 3b from Cormen)\r\n* @param	btree The btree\r\n* @param	node The parent node\r\n* @param	index of the child\r\n* @param	pos LEFT or RIGHT\r\n* @return	none\r\n*/\r\nstatic struct emmcfs_fsm_btree_node *merge_siblings(\r\n		struct emmcfs_fsm_btree *btree,\r\n		struct emmcfs_fsm_btree_node *parent,\r\n		unsigned int index , enum position_t pos)\r\n{\r\n	unsigned int j;\r\n	struct emmcfs_fsm_btree_node *new_node;\r\n	struct emmcfs_fsm_btree_node *n1, *n2;\r\n\r\n	if (index == (parent->nr_active)) {\r\n		index--;\r\n		n1 = parent->children[parent->nr_active - 1];\r\n		n2 = parent->children[parent->nr_active];\r\n	} else {\r\n		n1 = parent->children[index];\r\n		n2 = parent->children[index + 1];\r\n	}\r\n\r\n	/* Merge the current node with the LEFT node */\r\n\r\n	new_node = allocate_btree_node(btree, btree->order);\r\n	new_node->level = n1->level;\r\n	new_node->type = n1->type;\r\n\r\n	for (j = 0; j < btree->order - 1; j++) {\r\n		new_node->key_vals[j] =	n1->key_vals[j];\r\n		new_node->children[j] =	n1->children[j];\r\n	}\r\n\r\n	new_node->key_vals[btree->order - 1] =	parent->key_vals[index];\r\n	new_node->children[btree->order - 1] =	n1->children[btree->order - 1];\r\n\r\n	for (j = 0; j < btree->order - 1; j++) {\r\n		new_node->key_vals[j + btree->order] =	n2->key_vals[j];\r\n		new_node->children[j + btree->order] =	n2->children[j];\r\n	}\r\n	new_node->children[2*btree->order - 1] = n2->children[btree->order - 1];\r\n\r\n	parent->children[index] = new_node;\r\n\r\n	for (j = index; j < parent->nr_active; j++) {\r\n		parent->key_vals[j] = parent->key_vals[j + 1];\r\n		parent->children[j + 1] = parent->children[j + 2];\r\n	}\r\n\r\n	new_node->nr_active = n1->nr_active + n2->nr_active + 1;\r\n	parent->nr_active--;\r\n\r\n	free_btree_node(btree, n1);\r\n	free_btree_node(btree, n2);\r\n\r\n	if (parent->nr_active == 0 && btree->root == parent) {\r\n		free_btree_node(btree, parent);\r\n		btree->root = new_node;\r\n		if (new_node->level)\r\n			new_node->type = FSM_INDEX_NODE;\r\n		else\r\n			new_node->type = FSM_LEAF_NODE;\r\n	}\r\n\r\n	return new_node;\r\n}\r\n','FSM layer\nSwitching layer\n\nNo pre check\nNo logging\nNo post check\n','8','42','',''),
 (394398,'move_key()','D:','/usr/src/linux-2.6.37/fs/emmcfs/fsm_btree.c',537,585,'/**\r\n* @bref		Move the key from node to another\r\n* @param	btree The B-Tree\r\n* @param	node The parent node\r\n* @param	index of the key to be moved done\r\n* @param	pos the position of the child to receive the key\r\n* @return	none\r\n*/\r\nstatic void move_key(struct emmcfs_fsm_btree *btree,\r\n		struct emmcfs_fsm_btree_node *node,\r\n		unsigned int index, enum position_t pos) {\r\n	struct emmcfs_fsm_btree_node *lchild;\r\n	struct emmcfs_fsm_btree_node *rchild;\r\n	unsigned int i;\r\n\r\n	if (pos == RIGHT)\r\n		index--;\r\n\r\n	lchild = node->children[index];\r\n	rchild = node->children[index + 1];\r\n\r\n	/* Move the key from the parent to the LEFT child */\r\n	if (pos == LEFT) {\r\n		lchild->key_vals[lchild->nr_active] = node->key_vals[index];\r\n		lchild->children[lchild->nr_active + 1] = rchild->children[0];\r\n		rchild->children[0] = NULL;\r\n		lchild->nr_active++;\r\n\r\n		node->key_vals[index] = rchild->key_vals[0];\r\n\r\n		for (i = 0; i < rchild->nr_active - 1; i++) {\r\n			rchild->key_vals[i] = rchild->key_vals[i + 1];\r\n			rchild->children[i] = rchild->children[i + 1];\r\n		}\r\n		rchild->children[rchild->nr_active - 1] =\r\n				rchild->children[rchild->nr_active];\r\n		rchild->nr_active--;\r\n	} else {\r\n		/* Move the key from the parent to the RIGHT child */\r\n		for (i = rchild->nr_active; i > 0 ; i--) {\r\n			rchild->key_vals[i] = rchild->key_vals[i - 1];\r\n			rchild->children[i + 1] = rchild->children[i];\r\n		}\r\n		rchild->children[1] = rchild->children[0];\r\n		rchild->children[0] = NULL;\r\n\r\n		rchild->key_vals[0] = node->key_vals[index];\r\n\r\n		rchild->children[0] = lchild->children[lchild->nr_active];\r\n		lchild->children[lchild->nr_active] = NULL;\r\n\r\n		node->key_vals[index] = lchild->key_vals[lchild->nr_active - 1];\r\n\r\n		lchild->nr_active--;\r\n		rchild->nr_active++;\r\n	}\r\n}\r\n','Object layer\nFSM layer\nSwitching layer\nParser layer\n\nNo pre check\nNo logging\nNo post check\n','5','33','',''),
 (394399,'merge_nodes()','D:','/usr/src/linux-2.6.37/fs/emmcfs/fsm_btree.c',593,627,'/**\r\n* @bref		Merge nodes n1 and n2\r\n* @param	n1 First node\r\n* @param	n2 Second node\r\n* @return	combined node\r\n*/\r\nstatic struct emmcfs_fsm_btree_node *merge_nodes(\r\n		struct emmcfs_fsm_btree *btree,\r\n		struct emmcfs_fsm_btree_node *n1,\r\n		struct fsm_btree_key kv,\r\n		struct emmcfs_fsm_btree_node *n2)\r\n{\r\n	struct emmcfs_fsm_btree_node *new_node;\r\n	unsigned int i;\r\n\r\n	new_node = allocate_btree_node(btree, btree->order);\r\n	new_node->type = FSM_LEAF_NODE;\r\n\r\n	for (i = 0; i < n1->nr_active; i++) {\r\n		new_node->key_vals[i]   = n1->key_vals[i];\r\n		new_node->children[i]   = n1->children[i];\r\n	}\r\n\r\n	new_node->children[n1->nr_active] = n1->children[n1->nr_active];\r\n	new_node->key_vals[n1->nr_active] = kv;\r\n\r\n	for (i = 0; i < n2->nr_active; i++) {\r\n		new_node->key_vals[i + n1->nr_active + 1] = n2->key_vals[i];\r\n		new_node->children[i + n1->nr_active + 1] = n2->children[i];\r\n	}\r\n	new_node->children[2*btree->order - 1] = n2->children[n2->nr_active];\r\n\r\n	new_node->nr_active = n1->nr_active + n2->nr_active + 1;\r\n	new_node->type = n1->type;\r\n	new_node->level = n1->level;\r\n\r\n	free_btree_node(btree, n1);\r\n	free_btree_node(btree, n2);\r\n\r\n	return new_node;\r\n}','Switching layer\n\nNo pre check\nNo logging\nNo post check\n','3','23','',''),
 (394400,'remove_key_from_leaf()','D:','/usr/src/linux-2.6.37/fs/emmcfs/fsm_btree.c',636,655,'/**\r\n* @bref		Used to remove a key from the B-tree node\r\n* @param	btree The btree\r\n* @param	node The node from which the key is to be removed\r\n* @param	key The key to be removed\r\n* @return	0 on success -1 on error\r\n*/\r\nint remove_key_from_leaf(struct emmcfs_fsm_btree *btree,\r\n			 struct emmcfs_fsm_btree_node *node, int pos)\r\n{\r\n	if (node->type == FSM_INDEX_NODE)\r\n		return -1;\r\n\r\n	node->nr_active--;\r\n\r\n	if (pos < node->nr_active)\r\n		memmove(&node->key_vals[pos], &node->key_vals[pos+1],\r\n			sizeof(struct fsm_btree_key) * (node->nr_active - pos));\r\n\r\n	if (node->nr_active == 0) {\r\n		if (btree->root == node)\r\n			btree->root = NULL;\r\n\r\n		free_btree_node(btree, node);\r\n	}\r\n	return 0;\r\n}','Memory layer\n\nNo pre check\nNo logging\nNo post check\n','5','10','',''),
 (394401,'fsm_btree_delete()','D:','/usr/src/linux-2.6.37/fs/emmcfs/fsm_btree.c',666,829,'/**\r\n* @bref		Function used to remove a node from a  B-Tree\r\n* @param	btree The B-Tree\r\n* @param	key Key of the node to be removed\r\n* @param	value function to map the key to an unique integer value\r\n* @param	compare Function used to compare the two nodes of the tree\r\n* @return	0 on success -1 on error\r\n*/\r\n\r\nint fsm_btree_delete(struct emmcfs_fsm_btree *btree, void *key)\r\n{\r\n	unsigned int i, index;\r\n	struct emmcfs_fsm_btree_node *node = NULL, *rsibling, *lsibling;\r\n	struct emmcfs_fsm_btree_node *comb_node, *parent;\r\n\r\n	struct emmcfs_fsm_btree_node *sub_np_node;\r\n	int sub_np_pos;\r\n\r\n	struct fsm_btree_key to_remove_kv;\r\n\r\n	node = btree->root;\r\n	parent = NULL;\r\n\r\n	/* Empty subtree */\r\n	if (node == NULL)\r\n		return 0;\r\n\r\ndel_loop:for (i = 0; ; i = 0) {\r\n\r\n		/* If there are no keys simply return */\r\n		if (!node->nr_active)\r\n			return 0;\r\n\r\n		/* Fix the index of the key greater than or equal*/\r\n		/* to the key that we would like to search*/\r\n		while (i < node->nr_active &&\r\n			btree->cmp_key(key, (void *)&node->key_vals[i]) > 0)\r\n			i++;\r\n		index = i;\r\n\r\n		/*If we find such key break*/\r\n		if (i < node->nr_active &&\r\n			btree->cmp_key(key, (void *)&node->key_vals[i]) == 0)\r\n			break;\r\n\r\n		if (node->type == FSM_LEAF_NODE)\r\n			return 0;\r\n\r\n		/* Store the parent node */\r\n		parent = node;\r\n\r\n		/*To get a child node*/\r\n		node = node->children[i];\r\n\r\n		/* If NULL not found */\r\n		if (node == NULL)\r\n			return 0;\r\n\r\n		if (index == (parent->nr_active)) {\r\n			lsibling =  parent->children[parent->nr_active - 1];\r\n			rsibling = NULL;\r\n		} else if (index == 0) {\r\n			lsibling = NULL;\r\n			rsibling = parent->children[1];\r\n		} else {\r\n			lsibling = parent->children[i - 1];\r\n			rsibling = parent->children[i + 1];\r\n		}\r\n\r\n		if (node->nr_active == btree->order - 1 && parent) {\r\n			/* The current node has (t - 1) keys but\r\n			 *  the RIGHT sibling has > (t - 1) keys*/\r\n			if (rsibling &&\r\n				(rsibling->nr_active > btree->order - 1)) {\r\n				move_key(btree, parent, i, LEFT);\r\n			/* The current node has (t - 1) keys but\r\n			 * the LEFT sibling has (t - 1) keys */\r\n\r\n			} else if (lsibling &&\r\n				(lsibling->nr_active > btree->order - 1)) {\r\n					move_key(btree, parent, i, RIGHT);\r\n			/* Left sibling has (t - 1) keys */\r\n			} else if (lsibling &&\r\n				(lsibling->nr_active == btree->order - 1)) {\r\n					node = merge_siblings(btree,\r\n							parent, i, LEFT);\r\n			/* Right sibling has (t - 1) keys */\r\n			} else if (rsibling &&\r\n				(rsibling->nr_active == btree->order - 1)) {\r\n					node = merge_siblings(btree,\r\n							parent, i, RIGHT);\r\n			}\r\n		}\r\n	}\r\n	/*Case 1 : The node containing the key is found and is the leaf node.*/\r\n	/*Also the leaf node has keys greater than the minimum required.*/\r\n	/*Simply remove the key*/\r\n	if ((node->type == FSM_LEAF_NODE) &&\r\n			(node->nr_active > btree->order - 1))\r\n		return remove_key_from_leaf(btree, node, index);\r\n\r\n/*If the leaf node is the root permit deletion even if the number of keys is*/\r\n/*less than (t - 1)*/\r\n	if ((node->type == FSM_LEAF_NODE) && (node == btree->root))\r\n		return remove_key_from_leaf(btree, node, index);\r\n\r\n/*Case 2: The node containing the key is found and is an internal node */\r\n	if (node->type == FSM_INDEX_NODE) {\r\n		if (node->children[index]->nr_active > btree->order - 1) {\r\n			btree->cpy_key(&to_remove_kv, &node->key_vals[index]);\r\n\r\n			sub_np_node = get_max_key_pos(btree,\r\n						      node->children[index],\r\n						      &sub_np_pos);\r\n			btree->cpy_key(&node->key_vals[index],\r\n				       &sub_np_node->key_vals[sub_np_pos]);\r\n\r\n			btree->cpy_key(&sub_np_node->key_vals[sub_np_pos],\r\n				       &to_remove_kv);\r\n			node = node->children[index];\r\n			goto del_loop;\r\n\r\n		} else if ((node->children[index + 1]->nr_active >\r\n							btree->order - 1)) {\r\n			btree->cpy_key(&to_remove_kv, &node->key_vals[index]);\r\n\r\n			sub_np_node = get_min_key_pos(btree,\r\n						      node->children[index + 1],\r\n						      &sub_np_pos);\r\n			btree->cpy_key(&node->key_vals[index],\r\n				       &sub_np_node->key_vals[sub_np_pos]);\r\n\r\n			btree->cpy_key(&sub_np_node->key_vals[sub_np_pos],\r\n				       &to_remove_kv);\r\n\r\n			node = node->children[index + 1];\r\n			goto del_loop;\r\n\r\n		} else if (\r\n			node->children[index]->nr_active == btree->order - 1 &&\r\n			node->children[index + 1]->nr_active ==\r\n						btree->order - 1) {\r\n\r\n			comb_node = merge_nodes(btree, node->children[index],\r\n				node->key_vals[index],\r\n				node->children[index + 1]);\r\n			node->children[index] = comb_node;\r\n\r\n			for (i = index + 1; i < node->nr_active; i++) {\r\n				node->children[i] = node->children[i + 1];\r\n				node->key_vals[i - 1] = node->key_vals[i];\r\n			}\r\n			node->nr_active--;\r\n			if (node->nr_active == 0 && btree->root == node) {\r\n				free_btree_node(btree, node);\r\n				btree->root = comb_node;\r\n			}\r\n			node = comb_node;\r\n			goto del_loop;\r\n		}\r\n	}\r\n\r\n/* Case 3:*/\r\n/* In this case start from the top of the tree and continue*/\r\n/* moving to the leaf node making sure that each node that*/\r\n/* we encounter on the way has atleast \'t\' (order of the tree)*/\r\n/* keys */\r\n	if ((node->type == FSM_LEAF_NODE) &&\r\n			(node->nr_active > btree->order - 1))\r\n		return remove_key_from_leaf(btree, node, index);\r\n\r\n	return 0;\r\n}','Object layer\nFSM layer\nSwitching layer\nParser layer\n\nNo pre check\nNo logging\nNo post check\n','36','79','',''),
 (394402,'get_btree_node()','D:','/usr/src/linux-2.6.37/fs/emmcfs/fsm_btree.c',837,875,'/**\r\n* @bref		Function used to get the node containing the given key\r\n* @param	btree The btree to be searched\r\n* @param	key The the key to be searched\r\n* @return	The node and position of the key within the node\r\n*/\r\nstruct emmcfs_fsm_btree_node *get_btree_node(struct emmcfs_fsm_btree *btree,\r\n						void *key, int *pos)\r\n{\r\n	unsigned int i = 0;\r\n\r\n	struct emmcfs_fsm_btree_node *node = btree->root;\r\n	*pos = -1;\r\n\r\n	/* Empty tree */\r\n	if (node == NULL)\r\n		return NULL;\r\n\r\n	for (; ; i = 0) {\r\n\r\n		/* Fix the index of the key greater than or equal */\r\n		/* to the key that we would like to search */\r\n\r\n		while (i < node->nr_active &&\r\n			(btree->cmp_key(key, (void *)&node->key_vals[i]) > 0))\r\n				i++;\r\n\r\n		/* If we find such key return the key-value pair*/\r\n		if (i < node->nr_active &&\r\n			(btree->cmp_key(key,\r\n				(void *) &node->key_vals[i]) == 0)) {\r\n			*pos = i;\r\n			return node;\r\n		}\r\n\r\n		/* If the node is leaf and if we did not find the key*/\r\n		/* return NULL */\r\n		if (node->type == FSM_LEAF_NODE)\r\n			return NULL;\r\n\r\n		/*To got a child node*/\r\n		node = node->children[i];\r\n	}\r\n	return NULL;\r\n}','FSM layer\n\nNo pre check\nNo logging\nNo post check\n\nJust check for Empty tree.\n','8','17','',''),
 (394403,'fsm_btree_destroy()','D:','/usr/src/linux-2.6.37/fs/emmcfs/fsm_btree.c',882,914,'/**\r\n*Used to destory btree\r\n*@param btree The B-tree\r\n*@return none\r\n*/\r\nvoid fsm_btree_destroy(struct emmcfs_fsm_btree *btree)\r\n{\r\n	int i = 0;\r\n	unsigned int current_level;\r\n\r\n	struct emmcfs_fsm_btree_node *head, *tail, *node;\r\n	struct emmcfs_fsm_btree_node *child, *del_node;\r\n\r\n	node = btree->root;\r\n	current_level = node->level;\r\n	head = node;\r\n	tail = node;\r\n\r\n	while (true) {\r\n		if (head == NULL)\r\n			break;\r\n		if (head->level < current_level)\r\n			current_level = head->level;\r\n\r\n\r\n		if (head->type == FSM_INDEX_NODE) {\r\n			for (i = 0 ; i < head->nr_active + 1; i++) {\r\n				child = head->children[i];\r\n				tail->next = child;\r\n				tail = child;\r\n				child->next = NULL;\r\n			}\r\n		}\r\n		del_node = head;\r\n		head = head->next;\r\n		free_btree_node(btree, del_node);\r\n	}\r\n}','Object layer\nFSM layer\n\nNo pre check\nNo logging\nNo post check\n','6','24','',''),
 (394404,'fsm_btree_free()','D:','/usr/src/linux-2.6.37/fs/emmcfs/fsm_btree.c',922,970,'/**\r\n*Function used to search a node in a B-Tree\r\n*@param btree The B-tree to be searched\r\n*@param key Key of the node to be search\r\n*@return The key-value pair\r\n*/\r\nvoid fsm_btree_free(struct emmcfs_fsm_btree *btree, __u64 block_offset,\r\n		    __u64 length)\r\n{\r\n	int i;\r\n	struct emmcfs_fsm_btree_node *node = btree->root;\r\n	struct fsm_btree_key key = {block_offset, length};\r\n\r\n	if (node == NULL) {\r\n		fsm_btree_insert(btree, &key);\r\n		return;\r\n	}\r\n\r\n	for (i = 0; ; i = 0) {\r\n		while (i < node->nr_active) {\r\n			if (i && ((node->key_vals[i-1].block_offset +\r\n				node->key_vals[i-1].length) == block_offset)) {\r\n				node->key_vals[i-1].length += length;\r\n				return;\r\n			}\r\n			if (block_offset == node->key_vals[i].block_offset +\r\n				node->key_vals[i].length) {\r\n				node->key_vals[i].length += length;\r\n				if (((i+1) <  node->nr_active) &&\r\n				    (node->key_vals[i+1].block_offset ==\r\n				     node->key_vals[i].block_offset +\r\n				     node->key_vals[i].length)) {\r\n					node->key_vals[i].length +=\r\n					node->key_vals[i+1].length;\r\n					key.block_offset = node->\r\n						key_vals[i+1].block_offset;\r\n					key.length = node->key_vals[i+1].length;\r\n					fsm_btree_delete(btree, &key);\r\n				}\r\n				return;\r\n			}\r\n			i++;\r\n		}\r\n\r\n		if (node->type == FSM_LEAF_NODE)\r\n			break;\r\n		node = node->children[i];\r\n	}\r\n\r\n	key.block_offset = block_offset;\r\n	key.length = length;\r\n	fsm_btree_insert(btree, &key);\r\n\r\n	return;\r\n}','Object layer\nFSM layer\nSwitching layer\n\nNo pre check\nNo logging\nNo post check\n','10','29','',''),
 (394405,'fsm_btree_key.block_offset','S:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394406,'fsm_btree_key.length','S:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394407,'fsm_btree_lookup()','D:','/usr/src/linux-2.6.37/fs/emmcfs/fsm_btree.c',978,1035,'/**\r\n*Function used to search a node in a B-Tree\r\n*@param btree The B-tree to be searched\r\n*@param key Key of the node to be search\r\n*@return The key-value pair\r\n*/\r\n__u64 fsm_btree_lookup(struct emmcfs_fsm_btree *btree, __u64 block_offset,\r\n			 __u64 length)\r\n{\r\n	int i;\r\n	struct emmcfs_fsm_btree_node *node = btree->root;\r\n\r\n	if (node == NULL)\r\n		return 0L;\r\n\r\n	for (i = 0; ; i = 0) {\r\n		while (i < node->nr_active &&\r\n			(block_offset > node->key_vals[i].block_offset))\r\n				i++;\r\n\r\n		if (i < node->nr_active &&\r\n			(block_offset == node->key_vals[i].block_offset) &&\r\n			(length <= node->key_vals[i].length)) {\r\n			if (length < node->key_vals[i].length) {\r\n				node->key_vals[i].block_offset += length;\r\n				node->key_vals[i].length -= length;\r\n			} else {\r\n				struct fsm_btree_key key;\r\n				key.block_offset = block_offset;\r\n				key.length = length;\r\n				fsm_btree_delete(btree, &key);\r\n			}\r\n			return block_offset;\r\n		}\r\n		if (node->type == FSM_LEAF_NODE)\r\n			break;\r\n		node = node->children[i];\r\n	}\r\n\r\n	for (i = 0; ; i = 0) {\r\n		while (i < node->nr_active &&\r\n			(length > node->key_vals[i].length))\r\n				i++;\r\n\r\n		if (i < node->nr_active &&\r\n			(length <= node->key_vals[i].length)) {\r\n			__u64 rc = node->key_vals[i].block_offset;\r\n			if (length < node->key_vals[i].length) {\r\n				node->key_vals[i].block_offset += length;\r\n				node->key_vals[i].length -= length;\r\n			} else {\r\n				struct fsm_btree_key key;\r\n				key.block_offset = rc;\r\n				key.length = length;\r\n				fsm_btree_delete(btree, &key);\r\n			}\r\n			return rc;\r\n		}\r\n		if (node->type == FSM_LEAF_NODE)\r\n			break;\r\n		node = node->children[i];\r\n	}\r\n	return 0L;\r\n}\r\n','Object layer\nFSM layer\n\nNo pre check\nNo logging\nNo post check\n','17','40','',''),
 (394408,'print_single_node()','D:','/usr/src/linux-2.6.37/fs/emmcfs/fsm_btree.c',1037,1051,'static void print_single_node(struct emmcfs_fsm_btree *btree,\r\n			      struct emmcfs_fsm_btree_node *node,\r\n			      void *bitmap, __u32 bitmap_size)\r\n{\r\n	int i = 0;\r\n\r\n	/*EMMCFS_DEBUG_FSM(\" { \");*/\r\n	while (i < node->nr_active)\r\n		btree->print_key(&node->key_vals[i++], bitmap, bitmap_size);\r\n\r\n	/*EMMCFS_DEBUG_FSM(\"} (0x%p,cnt %d, level %d type %s) \",\r\n			 node, node->nr_active, node->level,\r\n			 (node->type ==\r\n			 FSM_LEAF_NODE) ? \"LEAF\" : \"INDEX\");*/\r\n}','Object layer\nFSM layer\n\nNo pre check\nLogging , but comment\nNo post check\n','2','3','',''),
 (394409,'fsm_print_subtree()','D:','/usr/src/linux-2.6.37/fs/emmcfs/fsm_btree.c',1059,1097,'/**\r\n*Function used to print the B-tree\r\n*@param root Root of the B-Tree\r\n*@param print_key Function used to print the key value\r\n*@return none\r\n*/\r\nvoid fsm_print_subtree(struct emmcfs_fsm_btree *btree,\r\n			struct emmcfs_fsm_btree_node *node,\r\n			void *bitmap, __u32 bitmap_size)\r\n{\r\n	int i = 0;\r\n	unsigned int current_level;\r\n\r\n	struct emmcfs_fsm_btree_node *head, *tail;\r\n\r\n	if (!node) {\r\n		EMMCFS_DEBUG_FSM(\"DEBUG: Subtree is empty\\n\");\r\n		return;\r\n	}\r\n	current_level = node->level;\r\n	head = node;\r\n	tail = node;\r\n\r\n	EMMCFS_DEBUG_FSM(\"DEBUG: Printing subtree\\n\");\r\n	while (true) {\r\n		if (head == NULL)\r\n			break;\r\n		if (head->level < current_level) {\r\n			current_level = head->level;\r\n			if (!bitmap)\r\n				EMMCFS_DEBUG_FSM(\"\\n\");\r\n		}\r\n		print_single_node(btree, head, bitmap, bitmap_size);\r\n\r\n		if (head->type == FSM_INDEX_NODE) {\r\n			for (i = 0 ; i < head->nr_active + 1; i++) {\r\n				tail->next = head->children[i];\r\n				tail = head->children[i];\r\n				head->children[i]->next = NULL;\r\n			}\r\n		}\r\n		head = head->next;\r\n	}\r\n	EMMCFS_DEBUG_FSM(\"\\n\");\r\n}','Object layer\n\nNo pre check\nLogging EMMCFS_DEBUG_FSM\nNo post check\n\n','8','27','',''),
 (394410,'emmcfs_fsm_info.page_count','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394411,'emmcfs_fsm_info.leb_bitmap_inode','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394412,'emmcfs_fsm_info.pages[]','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394413,'emmcfs_fsm_info.pages','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394414,'emmcfs_fsm_info.lock','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394415,'emmcfs_fsm_info.tree','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394416,'emmcfs_fsm_info.sbi','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394417,'emmcfs_sb_info.free_blocks_count','S:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394418,'emmcfs_fsm_info.length_in_bytes','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394419,'emmcfs_fsm_info.data','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394420,'set_page_dirty()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394421,'fsm_insert()','D:','/usr/src/linux-2.6.37/fs/emmcfs/fsm.c',117,132,'static int fsm_insert(struct emmcfs_fsm_info *fsm,\r\n			__u64 block_offset, __u64 length)\r\n{\r\n	struct  emmcfs_fsm_btree *btree = &fsm->tree;\r\n	struct fsm_btree_key key;\r\n	key.block_offset = block_offset;\r\n	key.length = length;\r\n	EMMCFS_DEBUG_FSM(\"INSERT off %llu\\tlen %llu \",\r\n			 ((struct fsm_btree_key *)&key)->block_offset,\r\n			 ((struct fsm_btree_key *)&key)->length);\r\n	if (fsm_btree_insert(btree, &key) != 0) {\r\n		return -1;\r\n	}\r\n	fsm->sbi->free_blocks_count += length;\r\n	return 0;\r\n}','Switching layer\n\nNo pre check\nLogging EMMCFS_DEBUG_FSM\nNo post check\n','2','9','',''),
 (394422,'fsm_get_tree()','D:','/usr/src/linux-2.6.37/fs/emmcfs/fsm.c',134,183,'void fsm_get_tree(struct emmcfs_fsm_info *fsm)\r\n{\r\n	int off = 0;\r\n	int mode = FIND_CLEAR_BIT;\r\n	__u64 i = 0, free_start = 0, free_end = 0;\r\n\r\n	fsm->sbi->free_blocks_count = 0;\r\n\r\n	for (; i < fsm->length_in_bytes >> 2; i++)\r\n		for (off = 0; off < 32; off++) {\r\n			if ((mode == FIND_CLEAR_BIT) && !off) {\r\n				if (fsm->data[i] == 0xFFFFFFFF)\r\n					break;\r\n				off = ffz(fsm->data[i]);\r\n				free_start = (i << 5) + off;\r\n				free_end = free_start;\r\n				mode = FIND_SET_BIT;\r\n				continue;\r\n			}\r\n			if ((mode == FIND_CLEAR_BIT) && off) {\r\n				if (!(fsm->data[i] & (1 << off))) {\r\n					free_start = (i << 5) + off;\r\n					free_end = free_start;\r\n					mode = FIND_SET_BIT;\r\n					continue;\r\n				}\r\n			}\r\n			if ((mode == FIND_SET_BIT) && !off) {\r\n				if (fsm->data[i] == 0)\r\n					break;\r\n				off = ffs(fsm->data[i]) - 1 ;\r\n				free_end = (i << 5) + off ;\r\n				mode = FIND_CLEAR_BIT;\r\n				fsm_insert(fsm, free_start,\r\n					   free_end - free_start);\r\n				continue;\r\n			}\r\n			if ((mode == FIND_SET_BIT) && off) {\r\n				if ((fsm->data[i] & (1 << off))) {\r\n					free_end = (i << 5) + off;\r\n					mode = FIND_CLEAR_BIT;\r\n					fsm_insert(fsm, free_start,\r\n						   free_end - free_start);\r\n					continue;\r\n				}\r\n			}\r\n		}\r\n	if (mode == FIND_SET_BIT)\r\n		fsm_insert(fsm, free_start, (i << 5) - free_start);\r\n}\r\n','FSM layer\nSwitching layer\n\nNo pre check\nNo logging\nNo post check\n','16','40','',''),
 (394423,'emmcfs_fsm_info.data[]','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394424,'fsm_put_tree()','D:','/usr/src/linux-2.6.37/fs/emmcfs/fsm.c',185,189,'void fsm_put_tree(struct emmcfs_fsm_info *fsm)\r\n{\r\n	fsm_print_subtree(&fsm->tree, fsm->tree.root,\r\n			  fsm->data, fsm->length_in_bytes);\r\n}','interface for  fsm_print_subtree\n\nNo pre check\nNo logging\nNo post check\n','1','1','',''),
 (394425,'emmcfs_fsm_build_management()','D:','/usr/src/linux-2.6.37/fs/emmcfs/fsm.c',196,287,'/**\r\n * @brief		build free space management\r\n * @param [in,out] sb	VFS superblock\r\n * @return		Returns 0 on success, -errno on failure\r\n */\r\nint emmcfs_fsm_build_management(struct super_block *sb)\r\n{\r\n	struct emmcfs_fsm_info *fsm;\r\n	struct emmcfs_sb_info *sbi = sb->s_fs_info;\r\n	int err = 0;\r\n	int page_index = 0;\r\n\r\n	fsm = kzalloc(sizeof(struct emmcfs_fsm_info), GFP_KERNEL);\r\n	if (!fsm)\r\n		return -ENOMEM;\r\n	fsm->page_count = sbi->lebs_bm_blocks_count;\r\n\r\n	if (sbi->block_size_shift > PAGE_SHIFT)\r\n		fsm->page_count <<= sbi->block_size_shift - PAGE_SHIFT;\r\n	if (sbi->block_size_shift < PAGE_SHIFT) {\r\n		fsm->page_count >>= PAGE_SHIFT - sbi->block_size_shift;\r\n		if (!fsm->page_count)\r\n			fsm->page_count = 1;\r\n	}\r\n\r\n	fsm->sbi = sbi;\r\n	fsm->leb_bitmap_inode = NULL;\r\n\r\n	fsm->free_space_start = le64_to_cpu(EMMCFS_RAw_EXSB(sbi)->\r\n			volume_body.begin);\r\n	spin_lock_init(&fsm->lock);\r\n\r\n	fsm->pages = NULL;\r\n	fsm->page_is_dirt = NULL;\r\n\r\n	fsm->pages = kzalloc(sizeof(*fsm->pages) * fsm->page_count, GFP_KERNEL);\r\n\r\n	if (!fsm->pages) {\r\n		err = -ENOMEM;\r\n		goto fail;\r\n	}\r\n\r\n	fsm->page_is_dirt = kzalloc(sizeof(int) * fsm->page_count, GFP_KERNEL);\r\n\r\n	if (!fsm->page_is_dirt) {\r\n		err = -ENOMEM;\r\n		goto fail;\r\n	}\r\n\r\n	fsm->leb_bitmap_inode =\r\n		emmcfs_iget(sb, EMMCFS_LEB_BITMAP_INO, NULL);\r\n\r\n	if (!fsm->leb_bitmap_inode) {\r\n		err = -EINVAL;\r\n		goto fail;\r\n	}\r\n\r\n	for (page_index = 0; page_index < fsm->page_count ; page_index++)\r\n		fsm->pages[page_index] = ERR_PTR(-EIO);\r\n\r\n	for (page_index = 0; page_index < fsm->page_count ; page_index++) {\r\n		fsm->pages[page_index] =\r\n			read_mapping_page(fsm->leb_bitmap_inode->i_mapping,\r\n				page_index, NULL);\r\n		if (IS_ERR(fsm->pages[page_index])) {\r\n			err = (int)fsm->pages[page_index];\r\n			goto fail;\r\n		}\r\n	}\r\n\r\n	fsm->data = vmap(fsm->pages, fsm->page_count, VM_MAP, PAGE_KERNEL);\r\n\r\n	fsm->length_in_bytes = (sbi->lebs_bm_blocks_count-1) * sbi->block_size +\r\n		((sbi->lebs_bm_bits_in_last_block + 7) >> 3);\r\n\r\n	if (INIT_FSM_BTREE(&fsm->tree) != 0) {\r\n		vunmap((void *)fsm->data);\r\n		goto fail;\r\n	}\r\n\r\n	fsm_get_tree(fsm);\r\n\r\n	sbi->fsm_info = fsm;\r\n	return 0;\r\n\r\nfail:\r\n	for (page_index = 0; page_index < fsm->page_count; page_index++) {\r\n		if (!IS_ERR(fsm->pages[page_index]))\r\n			page_cache_release(fsm->pages[page_index]);\r\n	}\r\n	if (fsm->leb_bitmap_inode)\r\n		iput(fsm->leb_bitmap_inode);\r\n	kfree(fsm->pages);\r\n	kfree(fsm->page_is_dirt);\r\n	kfree(fsm);\r\n	return err;\r\n}\r\n','Object level\n\nNo pre check\nNo logging\nPost check -ENOMEM, -EINVAL, IS_ERR','15','62','',''),
 (394426,'emmcfs_sb_info.lebs_bm_blocks_count','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394427,'emmcfs_sb_info.block_size_shift','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394428,'emmcfs_sb_info.raw_superblock','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394429,'emmcfs_extended_super_block.volume_body','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394430,'emmcfs_fsm_info.page_is_dirt','S:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394431,'emmcfs_iget()','F:','/usr/src/linux-2.6.37/fs/emmcfs/inode.c',1720,1811,'/**\r\n * @brief		Method to read inode to inode cache\r\n * @param [in] sb	Pointer to superblock\r\n * @param [in] ino	Inode number\r\n * @return		Returns inode on success, ERR_PTR(errno) on failure\r\n */\r\nstruct inode *emmcfs_iget(struct super_block *sb, unsigned long ino,\r\n		struct emmcfs_find_data *find_data)\r\n{\r\n	struct inode		*inode;\r\n	int			ret = 0;\r\n	struct emmcfs_find_data *fdat;\r\n	struct emmcfs_sb_info			*sbi = sb->s_fs_info;\r\n\r\n	if (!find_data) {\r\n		fdat = kzalloc(sizeof(*fdat), GFP_KERNEL);\r\n		if (!fdat)\r\n			return ERR_PTR(-ENOMEM);\r\n	} else {\r\n		fdat = find_data;\r\n	}\r\n\r\n	EMMCFS_DEBUG_INO(\"inode #%lu\", ino);\r\n	inode = iget_locked(sb, ino);\r\n\r\n	if (!inode)\r\n		return ERR_PTR(-ENOMEM);\r\n\r\n	if (!(inode->i_state & I_NEW))\r\n		return inode;\r\n\r\n	/* Auxilary inodes */\r\n	switch (ino) {\r\n	case EMMCFS_CAT_TREE_INO:\r\n		inode->i_mapping->a_ops = &emmcfs_aops;\r\n		ret = emmcfs_parse_fork(inode, &EMMCFS_RAw_EXSB(sbi)->\r\n				catalog_tree_fork);\r\n		if (ret)\r\n			goto err_exit;\r\n		/* emmcfs_parse_fork already copied size in blocks\r\n		inode->i_size *= sbi->block_size; */\r\n\r\n		break;\r\n	case EMMCFS_LEB_BITMAP_INO:\r\n		inode->i_mapping->a_ops = &emmcfs_aops;\r\n		inode->i_size = sbi->lebs_bm_blocks_count * sbi->block_size;\r\n		ret = emmcfs_parse_fork(inode, &EMMCFS_RAw_EXSB(sbi)->\r\n				lebs_bitmap_fork);\r\n		if (ret)\r\n			goto err_exit;\r\n		break;\r\n	case EMMCFS_EXTENTS_TREE_INO:\r\n		inode->i_mapping->a_ops = &emmcfs_aops;\r\n\r\n		ret = emmcfs_parse_fork(inode, &EMMCFS_RAw_EXSB(sbi)->\r\n				extents_overflow_tree_fork);\r\n		if (ret)\r\n			goto err_exit;\r\n		break;\r\n	case EMMCFS_FREE_INODE_BITMAP_INO:\r\n		inode->i_mapping->a_ops = &emmcfs_aops;\r\n\r\n		ret = emmcfs_parse_fork(inode, &EMMCFS_RAw_EXSB(sbi)->\r\n				inode_num_bitmap_fork);\r\n		if (ret)\r\n			goto err_exit;\r\n		break;\r\n\r\n	case EMMCFS_HARDLINKS_AREA_INO:\r\n		inode->i_mapping->a_ops = &emmcfs_aops;\r\n\r\n		ret = emmcfs_parse_fork(inode, &EMMCFS_RAw_EXSB(sbi)->\r\n				hlinks_fork);\r\n		if (ret)\r\n			goto err_exit;\r\n\r\n		break;\r\n	default:\r\n		ret = emmcfs_read_inode(inode, fdat);\r\n		if (ret)\r\n			goto err_exit;\r\n		break;\r\n	}\r\n\r\n	EMMCFS_I(inode)->is_new = 0;\r\n	unlock_new_inode(inode);\r\n\r\n	if (!find_data)\r\n		kfree(fdat);\r\n	return inode;\r\n\r\nerr_exit:\r\n	EMMCFS_DEBUG_INO(\"inode #%lu read FAILED\", ino);\r\n	if (!find_data)\r\n		kfree(fdat);\r\n	iget_failed(inode);\r\n	return ERR_PTR(ret);\r\n}','Object level\nSwitching level\nParser level\n\nNo Pre check\nLogging EMMCFS_DEBUG_INO\nPost check ERR_PTR, -ENOMEM, ','14','55','RESOURCE_LEAK','leaked_storage : \"Variable \"\"fdat\"\" goes out of scope\"\r\n'),
 (394432,'emmcfs_sb_info.block_size','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394433,'emmcfs_sb_info.lebs_bm_bits_in_last_block','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394434,'iput()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394435,'emmcfs_fsm_destroy_management()','D:','/usr/src/linux-2.6.37/fs/emmcfs/fsm.c',293,319,'void form_new_adding_record(struct emmcfs_bnode *new_node, void **adding_record)\r\n{\r\n	struct emmcfs_generic_key *new_key = get_record(new_node, 0);\r\n	struct emmcfs_generic_key *forming_key;\r\n	struct generic_index_value *value;\r\n\r\n	kfree(*adding_record);\r\n	*adding_record = kmalloc(\r\n			sizeof(struct generic_index_value) + new_key->key_len,\r\n			GFP_KERNEL);\r\n	forming_key = (struct emmcfs_generic_key *)*adding_record;\r\n	value = (struct generic_index_value *)(*adding_record +\r\n							new_key->key_len);\r\n\r\n	memcpy(*adding_record, new_key, new_key->key_len);\r\n	forming_key->record_len = new_key->key_len +\r\n			sizeof(struct generic_index_value);\r\n	value->node_id = new_node->node_id;\r\n}','Object level\n\nPre check BUG_ON\nNo post check\nno logging\n\n','3','18','',''),
 (394436,'kmem_cache_destroy()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394437,'get_root_folder()','D:','/usr/src/linux-2.6.37/fs/emmcfs/inode.c',65,71,'static int get_root_folder(struct emmcfs_sb_info *sbi,\r\n		struct emmcfs_find_data *fd)\r\n{\r\n	return emmcfs_cattree_find(sbi, EMMCFS_ROOTDIR_OBJ_ID,\r\n			EMMCFS_ROOTDIR_NAME, sizeof(EMMCFS_ROOTDIR_NAME), fd,\r\n			EMMCFS_BNODE_MODE_RO);\r\n}','interface of emmcfs_cattree_find\n\nNo pre check\nNo logging\nNo post check\n','1','1','',''),
 (394438,'emmcfs_parse_fork()','D:','/usr/src/linux-2.6.37/fs/emmcfs/inode.c',79,103,'/**\r\n * @brief		Checks and copy layout fork into run time fork\r\n * @param [out] ifork	Run time fork\r\n * @param [in] lfork	Layout fork\r\n * @return		0 on succes, < 0 otherwise\r\n */\r\nint emmcfs_parse_fork(struct inode *inode, struct emmcfs_fork *lfork)\r\n{\r\n	struct emmcfs_fork_info *ifork = &EMMCFS_I(inode)->fork;\r\n	struct emmcfs_sb_info *sbi = inode->i_sb->s_fs_info;\r\n\r\n	if (!is_fork_valid(lfork))\r\n		return -EINVAL;\r\n\r\n	inode->i_size = le64_to_cpu(lfork->internal.fork.size_in_bytes);\r\n	ifork->total_block_count =\r\n			le32_to_cpu(lfork->internal.fork.total_blocks_count);\r\n\r\n	/* TODO: remove this when we start supporting embedding file data into\r\n	 * the fork */\r\n	if (ifork->total_block_count * sbi->block_size < inode->i_size) {\r\n		EMMCFS_ERR(\"bad fork (blocks = %u, bytes = %lu)\",\r\n				ifork->total_block_count,\r\n				(long unsigned int)inode->i_size);\r\n		return -EINVAL;\r\n	}\r\n\r\n	emmcfs_lfork_to_rfork(lfork, ifork);\r\n\r\n	return 0;\r\n}','Switching  layer\nCall Parser layer\n\nPre check -EINVAL\nLogging EMMCFS_ERR\nPost check -EINVAL\n','3','11','',''),
 (394439,'get_entry_type()','D:','/usr/src/linux-2.6.37/fs/emmcfs/inode.c',137,151,'static unsigned char get_entry_type(int rec_type)\r\n{\r\n	if (rec_type & EMMCFS_CATALOG_FILE_RECORD) {\r\n		if (rec_type & EMMCFS_CATALOG_FILE_RECORD_SYMLINK)\r\n			return DT_LNK;\r\n		else\r\n			return DT_REG;\r\n	} else if (rec_type == EMMCFS_CATALOG_FOLDER_RECORD) {\r\n		return DT_DIR;\r\n	} else {\r\n		/* TODO :) */\r\n		BUG();\r\n		return DT_UNKNOWN;\r\n	}\r\n}','FSM layer\n\nPre check BUG\nNo logging\nNo post check but code check DT_LNK, DT_DIR, DT_UNKNOWN\n\n','4','8','',''),
 (394440,'get_hlink_value_page()','D:','/usr/src/linux-2.6.37/fs/emmcfs/inode.c',153,182,'static inline struct page *get_hlink_value_page(struct inode *hlink_area_ino,\r\n		hlink_id_t hlink_id, u16 *page_offset)\r\n{\r\n	/*  Binary representation of hlink_id:\r\n	 *\r\n	 *  bit_n    ...14 13 12|11 10  9  8  7  6  5  4  3  2| 1  0\r\n	 *  val    chunk number |   page in chunk             |pos in page\r\n	 */\r\n	pgoff_t page_index;\r\n	int chunk_n = hlink_id >> EMMCFS_LOG_BITS_PER_PAGE;\r\n\r\n	BUILD_BUG_ON(PAGE_SHIFT < EMMCFS_LOG_ONE_HLINK_DATA_SZ);\r\n\r\n	/* First page in the chunk */\r\n	page_index = (chunk_n << (EMMCFS_LOG_BITS_PER_PAGE -\r\n				EMMCFS_LOG_HLINKS_PER_PAGE)) + chunk_n;\r\n	/* First data page in the chunk (next page after bitmap) */\r\n	page_index++;\r\n\r\n	/* Add offset to the goal data page in the chunk */\r\n	page_index += (hlink_id & EMMCFS_BITMAP_PAGE_MASK) >>\r\n		EMMCFS_LOG_HLINKS_PER_PAGE;\r\n\r\n	/* Number of the hlink inside the page */\r\n	*page_offset = hlink_id & EMMCFS_HLINK_IN_PAGE_MASK;\r\n	/* Offset to the hlink in bytes */\r\n	*page_offset <<= EMMCFS_LOG_ONE_HLINK_DATA_SZ;\r\n\r\n	return read_mapping_page(hlink_area_ino->i_mapping, page_index, NULL);\r\n}','Switching layer\nCall Memory layer\n\nPre check BUILD_BUG_ON\nNo logging\nNo post check\n','1','9','',''),
 (394441,'get_params_on_hlink_id()','D:','/usr/src/linux-2.6.37/fs/emmcfs/inode.c',185,197,'static inline void get_params_on_hlink_id(struct inode *hlinks_inode,\r\n		hlink_id_t hlink_id, u64 *obj_id, int *rec_type)\r\n{\r\n	u16 page_offset;\r\n	struct page *page = get_hlink_value_page(hlinks_inode, hlink_id,\r\n			&page_offset);\r\n	struct emmcfs_catalog_folder_record *value_area =\r\n			kmap(page) + page_offset;\r\n\r\n	*obj_id = le64_to_cpu(value_area->object_id);\r\n	*rec_type = le16_to_cpu(value_area->common.record_type);\r\n	kunmap(page);\r\n}\r\n','Switching layer\n\nNo pre check\nNo logging\nNo post check\n','1','6','',''),
 (394442,'kmap()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394443,'emmcfs_catalog_folder_record.common','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394444,'kunmap()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394445,'free_hlink_data()','D:','/usr/src/linux-2.6.37/fs/emmcfs/inode.c',199,229,'static int free_hlink_data(struct emmcfs_sb_info *sbi, hlink_id_t hlink_id)\r\n{\r\n	int chunk_n = hlink_id >> EMMCFS_LOG_BITS_PER_PAGE;\r\n	int page_index = (chunk_n <<\r\n			(EMMCFS_LOG_BITS_PER_PAGE - EMMCFS_LOG_HLINKS_PER_PAGE))\r\n			+ chunk_n;\r\n	hlink_id_t id_offset = chunk_n << EMMCFS_LOG_BITS_PER_PAGE;\r\n\r\n	struct page *page;\r\n	void *data;\r\n\r\n	page = read_mapping_page(sbi->hard_links.inode->i_mapping,\r\n			page_index, NULL);\r\n	if (IS_ERR(page))\r\n		return PTR_ERR(page);\r\n\r\n	data = kmap(page);\r\n\r\n	EMMCFS_ADD_CHUNK(sbi->hard_links.inode, &page, 1);\r\n	BUG_ON(!test_and_clear_bit(hlink_id - id_offset, data));\r\n\r\n	if (sbi->hard_links.last_used_id > hlink_id)\r\n		sbi->hard_links.last_used_id = hlink_id;\r\n\r\n\r\n	set_page_dirty_lock(page);\r\n	kunmap(page);\r\n	page_cache_release(page);\r\n\r\n	return 0;\r\n}','Switching layer\n\nNo pre check\nNo logging\nPost check PTR_ERR, BUG_ON\n','3','17','',''),
 (394446,'emmcfs_sb_info.hard_links','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394447,'hard_links.inode','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394448,'hard_links.last_used_id','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394449,'emmcfs_readdir()','D:','/usr/src/linux-2.6.37/fs/emmcfs/inode.c',238,372,'/**\r\n * @brief		Method to read (list) directory\r\n * @param [in] filp	File pointer\r\n * @param [in] dirent	Directory entry\r\n * @param [in] filldir	Callback filldir for kernel\r\n * @return		Count of files/dirs\r\n */\r\nstatic int emmcfs_readdir(struct file *filp, void *dirent, filldir_t filldir)\r\n{\r\n	struct inode			*inode = filp->f_path.dentry->d_inode;\r\n	struct dentry			*dentry = filp->f_dentry;\r\n	int				ret = 0;\r\n	unsigned int			str_len;\r\n	char				str[2*EMMCFS_CAT_MAX_NAME+1];\r\n	struct emmcfs_sb_info *sbi = inode->i_sb->s_fs_info;\r\n\r\n	int pos = -1;\r\n	struct emmcfs_bnode *bnode = NULL;\r\n	struct emmcfs_cattree_key *key;\r\n\r\n	switch (filp->f_pos) {\r\n	case 0:\r\n		if (filldir(dirent, \".\", 1, filp->f_pos++, inode->i_ino,\r\n					DT_DIR))\r\n			goto exit;\r\n		/* fall through */\r\n	case 1:\r\n		if (filldir(dirent, \"..\", 2, filp->f_pos++,\r\n			dentry->d_parent->d_inode->i_ino, DT_DIR))\r\n			goto exit;\r\n		break;\r\n	default:\r\n		if (!filp->private_data)\r\n			return 0;\r\n		break;\r\n	}\r\n\r\n	EMMCFS_DEBUG_MUTEX(\"cattree mutex r lock\");\r\n	mutex_r_lock(sbi->catalog_tree->rw_tree_lock);\r\n	EMMCFS_DEBUG_MUTEX(\"cattree mutex r lock succ\");\r\n	if (!filp->private_data) {\r\n		bnode = emmcfs_find_first_catalog_child(inode, &pos);\r\n	} else {\r\n		struct emmcfs_cattree_key *key = filp->private_data;\r\n		bnode = emmcfs_btree_find(sbi->catalog_tree, &key->gen_key,\r\n				&pos, EMMCFS_BNODE_MODE_RO);\r\n	}\r\n\r\n	if (IS_ERR(bnode)) {\r\n		ret = PTR_ERR(bnode);\r\n		goto fail;\r\n	}\r\n\r\n	key = emmcfs_get_btree_record(bnode, pos);\r\n	while (1) {\r\n		unsigned char d_type = DT_UNKNOWN;\r\n		__u64 obj_id;\r\n		struct emmcfs_catalog_common_record *cattree_val;\r\n		int rec_type;\r\n\r\n		if (key->parent_id != cpu_to_le64(inode->i_ino))\r\n			goto exit;\r\n\r\n		BUG_ON(!key);\r\n		cattree_val = get_value_pointer(key);\r\n		rec_type = cattree_val->record_type;\r\n		if (rec_type != EMMCFS_CATALOG_HLINK_RECORD) {\r\n			obj_id = le64_to_cpu(\r\n				((struct emmcfs_catalog_folder_record *)\r\n						cattree_val)->object_id);\r\n		} else {\r\n			hlink_id_t hlink_id = le64_to_cpu(\r\n			((struct emmcfs_catalog_hlink_record *)cattree_val)->\r\n				hlink_id);\r\n			get_params_on_hlink_id(sbi->hard_links.inode, hlink_id,\r\n					&obj_id, &rec_type);\r\n		}\r\n\r\n		str_len = utf16s_to_utf8s(\r\n				(const wchar_t *) key->name.unicode_str,\r\n				le32_to_cpu(key->name.length),\r\n				UTF16_LITTLE_ENDIAN,\r\n				str, 2*EMMCFS_CAT_MAX_NAME);\r\n		str[str_len] = 0;\r\n\r\n		d_type = get_entry_type(rec_type);\r\n		ret = filldir(dirent, str, str_len,\r\n				filp->f_pos, obj_id, d_type);\r\n\r\n		if (ret) {\r\n			/* Buffer is over, there will be another call of\r\n			 * the read_dir */\r\n			struct emmcfs_cattree_key *prev_key =\r\n				filp->private_data;\r\n\r\n			/* Check buffer for key is too small, or there is\r\n			 * no buffer at all */\r\n			if (!prev_key || prev_key->gen_key.key_len <=\r\n					key->gen_key.key_len) {\r\n				kfree(filp->private_data);\r\n				filp->private_data = kmalloc(\r\n						key->gen_key.key_len,\r\n						GFP_KERNEL);\r\n				if (!filp->private_data) {\r\n					ret = -ENOMEM;\r\n					goto fail;\r\n				}\r\n			}\r\n\r\n			/* Store next key for next run */\r\n			memcpy(filp->private_data, key, key->gen_key.key_len);\r\n			ret = 0;\r\n			goto exit;\r\n		}\r\n\r\n		key = emmcfs_get_next_btree_record(&bnode, &pos);\r\n\r\n		if ( PTR_ERR(key) == -ENOENT ||\r\n				key->parent_id != cpu_to_le64(inode->i_ino)) {\r\n			kfree(filp->private_data);\r\n			filp->private_data = NULL;\r\n			break;\r\n		} else if (IS_ERR(key)) {\r\n			ret = PTR_ERR(key);\r\n			goto fail;\r\n		}\r\n	}\r\n\r\nexit:\r\n	/*EMMCFS_DEBUG_INO(\"finished ok\");*/\r\n	emmcfs_put_bnode(bnode);\r\n	EMMCFS_DEBUG_MUTEX(\"cattree mutex r lock un\");\r\n	mutex_r_unlock(sbi->catalog_tree->rw_tree_lock);\r\n	return ret;\r\nfail:\r\n	EMMCFS_DEBUG_INO(\"finished with err (%d)\", ret);\r\n	if (!IS_ERR(bnode))\r\n		emmcfs_put_bnode(bnode);\r\n	EMMCFS_DEBUG_MUTEX(\"cattree mutex r lock un\");\r\n	mutex_r_unlock(sbi->catalog_tree->rw_tree_lock);\r\n	return ret;\r\n}\r\n','Object layer\nFSM layer\nSwitching layer\nCall Parser layer\nMemory layer\n\nNo pre check\nLogging EMMCFS_DEBUG_MUTEX, EMMCFS_DEBUG_INO\nPost check IS_ERR, PTR_ERR, BUG_ON, -ENOMEM\n','18','75','',''),
 (394450,'file.f_pos','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'','');
INSERT INTO `emmcfs`.`element` VALUES  (394451,'emmcfs_readdir/filldir()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394452,'file.private_data','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394453,'down_read()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394454,'utf16s_to_utf8s()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394455,'up_read()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394456,'emmcfs_lookup()','D:','/usr/src/linux-2.6.37/fs/emmcfs/inode.c',382,444,'/**\r\n * @brief		Method to look up an entry in a directory\r\n * @param [in] dir	Parent directory\r\n * @param [in] direntry	Searching entry\r\n * @param [in] nd	Associated nameidata\r\n * @return		Returns pointer to found dentry,\r\n *			NULL if it is not found, ERR_PTR(errno) on failure\r\n */\r\nstatic struct dentry *emmcfs_lookup(struct inode *dir, struct dentry *dentry,\r\n					struct nameidata *nd)\r\n{\r\n	struct super_block		*sb = dir->i_sb;\r\n	struct emmcfs_sb_info		*sbi = sb->s_fs_info;\r\n	struct emmcfs_cattree_key	*key, *found_key;\r\n	struct inode			*found_inode = NULL;\r\n	struct emmcfs_bnode		*bnode;\r\n	struct emmcfs_find_data		fdat = {0};\r\n	struct emmcfs_catalog_folder_record *cattree_val;\r\n	u64 obj_id;\r\n\r\n\r\n	key = kzalloc(sizeof(*key), GFP_KERNEL);\r\n	if (!key)\r\n		return ERR_PTR(-ENOMEM);\r\n\r\n	key->parent_id = cpu_to_le64(dir->i_ino);\r\n	key->name.length = utf8s_to_utf16s(dentry->d_name.name,\r\n		min(dentry->d_name.len,\r\n				(unsigned int)EMMCFS_UNICODE_STRING_MAX_LEN+1),\r\n		key->name.unicode_str);\r\n\r\n	EMMCFS_DEBUG_MUTEX(\"cattree mutex r lock\");\r\n	mutex_r_lock(sbi->catalog_tree->rw_tree_lock);\r\n	EMMCFS_DEBUG_MUTEX(\"cattree mutex r lock succ\");\r\n	bnode = emmcfs_btree_find(sbi->catalog_tree, &key->gen_key, &fdat.pos,\r\n			EMMCFS_BNODE_MODE_RO);\r\n\r\n	found_key = emmcfs_get_btree_record(bnode, fdat.pos);\r\n	if (emmcfs_cattree_cmpfn(&found_key->gen_key, &key->gen_key)) {\r\n		emmcfs_put_bnode(bnode);\r\n		kfree(key);\r\n		goto splice;\r\n	}\r\n\r\n	cattree_val = get_value_pointer(found_key);\r\n	if (cattree_val->common.record_type != EMMCFS_CATALOG_HLINK_RECORD) {\r\n		obj_id = le64_to_cpu(cattree_val->object_id);\r\n	} else {\r\n		int rec_type;\r\n		hlink_id_t hlink_id = le64_to_cpu(\r\n			((struct emmcfs_catalog_hlink_record *)cattree_val)->\r\n				hlink_id);\r\n		get_params_on_hlink_id(sbi->hard_links.inode, hlink_id, &obj_id,\r\n				&rec_type);\r\n	}\r\n\r\n	fdat.bnode_id = le32_to_cpu(EMMCFS_BNODE_DSCR(bnode)->node_id);\r\n	fdat.bnode = bnode;\r\n	found_inode = emmcfs_iget(sb, obj_id, &fdat);\r\n	emmcfs_put_bnode(bnode);\r\n\r\n	if (IS_ERR(found_inode)) {\r\n		EMMCFS_DEBUG_MUTEX(\"cattree mutex r lock un\");\r\n		mutex_r_unlock(sbi->catalog_tree->rw_tree_lock);\r\n		return NULL;\r\n	}\r\nsplice:\r\n	EMMCFS_DEBUG_MUTEX(\"cattree mutex r lock un\");\r\n	mutex_r_unlock(sbi->catalog_tree->rw_tree_lock);\r\n	return d_splice_alias(found_inode, dentry);\r\n}\r\n','FSM layer\nSwitching layer\n\nNo pre check\nLogging EMMCFS_DEBUG_MUTEX\nPost check ERR_PTR, -ENOMEM\n','5','39','',''),
 (394457,'emmcfs_find_data.bnode_id','S:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394458,'d_splice_alias()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394459,'get_free_inode_n()','D:','/usr/src/linux-2.6.37/fs/emmcfs/inode.c',446,494,'static __u64 get_free_inode_n(struct emmcfs_sb_info *sbi)\r\n{\r\n	struct page *page;\r\n	void *data;\r\n	__u64 res = 0;\r\n	unsigned int page_index =\r\n		sbi->free_inode_bitmap.last_used >> EMMCFS_LOG_BITS_PER_PAGE;\r\n	unsigned int id_offset =\r\n		sbi->free_inode_bitmap.last_used & ~EMMCFS_BITMAP_PAGE_MASK;\r\n	__u64 find_from = sbi->free_inode_bitmap.last_used - id_offset;\r\n\r\n	while (res == 0) {\r\n		page = read_mapping_page(\r\n				sbi->free_inode_bitmap.inode->i_mapping,\r\n				page_index, NULL);\r\n\r\n		if (IS_ERR(page))\r\n			return PTR_ERR(page);\r\n\r\n		data = kmap(page);\r\n\r\n		spin_lock(&sbi->free_inode_bitmap.lock);\r\n		res = find_next_zero_bit(data, 1 << EMMCFS_LOG_BITS_PER_PAGE,\r\n				find_from);\r\n\r\n		if (res < (1 << EMMCFS_LOG_BITS_PER_PAGE)) {\r\n			BUG_ON(res + id_offset < EMMCFS_1ST_FILE_INO);\r\n			BUG_ON(test_and_set_bit(res, data));\r\n\r\n			EMMCFS_ADD_CHUNK(sbi->free_inode_bitmap.inode,\r\n					&page, 1);\r\n			res += id_offset;\r\n			sbi->free_inode_bitmap.last_used = res;\r\n			set_page_dirty_lock(page);\r\n		} else {\r\n			res = 0;\r\n		}\r\n\r\n		spin_unlock(&sbi->free_inode_bitmap.lock);\r\n		kunmap(page);\r\n		page_cache_release(page);\r\n\r\n		page_index++;\r\n		id_offset = page_index << EMMCFS_LOG_BITS_PER_PAGE;\r\n		find_from = 0;\r\n	}\r\n\r\n	return res;\r\n}\r\n','Switching layer\nCall Parser layer\n\nNo pre check\nNo logging\nPost check PTR_ERR, BUG_ON\n\n','4','28','',''),
 (394460,'emmcfs_sb_info.free_inode_bitmap','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394461,'free_inode_bitmap.last_used','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394462,'free_inode_bitmap.inode','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394463,'free_inode_bitmap.lock','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394464,'free_inode_n()','D:','/usr/src/linux-2.6.37/fs/emmcfs/inode.c',496,524,'static int free_inode_n(struct emmcfs_sb_info *sbi, __u64 inode_n)\r\n{\r\n	unsigned int page_index = inode_n >> EMMCFS_LOG_BITS_PER_PAGE;\r\n	unsigned int id_offset = inode_n & ~EMMCFS_BITMAP_PAGE_MASK;\r\n	void *data;\r\n	struct page *page;\r\n\r\n\r\n	page = read_mapping_page(sbi->free_inode_bitmap.inode->i_mapping,\r\n				page_index, NULL);\r\n	if (IS_ERR(page))\r\n		return PTR_ERR(page);\r\n	data = kmap(page);\r\n\r\n	EMMCFS_ADD_CHUNK(sbi->free_inode_bitmap.inode, &page, 1);\r\n	spin_lock(&sbi->free_inode_bitmap.lock);\r\n	BUG_ON(!test_and_clear_bit(inode_n - id_offset, data));\r\n\r\n	if (sbi->free_inode_bitmap.last_used > inode_n)\r\n		sbi->free_inode_bitmap.last_used = inode_n;\r\n\r\n	spin_unlock(&sbi->free_inode_bitmap.lock);\r\n\r\n	set_page_dirty_lock(page);\r\n	kunmap(page);\r\n	page_cache_release(page);\r\n\r\n	return 0;\r\n}','Memory  layer\nSwitching layer\n\nNo pre check\nNo logging\nPost check PTR_ERR, BUG_ON','3','18','',''),
 (394465,'emmcfs_unlink()','D:','/usr/src/linux-2.6.37/fs/emmcfs/inode.c',526,569,'static int emmcfs_unlink(struct inode *dir, struct dentry *dentry)\r\n{\r\n	struct inode			*inode = dentry->d_inode;\r\n	struct super_block		*sb = inode->i_sb;\r\n	struct emmcfs_sb_info		*sbi = sb->s_fs_info;\r\n	int				ret = 0;\r\n	struct emmcfs_cattree_key *rm_key;\r\n\r\n	rm_key = emmcfs_alloc_cattree_key(dentry->d_name.len, 0);\r\n	emmcfs_fill_cattree_key(rm_key, dir->i_ino, &dentry->d_name);\r\n	EMMCFS_DEBUG_MUTEX(\"cattree mutex w lock\");\r\n	mutex_w_lock(sbi->catalog_tree->rw_tree_lock);\r\n	EMMCFS_DEBUG_MUTEX(\"cattree mutex w lock succ\");\r\n	ret = emmcfs_btree_remove(sbi->catalog_tree, &rm_key->gen_key);\r\n	EMMCFS_DEBUG_MUTEX(\"cattree mutex w lock un\");\r\n	mutex_w_unlock(sbi->catalog_tree->rw_tree_lock);\r\n	if (ret)\r\n		goto exit;\r\n\r\n	inode_dec_link_count(inode);\r\n	/* NB: in prototype all files have only 1 hard link */\r\n	EMMCFS_DEBUG_INO(\"remove \'%s\', ino = %lu\", dentry->d_iname,\r\n			inode->i_ino);\r\n	if (inode->i_nlink == 0) {\r\n		if (EMMCFS_I(inode)->hlink_id != INVALID_HLINK_ID) {\r\n			/* Object is hardlink */\r\n			ret = free_hlink_data(sbi, EMMCFS_I(inode)->hlink_id);\r\n			if (ret)\r\n				goto exit;\r\n		}\r\n		ret = free_inode_n(sbi, inode->i_ino);\r\n		if (ret)\r\n			goto exit;\r\n	/* TODO - prevents inode number exhaust - no analogy found on other\r\n	 * filesystems, seems others use ordered numeration, do in such a way*/\r\n		remove_inode_hash(dentry->d_inode);\r\n	}\r\n\r\n	dir->i_size--;\r\n	emmcfs_write_inode_to_bnode(dir);\r\nexit:\r\n	kfree(rm_key);\r\n	return ret;\r\n}','Switching layer\nFSM layer\n\nNo pre check\nLogging EMMCFS_DEBUG_MUTEX, EMMCFS_DEBUG_INO\nNo post check\n','6','30','',''),
 (394466,'remove_inode_hash()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394467,'emmcfs_write_inode_to_bnode()','F:','/usr/src/linux-2.6.37/fs/emmcfs/inode.c',1518,1566,'static int emmcfs_write_inode_to_bnode(struct inode *inode)\r\n{\r\n	struct super_block *sb = inode->i_sb;\r\n	struct emmcfs_sb_info *sbi = sb->s_fs_info;\r\n	struct emmcfs_bnode *bnode = NULL;\r\n	struct emmcfs_find_data fd = {0};\r\n	struct page *page = NULL;\r\n	int ret = 0;\r\n	void *value_area;\r\n\r\n	if (EMMCFS_I(inode)->hlink_id != INVALID_HLINK_ID) {\r\n		u16 page_offset;\r\n		page = get_hlink_value_page(sbi->hard_links.inode,\r\n			EMMCFS_I(inode)->hlink_id, &page_offset);\r\n		value_area = kmap(page) + page_offset;\r\n	} else {\r\n		EMMCFS_DEBUG_MUTEX(\"cattree mutex w lock\");\r\n		mutex_w_lock(sbi->catalog_tree->rw_tree_lock);\r\n		EMMCFS_DEBUG_MUTEX(\"cattree mutex w lock succ\");\r\n		/* Get record for current inode from the catalog tree */\r\n		ret = emmcfs_cattree_find(sbi,\r\n				EMMCFS_I(inode)->parent_id,\r\n				EMMCFS_I(inode)->name,\r\n				strlen(EMMCFS_I(inode)->name), &fd,\r\n				EMMCFS_BNODE_MODE_RW);\r\n		if (ret)\r\n			goto exit_unlock;\r\n\r\n		bnode = fd.bnode;\r\n		value_area = get_value_pointer(\r\n				emmcfs_get_btree_record(bnode, fd.pos));\r\n	}\r\n	emmcfs_fill_cattree_value(inode, value_area);\r\n\r\n\r\n	if (EMMCFS_I(inode)->hlink_id == INVALID_HLINK_ID) {\r\n		emmcfs_mark_bnode_dirty(bnode);\r\n		emmcfs_put_bnode(bnode);\r\nexit_unlock:\r\n		EMMCFS_DEBUG_MUTEX(\"cattree mutex w lock un\");\r\n		mutex_w_unlock(sbi->catalog_tree->rw_tree_lock);\r\n	} else {\r\n		BUG_ON(!page);\r\n		kunmap(page);\r\n		set_page_dirty_lock(page);\r\n	}\r\n\r\n	return ret;\r\n}','FSM layer\nSwitching layer\n\ncall Parser lavel\n\nNo pre check\nLogging EMMCFS_DEBUG_MUTEX, \nPost check BUG_ON','4','29','',''),
 (394468,'emmcfs_find_new_block()','D:','/usr/src/linux-2.6.37/fs/emmcfs/inode.c',578,647,'sector_t emmcfs_find_new_block(struct emmcfs_inode_info *inode_info,\r\n				  struct emmcfs_fsm_info *fsm, sector_t iblock,\r\n				  sector_t *blk_cnt)\r\n{\r\n	struct emmcfs_fork_info *fork = &inode_info->fork;\r\n	sector_t rc = 0;\r\n	sector_t offset = 0;\r\n	sector_t start_position = inode_info->fork.total_block_count;\r\n	sector_t delta = iblock - start_position;\r\n\r\n	if (delta && (*blk_cnt <= delta))\r\n			*blk_cnt = delta + 1;\r\n\r\n	if (start_position == 0) {\r\n		rc = emmcfs_get_free_block(fsm,\r\n					   fsm->free_space_start, *blk_cnt);\r\n		if (rc) {\r\n			fork->used_extents = 1;\r\n			fork->extents[0].first_block = rc;\r\n			fork->extents[0].block_count = 0;\r\n			goto pass_ok;\r\n		}\r\n		return 0;\r\n	}\r\n\r\n	if (fork->used_extents == EMMCFS_EXTENTS_COUNT_IN_FORK) {\r\n		/*last extent in fork*/\r\n		int i;\r\n		for (i = 0; i < EMMCFS_EXTENTS_COUNT_IN_FORK; i++)\r\n			offset += fork->extents[i].block_count;\r\n		if (offset == start_position) {\r\n			/*allocate block after last block in last extent*/\r\n			offset =\r\n			  fork->extents[fork->used_extents-1].first_block +\r\n			  fork->extents[fork->used_extents-1].block_count;\r\n\r\n			rc = emmcfs_get_free_block(fsm, offset, *blk_cnt);\r\n			if (rc == 0)\r\n				return 0;\r\n\r\n			if (rc == offset)\r\n				goto pass_ok;\r\n		}\r\n		rc = emmcfs_exttree_add_block(inode_info, iblock, *blk_cnt);\r\n		if (rc) {\r\n			fork->total_block_count += *blk_cnt;\r\n			return rc;\r\n		}\r\n		return 0;\r\n	}\r\n\r\n	offset = fork->extents[fork->used_extents-1].first_block +\r\n		 fork->extents[fork->used_extents-1].block_count;\r\n\r\n	rc = emmcfs_get_free_block(fsm, offset, *blk_cnt);\r\n	if (rc == 0)\r\n		return 0;\r\n\r\n	if (rc == offset)\r\n		goto pass_ok;\r\n\r\n	fork->used_extents++;\r\n	fork->extents[fork->used_extents-1].first_block = rc;\r\n	fork->extents[fork->used_extents-1].block_count = 0;\r\n\r\npass_ok:\r\n	fork->total_block_count += *blk_cnt;\r\n	fork->extents[fork->used_extents-1].block_count += *blk_cnt;\r\n	return rc + delta;\r\n}','Allocation of blocks and extents\nObject level','13','45','',''),
 (394469,'emmcfs_find_old_block()','D:','/usr/src/linux-2.6.37/fs/emmcfs/inode.c',657,673,'/**\r\n * @brief		Logical to phisical block numbers translation for\r\n *			allocated blocks.\r\n * @param [in] inode_info	inode fork\r\n * @param [in] iblock		requested logical block number\r\n * @param [  ] max_blocks\r\n * @return		Phisical block number\r\n */\r\nsector_t emmcfs_find_old_block(struct emmcfs_inode_info *inode_info,\r\n				sector_t iblock, __u32 *max_blocks)\r\n{\r\n	struct emmcfs_fork_info *fork = &inode_info->fork;\r\n	int i;\r\n	sector_t iblock_start = iblock;\r\n\r\n	for (i = 0; i < fork->used_extents; i++)\r\n		if (iblock < fork->extents[i].block_count) {\r\n			*max_blocks = fork->extents[i].block_count - iblock;\r\n			return fork->extents[i].first_block + iblock;\r\n		}\r\n		else\r\n			iblock -= fork->extents[i].block_count;\r\n\r\n	return emmcfs_exttree_get_block(inode_info, iblock_start, max_blocks);\r\n}','Parser level\n\nNo pre check\nNo post check\nNo logging\n','3','11','',''),
 (394470,'emmcfs_sb_info.log_blocks_in_leb','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394471,'inode_add_bytes()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394472,'emmcfs_inode_info.phys_size','S:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394473,'emmcfs_readpage()','D:','/usr/src/linux-2.6.37/fs/emmcfs/inode.c',749,756,'static int emmcfs_readpage(struct file *file, struct page *page)\r\n{\r\n	int err = 0;\r\n\r\n	err = mpage_readpage(page, emmcfs_get_block);\r\n\r\n	return err;\r\n}','interface of mpage_readpages\n\nNo pre check\nNo logging\nNo post check\n','1','3','',''),
 (394474,'mpage_readpage()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394475,'emmcfs_get_block','g:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394476,'emmcfs_readpages()','D:','/usr/src/linux-2.6.37/fs/emmcfs/inode.c',758,766,'static int emmcfs_readpages(struct file *file, struct address_space *mapping,\r\n		struct list_head *pages, unsigned nr_pages)\r\n{\r\n	int err = 0;\r\n\r\n	err = mpage_readpages(mapping, pages, nr_pages,  emmcfs_get_block);\r\n\r\n	return err;\r\n}','interface of mpage_readpages\n\nNo pre check\nNo logging\nNo post check\n','1','3','',''),
 (394477,'mpage_readpages()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394478,'emmcfs_writepage()','D:','/usr/src/linux-2.6.37/fs/emmcfs/inode.c',768,771,'static int emmcfs_writepage(struct page *page, struct writeback_control *wbc)\r\n{\r\n	return mpage_writepage(page, emmcfs_get_block, wbc);\r\n}','interface of mpage_writepage\n\nNo pre check\nNo logging\nNo post check\n','1','1','',''),
 (394479,'mpage_writepage()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394480,'emmcfs_write_special_file()','D:','/usr/src/linux-2.6.37/fs/emmcfs/inode.c',773,806,'static int emmcfs_write_special_file(struct emmcfs_sb_info *sbi,\r\n		unsigned int file_type)\r\n{\r\n	struct address_space *mapping = NULL;\r\n	struct writeback_control wbc;\r\n\r\n	switch (file_type) {\r\n	case (EMMCFS_CAT_TREE_INO):\r\n		mapping = sbi->catalog_tree->inode->i_mapping;\r\n	break;\r\n	case (EMMCFS_LEB_BITMAP_INO):\r\n		mapping = sbi->fsm_info->leb_bitmap_inode->i_mapping;\r\n	break;\r\n	case (EMMCFS_EXTENTS_TREE_INO):\r\n		mapping = sbi->extents_tree->inode->i_mapping;\r\n	break;\r\n	case (EMMCFS_FREE_INODE_BITMAP_INO):\r\n		mapping = sbi->free_inode_bitmap.inode->i_mapping;\r\n	break;\r\n	case (EMMCFS_HARDLINKS_AREA_INO):\r\n		mapping = sbi->hard_links.inode->i_mapping;\r\n	break;\r\n	default:\r\n		return -EINVAL;\r\n	break;\r\n	}\r\n\r\n	wbc.sync_mode = WB_SYNC_ALL;\r\n	wbc.nr_to_write = LONG_MAX;\r\n	wbc.range_start = 0;\r\n	wbc.range_end = LLONG_MAX;\r\n\r\n	return mpage_writepages(mapping, &wbc, emmcfs_get_block);\r\n}','FSM layer\nSwitching layer\n\nNo pre check\nNo logging\nPost check -EINVAL\n','2','19','',''),
 (394481,'writeback_control.sync_mode','S:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394482,'writeback_control.nr_to_write','S:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394483,'writeback_control.range_start','S:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394484,'writeback_control.range_end','S:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394485,'mpage_writepages()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394486,'emmcfs_writepages()','D:','/usr/src/linux-2.6.37/fs/emmcfs/inode.c',815,864,'/**\r\n * @brief		Write some dirty pages\r\n * @param [in] mapping	address space mapping (holds pages)\r\n * @param [in] wbc	writeback control - how many pages to write and write\r\n * mode\r\n * @return		Returns 0 on success, errno on failure\r\n */\r\nstatic int emmcfs_writepages(struct address_space *mapping,\r\n		struct writeback_control *wbc)\r\n{\r\n	struct super_block *sb = mapping->host->i_sb;\r\n	struct emmcfs_sb_info *sbi = sb->s_fs_info;\r\n	int error = 0;\r\n			EMMCFS_DEBUG_MUTEX(\"cattree mutex w lock\");\r\n			EMMCFS_DEBUG_MUTEX(\"cattree mutex w lock succ\");\r\n\r\n	if ((!test_option(sbi, SNAPSHOT)) ||\r\n			(mapping->host->i_ino >= EMMCFS_1ST_FILE_INO))\r\n		goto write;\r\n\r\n	if (!sbi->catalog_tree)\r\n		goto write;\r\n\r\n	mutex_w_lock(sbi->catalog_tree->rw_tree_lock);\r\n	EMMCFS_DEBUG_SNAPSHOT(\"Call to commit snapshot\");\r\n	error = EMMCFS_COMMIT_SNAPSHOT(sbi);\r\n	if (error) {\r\n				EMMCFS_DEBUG_MUTEX(\"cattree mutex w lock un\");\r\n		mutex_w_unlock(sbi->catalog_tree->rw_tree_lock);\r\n		goto write;\r\n	}\r\n\r\n	/* write ALL dirty meta pages to disk */\r\n	error = emmcfs_write_special_file(sbi, EMMCFS_CAT_TREE_INO);\r\n	error = emmcfs_write_special_file(sbi, EMMCFS_LEB_BITMAP_INO);\r\n	error = emmcfs_write_special_file(sbi, EMMCFS_EXTENTS_TREE_INO);\r\n	error = emmcfs_write_special_file(sbi, EMMCFS_FREE_INODE_BITMAP_INO);\r\n	error = emmcfs_write_special_file(sbi, EMMCFS_HARDLINKS_AREA_INO);\r\n\r\n	if (error) {\r\n				EMMCFS_DEBUG_MUTEX(\"cattree mutex w lock un\");\r\n		mutex_w_unlock(sbi->catalog_tree->rw_tree_lock);\r\n		goto exit;\r\n	}\r\n	/* clear snapshot from disk */\r\n	error = EMMCFS_CLEAR_SNAPSHOT(sbi);\r\n\r\n			EMMCFS_DEBUG_MUTEX(\"cattree mutex w lock un\");\r\n	mutex_w_unlock(sbi->catalog_tree->rw_tree_lock);\r\n\r\nexit:\r\n	return error;\r\n\r\nwrite:\r\n	return mpage_writepages(mapping, wbc, emmcfs_get_block);\r\n\r\n}','interface of mpage_writepages\n\nNo pre check\nLogging EMMCFS_DEBUG_MUTEX, EMMCFS_DEBUG_SNAPSHOT\nNo post check\n','6','30','',''),
 (394487,'emmcfs_sb_info.mount_options','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394488,'emmcfs_write_begin()','D:','/usr/src/linux-2.6.37/fs/emmcfs/inode.c',866,883,'static int emmcfs_write_begin(struct file *file, struct address_space *mapping,\r\n			loff_t pos, unsigned len, unsigned flags,\r\n			struct page **pagep, void **fsdata)\r\n{\r\n#if LINUX_VERSION_CODE == KERNEL_VERSION(2, 6, 35)\r\n	*pagep = NULL;\r\n	/* TODO:Possibly special variable instead mapping->host->i_size needed*/\r\n	return cont_write_begin(file, mapping, pos, len, flags, pagep, fsdata,\r\n			emmcfs_get_block, &EMMCFS_I(mapping->host)->phys_size);\r\n	/*return block_write_begin_newtrunc(file, mapping, pos, len, flags, pagep,\r\n				 fsdata, emmcfs_get_block);*/\r\n#elif LINUX_VERSION_CODE == KERNEL_VERSION(3, 0, 20)\r\n//ig	return block_write_begin(mapping, pos, len, flags, pagep,\r\n//ig				 emmcfs_get_block);\r\n#else\r\n//ig	BUILD_BUG();\r\n#endif\r\n}','interface of cont_write_begin or block_write_begin\n\nNo pre check\nNo logging\nPost check BUILD_BUG\n','1','4','',''),
 (394489,'emmcfs_write_end()','D:','/usr/src/linux-2.6.37/fs/emmcfs/inode.c',885,892,'static int emmcfs_write_end(struct file *file, struct address_space *mapping,\r\n			loff_t pos, unsigned len, unsigned copied,\r\n			struct page *page, void *fsdata)\r\n{\r\n	int rc = generic_write_end(file, mapping, pos, len, copied,\r\n				   page, fsdata);\r\n	return rc;\r\n}\r\n','interface for generic_write_end\n\nNo pre check\nNo logging\nNo post check\n','1','2','',''),
 (394490,'generic_write_end()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394491,'emmcfs_file_release()','D:','/usr/src/linux-2.6.37/fs/emmcfs/inode.c',894,898,'static int emmcfs_file_release(struct inode *inode, struct file *file)\r\n{\r\n	EMMCFS_DEBUG_INO(\"#%lu\", inode->i_ino);\r\n	return 0;\r\n}','interfeice to inode\n\nNo pre check\nLogging EMMCFS_DEBUG_INO\nNo post check\n','1','2','',''),
 (394492,'emmcfs_mkdir()','D:','/usr/src/linux-2.6.37/fs/emmcfs/inode.c',900,903,'static int emmcfs_mkdir(struct inode *dir, struct dentry *dentry, int mode)\r\n{\r\n	return emmcfs_create(dir, dentry, S_IFDIR | mode, NULL);\r\n}','interface for emmcfs_create\n\nNo pre check\nNo logging\nNo post check\n','1','1','',''),
 (394493,'emmcfs_create()','F:','/usr/src/linux-2.6.37/fs/emmcfs/inode.c',1465,1516,'/**\r\n * Standard callback to create file\r\n *\r\n */\r\nstatic int emmcfs_create(struct inode *dir, struct dentry *dentry, int mode,\r\n		struct nameidata *nd)\r\n{\r\n	struct super_block		*sb = dir->i_sb;\r\n	struct emmcfs_sb_info		*sbi = sb->s_fs_info;\r\n	struct inode			*inode;\r\n	char *saved_name;\r\n	int ret = 0;\r\n	/* TODO - ext2 does it - detrmine if it\'s necessary here */\r\n	/* dquot_initialize(dir); */\r\n\r\n	EMMCFS_DEBUG_INO(\"\'%s\' dir = %ld\", dentry->d_name.name, dir->i_ino);\r\n\r\n	if (emmcfs_unicode_strlen(dentry->d_name.name)\r\n			> EMMCFS_UNICODE_STRING_MAX_LEN)\r\n		return -ENAMETOOLONG;\r\n\r\n	inode = emmcfs_new_inode(dir, mode);\r\n	if (IS_ERR(inode))\r\n		return PTR_ERR(inode);\r\n\r\n	d_instantiate(dentry, inode);\r\n\r\n	saved_name = kmalloc(dentry->d_name.len + 1, GFP_KERNEL);\r\n	if (!saved_name) {\r\n		iput(inode);\r\n		return -ENOMEM;\r\n	}\r\n\r\n	strncpy(saved_name, dentry->d_name.name, dentry->d_name.len + 1);\r\n\r\n	EMMCFS_I(inode)->name = saved_name;\r\n	EMMCFS_I(inode)->parent_id = dir->i_ino;\r\n	EMMCFS_I(inode)->hlink_id = INVALID_HLINK_ID;\r\n\r\n	unlock_new_inode(inode);\r\n\r\n	EMMCFS_DEBUG_MUTEX(\"cattree mutex w lock\");\r\n	mutex_w_lock(sbi->catalog_tree->rw_tree_lock);\r\n	EMMCFS_DEBUG_MUTEX(\"cattree mutex w lock succ\");\r\n\r\n	emmcfs_add_new_cattree_object(inode, dir->i_ino, &dentry->d_name);\r\n\r\n	EMMCFS_DEBUG_MUTEX(\"cattree mutex w lock un\");\r\n	mutex_w_unlock(sbi->catalog_tree->rw_tree_lock);\r\n\r\n	dir->i_size++;\r\n	sbi->files_count++;\r\n	ret = emmcfs_write_inode_to_bnode(dir);\r\n\r\n	return ret;\r\n}\r\n','Object layer\nSwitching layer\nMemory layer\n\nPre check -ENAMETOOLONG\nLogging EMMCFS_DEBUG_INO\nPost check PTR_ERR, -ENOMEM\n','4','31','',''),
 (394494,'emmcfs_rmdir()','D:','/usr/src/linux-2.6.37/fs/emmcfs/inode.c',905,911,'static int emmcfs_rmdir(struct inode *dir, struct dentry *dentry)\r\n{\r\n	if (dentry->d_inode->i_size)\r\n		return -ENOTEMPTY;\r\n\r\n	return emmcfs_unlink(dir, dentry);\r\n}\r\n','interface of emmcfs_unlink\n\nPre check -ENOTEMPTY\nNo logging\nNo post check\n','2','3','',''),
 (394495,'emmcfs_direct_IO()','D:','/usr/src/linux-2.6.37/fs/emmcfs/inode.c',913,921,'static ssize_t emmcfs_direct_IO(int rw, struct kiocb *iocb,\r\n		const struct iovec *iov, loff_t offset, unsigned long nr_segs)\r\n{\r\n	struct file *file = iocb->ki_filp;\r\n	struct inode *inode = file->f_path.dentry->d_inode->i_mapping->host;\r\n\r\n	return blockdev_direct_IO(rw, iocb, inode, inode->i_sb->s_bdev, iov,\r\n			offset, nr_segs, emmcfs_get_block, NULL);\r\n}','interface of blockdev_direct_IO\n\nNo pre check\nNo logging\nNo post check\n','1','3','',''),
 (394496,'kiocb.ki_filp','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394497,'emmcfs_setsize()','D:','/usr/src/linux-2.6.37/fs/emmcfs/inode.c',940,973,'int emmcfs_setsize(struct inode *inode, loff_t newsize)\r\n{\r\n	loff_t oldsize;\r\n	int error;\r\n\r\n	error = inode_newsize_ok(inode, newsize);\r\n	if (error)\r\n		return error;\r\n\r\n	if (!(S_ISREG(inode->i_mode) || S_ISDIR(inode->i_mode) ||\r\n	    S_ISLNK(inode->i_mode)))\r\n		return -EINVAL;\r\n\r\n	if (IS_APPEND(inode) || IS_IMMUTABLE(inode))\r\n		return -EPERM;\r\n\r\n	error = block_truncate_page(inode->i_mapping,\r\n				    newsize, emmcfs_get_block);\r\n	if (error)\r\n		return error;\r\n\r\n	oldsize = inode->i_size;\r\n	i_size_write(inode, newsize);\r\n	truncate_pagecache(inode, oldsize, newsize);\r\n\r\n	emmcfs_truncate_blocks(inode, newsize);\r\n\r\n	inode->i_mtime = inode->i_ctime =\r\n			emmcfs_current_time(inode);\r\n\r\n	emmcfs_write_inode_to_bnode(inode);\r\n\r\n	return 0;\r\n}','FSM layer\nSwitching layer\n\nPre check by code\nNo logging\nPost check -EINVAL, -EPERM','8','19','',''),
 (394498,'inode_newsize_ok()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394499,'inode.i_flags','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394500,'block_truncate_page()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394501,'truncate_pagecache()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394502,'emmcfs_setattr()','D:','/usr/src/linux-2.6.37/fs/emmcfs/inode.c',975,1003,'int emmcfs_setattr(struct dentry *dentry, struct iattr *iattr)\r\n{\r\n	struct inode *inode = dentry->d_inode;\r\n	int error;\r\n\r\n	error = inode_change_ok(inode, iattr);\r\n	if (error)\r\n		return error;\r\n\r\n	if ((iattr->ia_valid & ATTR_SIZE) &&\r\n			iattr->ia_size != i_size_read(inode)) {\r\n		error = vmtruncate(inode, iattr->ia_size);\r\n		if (error)\r\n			return error;\r\n	}\r\n\r\n#if LINUX_VERSION_CODE == KERNEL_VERSION(2,6,35)\r\n	generic_setattr(inode, iattr);\r\n#elif LINUX_VERSION_CODE == KERNEL_VERSION(3,0,20)\r\n	setattr_copy(inode, iattr);\r\n#else\r\n//ig	BUILD_BUG();\r\n#endif\r\n\r\n/*	mark_inode_dirty(inode);*/\r\n	emmcfs_write_inode(inode, NULL);\r\n\r\n	return error;\r\n}','Switching layer\n\nPre check skip\nNo logging\nPost check ','5','14','',''),
 (394503,'inode_change_ok()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394504,'iattr.ia_valid','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394505,'iattr.ia_size','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394506,'vmtruncate()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394507,'emmcfs_write_inode()','F:','/usr/src/linux-2.6.37/fs/emmcfs/inode.c',1574,1608,'/**\r\n * @brief			Method to write inode\r\n * @param [in,out] inode	Pointer to inode to write\r\n * @param [in,out] wbc		Tells to writeback code what to do\r\n * @return			Returns 0 on success, errno on failure\r\n */\r\nint emmcfs_write_inode(struct inode *inode, struct writeback_control *wbc)\r\n{\r\n	struct super_block *sb = inode->i_sb;\r\n	struct emmcfs_sb_info *sbi = EMMCFS_SB(sb);\r\n	int ret = 0;\r\n\r\n	EMMCFS_DEBUG_INO(\"#%lu\", inode->i_ino);\r\n\r\n	/* Possibly, updating catalog tree on-disk structures should be here */\r\n	switch (inode->i_ino) {\r\n	case EMMCFS_LEB_BITMAP_INO:\r\n		break;\r\n	case EMMCFS_CAT_TREE_INO:\r\n		emmcfs_form_fork(&EMMCFS_RAw_EXSB(sbi)->\r\n				catalog_tree_fork, inode);\r\n		break;\r\n	case EMMCFS_EXTENTS_TREE_INO:\r\n		emmcfs_form_fork(&EMMCFS_RAw_EXSB(sbi)->\r\n				extents_overflow_tree_fork, inode);\r\n		break;\r\n	case EMMCFS_FREE_INODE_BITMAP_INO:\r\n		emmcfs_form_fork(&EMMCFS_RAw_EXSB(sbi)->\r\n				inode_num_bitmap_fork, inode);\r\n		break;\r\n	case EMMCFS_HARDLINKS_AREA_INO:\r\n		emmcfs_form_fork(&EMMCFS_RAw_EXSB(sbi)->hlinks_fork,\r\n				inode);\r\n		break;\r\n	default:\r\n		ret = emmcfs_write_inode_to_bnode(inode);\r\n	}\r\n\r\n	EMMCFS_DEBUG_INO(\"finished (ret = %d)\", ret);\r\n	return ret;\r\n}\r\n','FSM layer\n\nNo pre check\nLogging EMMCFS_DEBUG_INO\nNo post check\n','2','16','',''),
 (394508,'emmcfs_bmap()','D:','/usr/src/linux-2.6.37/fs/emmcfs/inode.c',1005,1008,'static sector_t emmcfs_bmap(struct address_space *mapping, sector_t block)\r\n{\r\n	return generic_block_bmap(mapping, block, emmcfs_get_block);\r\n}','interface for generic_block_bmap\n\nNo pre check\nNo logging\nNo post check\n','1','1','',''),
 (394509,'generic_block_bmap()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394510,'emmcfs_rename()','D:','/usr/src/linux-2.6.37/fs/emmcfs/inode.c',1010,1082,'int emmcfs_rename(struct inode *old_dir, struct dentry *old_dentry,\r\n		struct inode *new_dir, struct dentry *new_dentry)\r\n{\r\n	struct emmcfs_find_data fd;\r\n	struct emmcfs_sb_info *sbi = old_dir->i_sb->s_fs_info;\r\n	struct inode *mv_inode = old_dentry->d_inode;\r\n	int ret = 0;\r\n	struct emmcfs_cattree_key *rm_key = NULL;\r\n\r\n	if (new_dentry->d_inode) {\r\n		ret = emmcfs_unlink(new_dir, new_dentry);\r\n		if (ret)\r\n			return ret;\r\n	}\r\n\r\n	/* Find old record */\r\n	EMMCFS_DEBUG_MUTEX(\"cattree mutex w lock\");\r\n	mutex_w_lock(sbi->catalog_tree->rw_tree_lock);\r\n	EMMCFS_DEBUG_MUTEX(\"cattree mutex w lock succ\");\r\n\r\n	fd.bnode = NULL;\r\n	ret = emmcfs_cattree_find(sbi, old_dir->i_ino,\r\n			(char *) old_dentry->d_name.name,\r\n			old_dentry->d_name.len, &fd, EMMCFS_BNODE_MODE_RW);\r\n	if (ret) {\r\n		EMMCFS_DEBUG_MUTEX(\"cattree mutex w lock un\");\r\n		mutex_w_unlock(sbi->catalog_tree->rw_tree_lock);\r\n		return ret;\r\n	}\r\n\r\n	rm_key = emmcfs_get_btree_record(fd.bnode, fd.pos);\r\n	ret = emmcfs_btree_remove(sbi->catalog_tree, &rm_key->gen_key);\r\n	emmcfs_put_bnode(fd.bnode);\r\n	if (ret)\r\n		/* TODO change to some erroneous action */\r\n		BUG();\r\n\r\n	/* TODO - opaque work with mutexes - change to more evident scheme */\r\n	ret = emmcfs_add_new_cattree_object(mv_inode, new_dir->i_ino,\r\n			&new_dentry->d_name);\r\n	if (ret) {\r\n		/* TODO change to some erroneous action */\r\n		EMMCFS_ERR(\"can not rename #%d; old_dir_ino=%lu oldname=%s \"\r\n				\"new_dir_ino=%lu newname=%s\",\r\n				ret,\r\n				old_dir->i_ino, old_dentry->d_name.name,\r\n				new_dir->i_ino, new_dentry->d_name.name);\r\n		BUG();\r\n	}\r\n\r\n	EMMCFS_DEBUG_MUTEX(\"cattree mutex w lock un\");\r\n	mutex_w_unlock(sbi->catalog_tree->rw_tree_lock);\r\n\r\n	old_dir->i_size--;\r\n	new_dir->i_size++;\r\n\r\n	if (EMMCFS_I(mv_inode)->hlink_id == INVALID_HLINK_ID) {\r\n		char *saved_name;\r\n		EMMCFS_I(mv_inode)->parent_id = new_dir->i_ino;\r\n		kfree(EMMCFS_I(mv_inode)->name);\r\n		saved_name = kmalloc(new_dentry->d_name.len + 1, GFP_KERNEL);\r\n		if (!saved_name) {\r\n			iput(mv_inode);\r\n			return -ENOMEM;\r\n		}\r\n\r\n		strncpy(saved_name, new_dentry->d_name.name,\r\n				new_dentry->d_name.len + 1);\r\n		EMMCFS_I(mv_inode)->name = saved_name;\r\n	}\r\n\r\n	return ret;\r\n}\r\n','Object layer\nFSM layer\n\nNo pre check\nLogging EMMCFS_DEBUG_MUTEX, EMMCFS_ERR\nPost check EMMCFS_ERR, -ENOMEM\n\nIt is desirable to divide a set of actions on the standard functions or blocks.\n','8','42','',''),
 (394511,'emmcfs_inode_info.parent_id','S:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394512,'emmcfs_inode_info.name','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394513,'strncpy()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394514,'form_hlink_record()','D:','/usr/src/linux-2.6.37/fs/emmcfs/inode.c',1084,1097,'static void *form_hlink_record(hlink_id_t hlink_id,\r\n		ino_t par_ino_n, struct qstr *name)\r\n{\r\n	void *record = emmcfs_alloc_cattree_key(name->len,\r\n			EMMCFS_CATALOG_HLINK_RECORD);\r\n	struct emmcfs_catalog_hlink_record *hlink_val;\r\n	if (!IS_ERR(record)) {\r\n		emmcfs_fill_cattree_key(record, par_ino_n, name);\r\n		hlink_val = get_value_pointer(record);\r\n		hlink_val->hlink_id = cpu_to_le64(hlink_id);\r\n		hlink_val->common.record_type = EMMCFS_CATALOG_HLINK_RECORD;\r\n	}\r\n	return record;\r\n}\r\n','Object layer\nSwitching layer\n\nNo pre check\nNo logging\nNo post chec','2','8','',''),
 (394515,'emmcfs_catalog_hlink_record.common','S:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394516,'add_hlink_record()','D:','/usr/src/linux-2.6.37/fs/emmcfs/inode.c',1099,1108,'static int add_hlink_record(struct emmcfs_btree *cat_tree, hlink_id_t hlink_id,\r\n		ino_t par_ino_n, struct qstr *name)\r\n{\r\n	void *ins_rec = form_hlink_record(hlink_id, par_ino_n, name);\r\n	if (IS_ERR(ins_rec))\r\n		return PTR_ERR(ins_rec);\r\n	emmcfs_btree_insert(cat_tree, ins_rec);\r\n	kfree(ins_rec);\r\n	return 0;\r\n}','FSM layer\nSwitching layer\nObject layer\n\nNo pre check\nNo logging\nPost check IS_ERR, PTR_ERR','2','6','',''),
 (394517,'obtain_hlink_id()','D:','/usr/src/linux-2.6.37/fs/emmcfs/inode.c',1110,1161,'static hlink_id_t obtain_hlink_id(struct emmcfs_sb_info *sbi)\r\n{\r\n	struct page *page;\r\n	pgoff_t page_index = 0;\r\n	void *data = NULL;\r\n	hlink_id_t res = INVALID_HLINK_ID, find_from, id_offset;\r\n	int chunk_n = 0;\r\n\r\n\r\n	find_from = sbi->hard_links.last_used_id & EMMCFS_BITMAP_PAGE_MASK;\r\n\r\n	chunk_n = sbi->hard_links.last_used_id >> EMMCFS_LOG_BITS_PER_PAGE;\r\n	while (res == INVALID_HLINK_ID) {\r\n		page_index = (chunk_n <<\r\n			(EMMCFS_LOG_BITS_PER_PAGE - EMMCFS_LOG_HLINKS_PER_PAGE))\r\n			+ chunk_n;\r\n		id_offset = chunk_n << EMMCFS_LOG_BITS_PER_PAGE;\r\n		page = read_mapping_page(\r\n				sbi->hard_links.inode->i_mapping,\r\n				page_index, NULL);\r\n\r\n		if (IS_ERR(page)) {\r\n			EMMCFS_DEBUG_INO(\"error %ld\", PTR_ERR(page));\r\n			return INVALID_HLINK_ID;\r\n		}\r\n\r\n		data = kmap(page);\r\n\r\n		res = find_next_zero_bit(data, (1 << EMMCFS_LOG_BITS_PER_PAGE),\r\n				find_from);\r\n\r\n		if (res < (1 << EMMCFS_LOG_BITS_PER_PAGE)) {\r\n			/*BUG_ON(res + id_offset < EMMCFS_1ST_FILE_INO);*/\r\n			BUG_ON(test_and_set_bit(res, data));\r\n\r\n			EMMCFS_ADD_CHUNK(sbi->hard_links.inode, &page, 1);\r\n			res += id_offset;\r\n			sbi->hard_links.last_used_id = res;\r\n			set_page_dirty_lock(page);\r\n		} else {\r\n			res = INVALID_HLINK_ID;\r\n		}\r\n\r\n		kunmap(page);\r\n		page_cache_release(page);\r\n\r\n		chunk_n++;\r\n		find_from = 0;\r\n	}\r\n\r\n	return res;\r\n}\r\n','Switching layer\nCall Parser layer\n\nNo pre check\nLogging EMMCFS_DEBUG_INO\nPost check INVALID_HLINK_ID, BUG_ON\n','4','28','',''),
 (394518,'clone_data_into_hlink_area()','D:','/usr/src/linux-2.6.37/fs/emmcfs/inode.c',1163,1185,'hlink_id_t clone_data_into_hlink_area(struct emmcfs_sb_info *sbi, void *data,\r\n		u32 size)\r\n{\r\n	struct page *page;\r\n	hlink_id_t result;\r\n	u16 page_offset;\r\n\r\n	result = obtain_hlink_id(sbi);\r\n	if (result == INVALID_HLINK_ID)\r\n		return result;\r\n\r\n	page = get_hlink_value_page(sbi->hard_links.inode,\r\n			result, &page_offset);\r\n	if (IS_ERR(page))\r\n		return INVALID_HLINK_ID;\r\n\r\n	EMMCFS_ADD_CHUNK(sbi->hard_links.inode, &page, 1);\r\n	BUG_ON(size > (1 << EMMCFS_LOG_ONE_HLINK_DATA_SZ));\r\n	memcpy(kmap(page) + page_offset, data, size);\r\n	kunmap(page);\r\n	set_page_dirty_lock(page);\r\n	return result;\r\n}','Mmemory layer\n\nNo pre check\nNo logging\nPost check INVALID_HLINK_ID, BUG_ON\n','3','15','',''),
 (394519,'emmcfs_link()','D:','/usr/src/linux-2.6.37/fs/emmcfs/inode.c',1189,1300,'/* TODO ext2 defines this as 32000, but let it stay so for a while */\r\n#define EMMCFS_LINK_MAX 32\r\nstatic int emmcfs_link(struct dentry *old_dentry, struct inode *dir,\r\n	struct dentry *dentry)\r\n{\r\n	struct inode *inode = old_dentry->d_inode;\r\n	struct inode *par_inode = old_dentry->d_parent->d_inode;\r\n	struct emmcfs_sb_info *sbi = old_dentry->d_inode->i_sb->s_fs_info;\r\n	struct emmcfs_cattree_key *found_key;\r\n	hlink_id_t hlink_id;\r\n	struct emmcfs_catalog_common_record *data;\r\n	struct emmcfs_find_data fd;\r\n	int ret;\r\n\r\n	BUG_ON(S_ISDIR(inode->i_mode));\r\n	if (inode->i_nlink >= EMMCFS_LINK_MAX)\r\n		return -EMLINK;\r\n\r\n	/* TODO - rlock - runlock - wlock - think about more elegant locking\r\n	 * scheme\r\n	 */\r\n	EMMCFS_DEBUG_MUTEX(\"cattree mutex r lock\");\r\n	mutex_r_lock(sbi->catalog_tree->rw_tree_lock);\r\n	EMMCFS_DEBUG_MUTEX(\"cattree mutex w lock succ\");\r\n	fd.bnode = NULL;\r\n	ret = emmcfs_cattree_find(sbi, dir->i_ino, dentry->d_name.name,\r\n			dentry->d_name.len, &fd, EMMCFS_BNODE_MODE_RW);\r\n	if (!ret || ret != -ENOENT) {\r\n		emmcfs_put_bnode(fd.bnode);\r\n		EMMCFS_DEBUG_MUTEX(\"cattree mutex r lock un\");\r\n		mutex_r_unlock(sbi->catalog_tree->rw_tree_lock);\r\n		return -EEXIST;\r\n	}\r\n	EMMCFS_DEBUG_MUTEX(\"cattree mutex r lock un\");\r\n	mutex_r_unlock(sbi->catalog_tree->rw_tree_lock);\r\n\r\n	/* TODO - to think wether it can be - source inode is actual,\r\n	 * but source object is absent in tree. Change to BUG if it\r\n	 * can never be\r\n	 */\r\n	EMMCFS_DEBUG_MUTEX(\"cattree mutex w lock\");\r\n	mutex_w_lock(sbi->catalog_tree->rw_tree_lock);\r\n	EMMCFS_DEBUG_MUTEX(\"cattree mutex w lock succ\");\r\n	fd.bnode = NULL;\r\n	ret = emmcfs_cattree_find(sbi, par_inode->i_ino,\r\n			old_dentry->d_name.name, old_dentry->d_name.len, &fd,\r\n			EMMCFS_BNODE_MODE_RW);\r\n	if (ret)\r\n		goto exit;\r\n\r\n	found_key = emmcfs_get_btree_record(fd.bnode, fd.pos);\r\n	data = get_value_pointer(found_key);\r\n	if (le16_to_cpu(data->record_type) != EMMCFS_CATALOG_HLINK_RECORD) {\r\n		hlink_id = clone_data_into_hlink_area(sbi, data,\r\n				le32_to_cpu(found_key->gen_key.record_len));\r\n\r\n		if (hlink_id == INVALID_HLINK_ID) {\r\n			ret = -EIO;\r\n			goto exit;\r\n		}\r\n\r\n		ret = emmcfs_btree_remove(sbi->catalog_tree,\r\n				&found_key->gen_key);\r\n		if (ret)\r\n			goto exit;\r\n\r\n		ret = add_hlink_record(sbi->catalog_tree, hlink_id,\r\n				par_inode->i_ino, &old_dentry->d_name);\r\n		if (ret)\r\n			/* TODO - potential bad thing - old record is killed,\r\n			 * and new can\'t be inserted, the operation fails and\r\n			 * we loose the target file. Think how it can be avoided\r\n			 */\r\n			goto exit;\r\n		kfree(EMMCFS_I(inode)->name);\r\n		EMMCFS_I(inode)->name = NULL;\r\n	} else {\r\n		hlink_id = le64_to_cpu(\r\n				((struct emmcfs_catalog_hlink_record *)data)->\r\n				hlink_id);\r\n	}\r\n\r\n	ret = add_hlink_record(sbi->catalog_tree, hlink_id, dir->i_ino,\r\n			&dentry->d_name);\r\n\r\n	inode->i_ctime = CURRENT_TIME_SEC;\r\n	inode_inc_link_count(inode);\r\n#if LINUX_VERSION_CODE == KERNEL_VERSION(3,0,20)\r\n	ihold(inode);\r\n#elif LINUX_VERSION_CODE == KERNEL_VERSION(2,6,35)\r\n	atomic_inc(&inode->i_count);\r\n#endif\r\n\r\n	if (ret)\r\n		goto exit;\r\n\r\n	dir->i_size++;\r\n	sbi->files_count++;\r\n\r\n\r\n	EMMCFS_I(inode)->hlink_id = hlink_id;\r\n	d_instantiate(dentry, inode);\r\n\r\nexit:\r\n	emmcfs_put_bnode(fd.bnode);\r\n	EMMCFS_DEBUG_MUTEX(\"cattree mutex w lock un\");\r\n	mutex_w_unlock(sbi->catalog_tree->rw_tree_lock);\r\n	if (!ret) {\r\n		emmcfs_write_inode_to_bnode(dir);\r\n		emmcfs_write_inode_to_bnode(inode);\r\n	}\r\n\r\n	return ret;\r\n}\r\n','Object layer\nFSM layer\nSwitching layer\n\nPre check BUG_ON, -EMLINK\nLogging EMMCFS_DEBUG_MUTEX\nPost check -EEXIST,-EIO\n\nIt is desirable to divide a set of actions on the standard functions or blocks.\n','11','64','',''),
 (394520,'emmcfs_sb_info.files_count','S:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394521,'emmcfs_symlink()','D:','/usr/src/linux-2.6.37/fs/emmcfs/inode.c',1305,1318,'static int emmcfs_symlink(struct inode *dir, struct dentry *dentry,\r\n	const char *symname)\r\n{\r\n	int ret = emmcfs_create(dir, dentry, S_IFLNK | S_IRWXUGO, NULL);\r\n	struct inode *created_ino;\r\n	unsigned int len = strlen(symname)+1;\r\n\r\n	if (ret)\r\n		return ret;\r\n\r\n	created_ino = dentry->d_inode;\r\n	ret = page_symlink(created_ino, symname, len);\r\n	return ret;\r\n}','Switching layer\n\nNo pre check\nNo logging\nNo post check\n','2','8','',''),
 (394522,'page_symlink()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394523,'emmcfs_file_aio_read()','D:','/usr/src/linux-2.6.37/fs/emmcfs/inode.c',1366,1372,'ssize_t\r\nemmcfs_file_aio_read(struct kiocb *iocb, const struct iovec *iov,\r\n		unsigned long nr_segs, loff_t pos)\r\n{\r\n	EMMCFS_DEBUG_INO(\"reading\");\r\n	return generic_file_aio_read(iocb, iov, nr_segs, pos);\r\n}','interface for generic_file_aio_read\n\nNo pre check\nLogging EMMCFS_DEBUG_INO\nNo post check\n','1','2','',''),
 (394524,'generic_file_aio_read()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394525,'emmcfs_file_aio_write()','D:','/usr/src/linux-2.6.37/fs/emmcfs/inode.c',1374,1379,'ssize_t emmcfs_file_aio_write(struct kiocb *iocb, const struct iovec *iov,\r\n		unsigned long nr_segs, loff_t pos)\r\n{\r\n	EMMCFS_DEBUG_INO(\"writing\");\r\n	return generic_file_aio_write(iocb, iov, nr_segs, pos);\r\n}','interface of generic_file_aio_write\n\nNo pre check\nLogging EMMCFS_DEBUG_INO\nNo post check\n','1','2','',''),
 (394526,'generic_file_aio_write()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394527,'emmcfs_new_inode()','D:','/usr/src/linux-2.6.37/fs/emmcfs/inode.c',1405,1459,'struct inode *emmcfs_new_inode(struct inode *dir, int mode)\r\n{\r\n	struct super_block *sb = dir->i_sb;\r\n	ino_t ino = get_free_inode_n(sb->s_fs_info);\r\n	struct inode *inode;\r\n	int err;\r\n	struct emmcfs_fork_info *ifork;\r\n\r\n	if (ino == 0)\r\n		return ERR_PTR(-ENOSPC);\r\n\r\n	/*EMMCFS_DEBUG_INO(\"#%lu\", ino);*/\r\n	inode = new_inode(sb);\r\n	if (!inode)\r\n		return ERR_PTR(-ENOMEM);\r\n\r\n	inode->i_ino = ino;\r\n	inode_init_owner(inode, dir, mode);\r\n	inode->i_nlink = 1;\r\n	inode->i_size = 0;\r\n	sb->s_dirt = 1;\r\n	inode->i_blocks = 0;\r\n	inode->i_mtime = inode->i_atime = inode->i_ctime =\r\n				emmcfs_current_time(inode);\r\n	inode->i_flags = dir->i_flags;\r\n	if (S_ISDIR(mode))\r\n		inode->i_op =  &emmcfs_dir_inode_operations;\r\n	else if (S_ISLNK(mode))\r\n		inode->i_op = &emmcfs_symlink_inode_operations;\r\n	else\r\n		inode->i_op = &emmcfs_file_inode_operations;\r\n\r\n	inode->i_mapping->a_ops = &emmcfs_aops;\r\n	inode->i_fop = (S_ISDIR(mode)) ?\r\n			&emmcfs_dir_operations : &emmcfs_file_operations;\r\n\r\n	/* Init extents with zeros - file has no any space yet */\r\n	ifork = &(EMMCFS_I(inode)->fork);\r\n	ifork->used_extents = 1;\r\n	ifork->extents[0].first_block = 0;\r\n	ifork->extents[0].block_count = 0;\r\n\r\n	EMMCFS_I(inode)->is_new = 1;\r\n	if (insert_inode_locked(inode) < 0) {\r\n		err = -EINVAL;\r\n		goto err_exit;\r\n	}\r\n\r\n	return inode;\r\n\r\nerr_exit:\r\n	free_inode_n(sb->s_fs_info, inode->i_ino);\r\n	iput(inode);\r\n	return ERR_PTR(err);\r\n}','Switching layer\n\nPre check ERR_PTR\nNo logging\nPost check ERR_PTR, -ENOMEM, -EINVAL\n\n','7','38','',''),
 (394528,'new_inode()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394529,'inode_init_owner()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394530,'inode.i_blocks','S:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394531,'inode.i_op','S:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394532,'emmcfs_dir_inode_operations','g:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394533,'emmcfs_symlink_inode_operations','g:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394534,'emmcfs_file_inode_operations','g:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394535,'emmcfs_aops','g:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394536,'inode.i_fop','S:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394537,'emmcfs_dir_operations','g:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394538,'emmcfs_file_operations','g:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394539,'insert_inode_locked()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394540,'emmcfs_unicode_strlen()','F:','/usr/src/linux-2.6.37/fs/emmcfs/unicode.c',23,37,'/**\r\n * @file	fs/emmcfs/unicode.c\r\n * @brief	routines for UNICODE support\r\n * @author	TODO\r\n * @date	TODO\r\n *\r\n * eMMCFS -- Samsung eMMC chip oriented File System, Version 1.\r\n * TODO: Detailed description\r\n * @see		TODO: documents\r\n *\r\n * Copyright 2011 by Samsung Electronics, Inc.,\r\n *\r\n * This software is the confidential and proprietary information\r\n * of Samsung Electronics, Inc. (\"Confidential Information\").  You\r\n * shall not disclose such Confidential Information and shall use\r\n * it only in accordance with the terms of the license agreement\r\n * you entered into with Samsung.\r\n */\r\n\r\n#include <linux/slab.h>\r\n#include <linux/nls.h>\r\n\r\nint emmcfs_unicode_strlen(const unsigned char *s)\r\n{\r\n	int size;\r\n	unicode_t u;\r\n	int len = strlen(s);\r\n	int res = 0;\r\n\r\n	while (*s && len > 0) {\r\n		size = utf8_to_utf32(s, len, &u);\r\n		s += size;\r\n		len -= size;\r\n		res++;\r\n	}\r\n	return res;\r\n}','Parser layer\n\nNo pre check\nNo logging\nNo post check\n','3','10','',''),
 (394541,'unlock_new_inode()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394542,'emmcfs_extended_super_block.catalog_tree_fork','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394543,'emmcfs_extended_super_block.extents_overflow_tree_fork','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394544,'emmcfs_extended_super_block.inode_num_bitmap_fork','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394545,'emmcfs_extended_super_block.hlinks_fork','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394546,'emmcfs_read_inode()','D:','/usr/src/linux-2.6.37/fs/emmcfs/inode.c',1610,1712,'int emmcfs_read_inode(struct inode *inode, struct emmcfs_find_data *fd)\r\n{\r\n	struct super_block		*sb = inode->i_sb;\r\n	struct emmcfs_sb_info *sbi = sb->s_fs_info;\r\n	int				ret = 0;\r\n	char				*new_name;\r\n	int				str_len = 0;\r\n	struct emmcfs_cattree_key *key;\r\n	struct emmcfs_catalog_common_record *comm_val;\r\n	struct emmcfs_catalog_folder_record *folder_val;\r\n	struct page *page = NULL;\r\n	int rec_type;\r\n	hlink_id_t hlink_id = INVALID_HLINK_ID;\r\n\r\n	if (inode->i_ino == EMMCFS_ROOT_INO) {\r\n		ret = get_root_folder(sb->s_fs_info, fd);\r\n		if (ret)\r\n			goto err_exit;\r\n	}\r\n	BUG_ON(!fd->bnode);\r\n\r\n	key = emmcfs_get_btree_record(fd->bnode, fd->pos);\r\n	comm_val = get_value_pointer(key);\r\n	rec_type = le16_to_cpu(comm_val->record_type);\r\n\r\n	if (rec_type == EMMCFS_CATALOG_HLINK_RECORD) {\r\n		u16 page_offset;\r\n		hlink_id = le64_to_cpu(\r\n			((struct emmcfs_catalog_hlink_record *)comm_val)->\r\n					hlink_id);\r\n		page = get_hlink_value_page(sbi->hard_links.inode, hlink_id,\r\n				&page_offset);\r\n		comm_val = kmap(page) + page_offset;\r\n		rec_type = comm_val->record_type;\r\n	}\r\n\r\n	if (ret) {\r\n		EMMCFS_ERR(\"can\'t read #%lu inode\", inode->i_ino);\r\n		return ret;\r\n	}\r\n\r\n	folder_val = (struct emmcfs_catalog_folder_record *)comm_val;\r\n	if (hlink_id == INVALID_HLINK_ID) {\r\n		new_name = kmalloc(key->name.length + 1, GFP_KERNEL);\r\n		if (!new_name)\r\n			goto err_exit;\r\n\r\n		str_len = utf16s_to_utf8s((const u16 *)key->name.unicode_str,\r\n				key->name.length, UTF16_LITTLE_ENDIAN, new_name,\r\n				EMMCFS_CAT_MAX_NAME);\r\n		new_name[str_len] = 0;\r\n		EMMCFS_I(inode)->name = new_name;\r\n		EMMCFS_I(inode)->parent_id = le64_to_cpu(key->parent_id);\r\n	}\r\n	EMMCFS_I(inode)->hlink_id = hlink_id;\r\n\r\n	inode->i_mode = le16_to_cpu(folder_val->permissions.file_mode);\r\n	inode->i_uid = (uid_t)le32_to_cpu(folder_val->permissions.uid);\r\n	inode->i_gid = (uid_t)le32_to_cpu(folder_val->permissions.gid);\r\n	inode->i_nlink = le64_to_cpu(folder_val->links_count);\r\n	/* TODO for Klepikov set root inode nlinlk*/\r\n	if (inode->i_ino == EMMCFS_ROOT_INO)\r\n		inode->i_nlink = 1;\r\n	/* TODO - set correct time */\r\n	inode->i_mtime.tv_sec =\r\n			le64_to_cpu(folder_val->modification_time.seconds);\r\n	inode->i_atime.tv_sec =\r\n			le64_to_cpu(folder_val->access_time.seconds);\r\n	inode->i_ctime.tv_sec =\r\n			le64_to_cpu(folder_val->creation_time.seconds);\r\n\r\n	inode->i_mtime.tv_nsec =\r\n			le64_to_cpu(folder_val->modification_time.nanoseconds);\r\n	inode->i_atime.tv_nsec =\r\n			le64_to_cpu(folder_val->access_time.nanoseconds);\r\n	inode->i_ctime.tv_nsec =\r\n			le64_to_cpu(folder_val->creation_time.nanoseconds);\r\n\r\n	if (rec_type & EMMCFS_CATALOG_FILE_RECORD) {\r\n		struct emmcfs_catalog_file_record *file_val = (void *)comm_val;\r\n		inode->i_op = (rec_type & EMMCFS_CATALOG_FILE_RECORD_SYMLINK) ?\r\n				&emmcfs_symlink_inode_operations :\r\n				&emmcfs_file_inode_operations;\r\n		inode->i_fop = &emmcfs_file_operations;\r\n		inode->i_mapping->a_ops = &emmcfs_aops;\r\n		ret = emmcfs_parse_fork(inode, &file_val->data_fork);\r\n	} else {\r\n		BUG_ON(rec_type != EMMCFS_CATALOG_FOLDER_RECORD);\r\n\r\n		inode->i_size = (loff_t)le64_to_cpu(\r\n				folder_val->total_items_count);\r\n		inode->i_op = &emmcfs_dir_inode_operations;\r\n		inode->i_fop = &emmcfs_dir_operations;\r\n	}\r\n\r\n	if (page != NULL)\r\n		/* it was hardlink */\r\n		kunmap(page);\r\nerr_exit:\r\n	if (inode->i_ino == EMMCFS_ROOT_INO)\r\n		emmcfs_put_bnode(fd->bnode);\r\n	return ret;\r\n}\r\n','Switching layer\nCall parser layer\nMemory layer\nTime layer\n\nPre check BUG_ON\nLogging EMMCFS_ERR, \nPost check BUG_ON\n','12','66','',''),
 (394547,'iget_locked()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394548,'emmcfs_extended_super_block.lebs_bitmap_fork','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394549,'iget_failed()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394550,'*address_space_operations.readpages()','D:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394551,'*address_space_operations.writepage()','D:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394552,'*address_space_operations.writepages()','D:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394553,'*address_space_operations.write_begin()','D:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394554,'*address_space_operations.write_end()','D:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394555,'*address_space_operations.bmap()','D:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394556,'*address_space_operations.direct_IO()','D:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394557,'*inode_operations.create()','D:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394558,'*inode_operations.symlink()','D:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394559,'*inode_operations.lookup()','D:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394560,'*inode_operations.link()','D:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394561,'*inode_operations.unlink()','D:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394562,'*inode_operations.mkdir()','D:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394563,'*inode_operations.rmdir()','D:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394564,'*inode_operations.rename()','D:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394565,'*inode_operations.readlink()','D:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394566,'generic_readlink()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394567,'*inode_operations.follow_link()','D:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394568,'page_follow_link_light()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394569,'*inode_operations.put_link()','D:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394570,'page_put_link()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394571,'*inode_operations.setattr()','D:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394572,'*file_operations.read()','D:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394573,'generic_read_dir()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394574,'*file_operations.readdir()','D:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394575,'*file_operations.llseek()','D:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394576,'generic_file_llseek()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394577,'do_sync_read()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394578,'*file_operations.aio_read()','D:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394579,'*file_operations.write()','D:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394580,'do_sync_write()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394581,'*file_operations.aio_write()','D:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394582,'*file_operations.mmap()','D:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394583,'generic_file_mmap()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394584,'*file_operations.open()','D:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394585,'generic_file_open()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394586,'*file_operations.release()','D:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394587,'*file_operations.fsync()','D:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394588,'generic_file_fsync()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394589,'*file_operations.splice_read()','D:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394590,'generic_file_splice_read()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394591,'*file_operations.splice_write()','D:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394592,'generic_file_splice_write()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394593,'*emmcfs_readdir()__farg2()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394594,'emmcfs_parse_options()','D:','/usr/src/linux-2.6.37/fs/emmcfs/options.c',44,73,'/**\r\n * @brief		Parse eMMCFS options\r\n * @param [in] sb	VFS super block\r\n * @param [in] input	Options string for parsing\r\n * @return		Returns 0 on success, errno on failure\r\n */\r\nint emmcfs_parse_options(struct super_block *sb, char *input)\r\n{\r\n	int ret = 0;\r\n	int token;\r\n	substring_t args[MAX_OPT_ARGS];\r\n	char *p;\r\n\r\n	if (!input)\r\n		return ret;\r\n\r\n	while ((p = strsep(&input, \",\")) != NULL) {\r\n		if (!*p)\r\n			continue;\r\n\r\n		token = match_token(p, tokens, args);\r\n		switch (token) {\r\n		case option_journal:\r\n			set_option(EMMCFS_SB(sb), SNAPSHOT);\r\n			EMMCFS_DEBUG_SNAPSHOT(\"journal is enable, option:%d\",\r\n					EMMCFS_SB(sb)->mount_options);\r\n			break;\r\n\r\n		default:\r\n			return 0;\r\n		}\r\n	}\r\n\r\n	EMMCFS_DEBUG_SB(\"finished (ret = %d)\", ret);\r\n	return ret;\r\n}','Parser layer\n\nPre check by code\nLogging EMMCFS_DEBUG_SNAPSHOT, EMMCFS_DEBUG_SB\nNo post check ','5','16','',''),
 (394595,'strsep()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394596,'match_token()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394597,'tokens','g:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394598,'bitrev8()','D:','/usr/src/linux-2.6.37/include/linux/bitrev.h',8,11,NULL,NULL,NULL,NULL,'',''),
 (394599,'byte_rev_table[]','g:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394600,'byte_rev_table','g:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394601,'transaction_insert()','D:','/usr/src/linux-2.6.37/fs/emmcfs/snapshot.c',43,72,'/**\r\n * @brief		Insert transaction to rb-tree.\r\n * @param root		root of the tree to insert\r\n * @param data		emmcfs_transaction structure to insert\r\n * @return		0 on success, errno on failure\r\n */\r\n\n#ifdef __NCC__\nstatic inline int transaction_insert(struct rb_root *root,\r\n		struct	emmcfs_transaction_data *data)\r\n{\r\n	struct rb_node **new = &(root->rb_node), *parent = NULL;\r\n\r\n/*ig	BUG_ON(!data);\r */\n\r\n	/* Figure out where to put new node */\r\n	while (*new) {\r\n/*ig		struct	emmcfs_transaction_data *this = container_of(*new,\r\n			struct	emmcfs_transaction_data, transaction_node);\r\n */\n		struct	emmcfs_transaction_data *this = *new;\r\n\r\n		parent = *new;\r\n		if (data->on_volume < this->on_volume)\r\n			new = &((*new)->rb_left);\r\n		else if (data->on_volume > this->on_volume)\r\n			new = &((*new)->rb_right);\r\n		else\r\n			return -EEXIST;\r\n		}\r\n\r\n	/* Add new node and rebalance tree. */\r\n	rb_link_node(&data->transaction_node, parent, new);\r\n	rb_insert_color(&data->transaction_node, root);\r\n\r\n	return 0;\r\n}\r\n#else\nstatic inline int transaction_insert(struct rb_root *root,\r\n		struct	emmcfs_transaction_data *data)\r\n{\r\n	struct rb_node **new = &(root->rb_node), *parent = NULL;\r\n\r\n	BUG_ON(!data);\r\n\r\n	/* Figure out where to put new node */\r\n	while (*new) {\r\n		struct	emmcfs_transaction_data *this = container_of(*new,\r\n			struct	emmcfs_transaction_data, transaction_node);\r\n\r\n		parent = *new;\r\n		if (data->on_volume < this->on_volume)\r\n			new = &((*new)->rb_left);\r\n		else if (data->on_volume > this->on_volume)\r\n			new = &((*new)->rb_right);\r\n		else\r\n			return -EEXIST;\r\n		}\r\n\r\n	/* Add new node and rebalance tree. */\r\n	rb_link_node(&data->transaction_node, parent, new);\r\n	rb_insert_color(&data->transaction_node, root);\r\n\r\n	return 0;\r\n}\r\n#endif\n','FSM layer\n\nPre check BUG_ON\nNo logging\nPost check -EEXIST\n','4','13','',''),
 (394602,'rb_root.rb_node','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394603,'emmcfs_transaction_data.on_volume','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394604,'emmcfs_transaction_data.transaction_node','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394605,'rb_insert_color()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394606,'clear_transaction_tree()','D:','/usr/src/linux-2.6.37/fs/emmcfs/snapshot.c',110,133,'/**\r\n * @brief		Clear transaction rb-tree\r\n * @param rb_root	Transaction rb-tree root\r\n * @return\r\n * */\r\nstatic void clear_transaction_tree(struct rb_root *rb_root)\r\n{\r\n	struct rb_node *current_node;\r\n\r\n	if (!rb_root)\r\n		return;\r\n\r\n	current_node = rb_first(rb_root);\r\n\r\n	while (current_node) {\r\n		struct rb_node *next_node = rb_next(current_node);\r\n		struct emmcfs_transaction_data *transaction;\r\n\r\n/*ig		transaction = rb_entry(current_node,\r\n			struct emmcfs_transaction_data, transaction_node);\r\n    */\n		transaction = current_node;\r\n\r\n		rb_erase(current_node, rb_root);\r\n		kfree(transaction);\r\n\r\n		current_node = next_node;\r\n	}\r\n}','FSM layer\n\nPre check skiping\nNo logging\nNo post check\n','3','11','',''),
 (394607,'rb_first()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394608,'rb_next()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394609,'rb_erase()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394610,'transaction_tree_to_snapshot()','D:','/usr/src/linux-2.6.37/fs/emmcfs/snapshot.c',141,194,'/**\r\n * @brief		Convert transaction rb-tree to massive (on-disk layout)\r\n * @param rb_root	Transaction rb-tree root\r\n * @param destination	Destination massive\r\n * @return		Returns 0 on success, errno on failure\r\n * */\r\nstatic int transaction_tree_to_snapshot(struct rb_root *rb_root,\r\n		struct emmcfs_snaphot_descriptor *snapshot)\r\n{\r\n	struct rb_node *current_node;\r\n	struct emmcfs_transaction *current_trunsaction;\r\n	__le64 emmcfs_snapshot_magic = EMMCFS_SNAPSHOT_MAGIC;\r\n	__le32 checksum;\r\n	unsigned int chuck_count = 0;\r\n\r\n	if (!rb_root)\r\n		return -EINVAL;\r\n\r\n	/* copy magic number */\r\n	memcpy(snapshot->signature, (char *)&emmcfs_snapshot_magic,\r\n				sizeof(snapshot->signature));\r\n\r\n	current_trunsaction = &snapshot->first_transaction;\r\n\r\n	current_node = rb_first(rb_root);\r\n\r\n	while (current_node) {\r\n		struct rb_node *next_node = rb_next(current_node);\r\n		struct emmcfs_transaction_data *transaction;\r\n\r\n/*ig		transaction = rb_entry(current_node,\r\n			struct emmcfs_transaction_data, transaction_node);\r\n    */\n		transaction = current_node;\r\n\r\n		current_trunsaction->page_count =\r\n				cpu_to_le16(transaction->pages_count);\r\n		current_trunsaction->on_snapshot =\r\n				cpu_to_le64(transaction->on_snapshot);\r\n		current_trunsaction->on_volume =\r\n				cpu_to_le64(transaction->on_volume);\r\n		chuck_count++;\r\n\r\n		current_trunsaction++;\r\n		current_node = next_node;\r\n	}\r\n\r\n	if (!chuck_count)\r\n		return -EINVAL;\r\n\r\n	snapshot->transaction_count = cpu_to_le16(chuck_count);\r\n	snapshot->checksum_offset = cpu_to_le16((void *)current_trunsaction -\r\n			(void *)snapshot);\r\n\r\n	/* sign snapshot : crc32 */\r\n	checksum = crc32(0, snapshot, snapshot->checksum_offset);\r\n	*((__le32 *)current_trunsaction) = cpu_to_le32(checksum);\r\n\r\n	return 0;\r\n}','Memory layer\nParser layer\nSwitching layer\n\nPre check -EINVAL\nNo logging\nPost check -EINVAL','4','27','',''),
 (394611,'emmcfs_snaphot_descriptor.signature','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394612,'emmcfs_snaphot_descriptor.first_transaction','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394613,'emmcfs_transaction.page_count','S:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394614,'emmcfs_transaction_data.pages_count','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394615,'emmcfs_transaction.on_snapshot','S:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394616,'emmcfs_transaction_data.on_snapshot','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394617,'emmcfs_transaction.on_volume','S:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394618,'emmcfs_snaphot_descriptor.transaction_count','S:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394619,'emmcfs_snaphot_descriptor.checksum_offset','S:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394620,'crc32_le()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394621,'get_start_block()','D:','/usr/src/linux-2.6.37/fs/emmcfs/snapshot.c',202,212,'/**\r\n * @brief		Get page start block by they index\r\n * @param [in] ino_no	inode number\r\n * @param [in] iblock	logical block number\r\n * @return		Returns start block for given iblock\r\n */\r\nstatic sector_t get_start_block(struct inode *inode, pgoff_t iblock)\r\n{\r\n	struct emmcfs_inode_info *inode_info = EMMCFS_I(inode);\r\n	__u32 max_block;\r\n\r\n	if (iblock > inode_info->fork.total_block_count)\r\n		return 0;\r\n\r\n	return emmcfs_find_old_block(inode_info, iblock,\r\n				&max_block);\r\n}','Switching layer\n\nNo pre check\nNo logging\nNo post check\n','2','5','',''),
 (394622,'emmcfs_clear_snapshot()','D:','/usr/src/linux-2.6.37/fs/emmcfs/emmcfs.h',405,409,'/**\r\n * @brief		Clear on-disk snapshot\r\n * @param [in]		EMMCFS run-time superblock\r\n * @return		Returns 0 on success, errno on failure\r\n */\r\nstatic inline int EMMCFS_CLEAR_SNAPSHOT(struct emmcfs_sb_info *sbi)\r\n{\r\n	return sbi->snapshot_info->snapshot_op->clear_snapshot(sbi);\r\n\r\n}','interface for sbi\n\nNo pre check\nNo logging\nNo post check\n','1','11','',''),
 (394623,'emmcfs_sb_info.sb','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394624,'emmcfs_extended_super_block.snapshot_fork','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394625,'emmcfs_snapshot_info.pages_per_head','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394626,'emmcfs_commit_snapshot()','D:','/usr/src/linux-2.6.37/fs/emmcfs/emmcfs.h',395,398,'/**\r\n * @brief		Flash changed metadata to disk\r\n * @param [in]		EMMCFS run-time superblock\r\n * @return		Returns 0 on success, errno on failure\r\n */\r\nstatic inline int EMMCFS_COMMIT_SNAPSHOT(struct emmcfs_sb_info *sbi)\r\n{\r\n	return sbi->snapshot_info->snapshot_op->commit_snapshot(sbi);\r\n}','interface for sbi\n\nNo pre check\nNo logging\nNo post check\n','2','18','',''),
 (394627,'emmcfs_snapshot_info.snapshot_root','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394628,'restore_sigle_transaction()','D:','/usr/src/linux-2.6.37/fs/emmcfs/snapshot.c',290,342,'/**\r\n * @brief		restore single transaction\r\n * @param [in] sbi	emmcfs super block info\r\n * @param [in]\r\n * @return		Returns 0 on success, errno on failure\r\n */\r\nstatic int restore_sigle_transaction(struct emmcfs_sb_info *sbi,\r\n		struct emmcfs_transaction *transaction, pgoff_t page_index)\r\n{\r\n	struct page **pages;\r\n	int count;\r\n	int error;\r\n	unsigned int page_count = le16_to_cpu(transaction->page_count);\r\n	sector_t write_to = le64_to_cpu(transaction->on_volume);\r\n	sector_t read_from = le64_to_cpu(transaction->on_snapshot);\r\n\r\n\r\n	EMMCFS_DEBUG_SNAPSHOT(\"RESTORE :P_count %d From_sector %lu /\"\r\n			\"Write_sector %lu\",\r\n			page_count,\r\n			(long unsigned int)read_from,\r\n			(long unsigned int)write_to);\r\n\r\n	pages = kzalloc(sizeof(*pages) * page_count, GFP_KERNEL);\r\n	if (!pages) {\r\n		error = -ENOMEM;\r\n		goto err_exit;\r\n	}\r\n	for (count = 0; count < page_count; count++) {\r\n		pages[count] = alloc_page(GFP_NOFS | __GFP_ZERO);\r\n		if (!pages[count]) {\r\n			error = -ENOMEM;\r\n			goto err_free_mem;\r\n		}\r\n		lock_page(pages[count]);\r\n	}\r\n	error = emmcfs_read_pages(sbi->sb->s_bdev, pages, read_from,\r\n			page_count);\r\n	if (error)\r\n		goto free_pages;\r\n\r\n	error = emmcfs_write_snapshot_pages(sbi->sb->s_bdev, pages,\r\n			write_to, page_count, 0);\r\n\r\n	kfree(pages);\r\n	return 0;\r\n\r\nfree_pages:\r\n	for (count = 0; count < page_count; count++) {\r\n		unlock_page(pages[count]);\r\n		__free_pages(pages[count], 0);\r\n	}\r\n\r\nerr_free_mem:\r\n	kfree(pages);\r\nerr_exit:\r\n\r\n	return error;\r\n};','FSM layer\nCall Switching layer\n\nNo pre check\nLogging EMMCFS_DEBUG_SNAPSHOT\nPost check -ENOMEM','6','32','',''),
 (394629,'emmcfs_restore_snapshot()','D:','/usr/src/linux-2.6.37/fs/emmcfs/snapshot.c',349,439,'/**\r\n * @brief		restore volume to consistent state\r\n * @param [in] sbi	emmcfs super block info\r\n * @return		Returns 0 on success, errno on failure\r\n */\r\nstatic int emmcfs_restore_snapshot(struct emmcfs_sb_info *sbi)\r\n{\r\n	struct emmcfs_snapshot_info *snapshot = sbi->snapshot_info;\r\n	struct emmcfs_snaphot_descriptor *snapshot_head;\r\n	unsigned int transaction_count;\r\n	int count;\r\n	struct emmcfs_transaction *current_transaction;\r\n	__le32 emmcfs_check_magic = EMMCFS_SNAPSHOT_MAGIC;\r\n	__le32 checksum;\r\n	__le32 on_disk_checksum;\r\n	/*__le32 *p_on_disk_checksum;*/\r\n	pgoff_t page_index;\r\n	int error;\r\n	struct page *page;\r\n\r\n	EMMCFS_DEBUG_SNAPSHOT(\"START recovery\");\r\n	page = alloc_page(GFP_NOFS | __GFP_ZERO);\r\n	if (!page) {\r\n		error = -ENOMEM;\r\n		goto err_exit;\r\n	}\r\n\r\n	lock_page(page);\r\n\r\n	error = emmcfs_read_page(sbi->sb->s_bdev, page,\r\n		EMMCFS_SNAPSHOT_START(sbi) << (PAGE_CACHE_SHIFT -\r\n		SECTOR_SIZE_SHIFT), SECTOR_PER_PAGE, 0);\r\n\r\n	snapshot->page_index = snapshot->pages_per_head;\r\n	snapshot_head = (struct emmcfs_snaphot_descriptor *)kmap(page);\r\n\r\n	/* check magic number */\r\n	if (memcmp(snapshot_head->signature, (char *)&emmcfs_check_magic,\r\n				sizeof(snapshot_head->signature))) {\r\n		/* No magic number -> no snapshot */\r\n		error = 0;\r\n		goto release_head;\r\n	}\r\n\r\n	EMMCFS_DEBUG_SNAPSHOT(\"!!! Snapshot magic is detected\");\r\n\r\n	/* check CRC32 checksum */\r\n	checksum = crc32(0, snapshot_head,\r\n			le16_to_cpu(snapshot_head->checksum_offset));\r\n\r\n\r\n\r\n	on_disk_checksum = le32_to_cpu(*(__le32 *)((char *)snapshot_head +\r\n			le16_to_cpu(snapshot_head->checksum_offset)));\r\n\r\n	if (checksum != on_disk_checksum) {\r\n		/* snapshot is broken */\r\n		EMMCFS_ERR(\"Snapshot is broken shecksum - 0x%x, must be 0x%x\\n\",\r\n				on_disk_checksum, checksum);\r\n		error = -EINVAL;\r\n		goto release_head;\r\n	}\r\n\r\n	/* restore on- disk layout */\r\n	EMMCFS_DEBUG_SNAPSHOT(\"Unclear unmount, snapshot is present\");\r\n	transaction_count = le16_to_cpu(snapshot_head->transaction_count);\r\n	page_index = snapshot->pages_per_head;\r\n	current_transaction = &snapshot_head->first_transaction;\r\n\r\n	for (count = 0; count < transaction_count; count++) {\r\n		error = restore_sigle_transaction(sbi,\r\n				current_transaction, page_index);\r\n		if (error)\r\n			goto release_head;\r\n		page_index += le16_to_cpu(\r\n				current_transaction->page_count);\r\n		current_transaction++;\r\n	}\r\n\r\n	emmcfs_clear_snapshot(sbi);\r\n\r\n	kunmap(page);\r\n	unlock_page(page);\r\n	__free_pages(page, 0);\r\n\r\n\r\n	EMMCFS_DEBUG_SNAPSHOT(\"STOP emmcfs_restore_snapshot\");\r\n	return 0;\r\n\r\nrelease_head:\r\n	kunmap(page);\r\n	unlock_page(page);\r\n	__free_pages(page, 0);\r\nerr_exit:\r\n	return error;\r\n}','Switching layer\n\nNo pre check\nLogging EMMCFS_DEBUG_SNAPSHOT, EMMCFS_ERR\nPost check EMMCFS_ERR\n','6','52','',''),
 (394630,'emmcfs_add_to_snapshot()','D:','/usr/src/linux-2.6.37/fs/emmcfs/snapshot.c',450,546,'/**\r\n * @brief			Add data chunk to snapshot\r\n * @param [in] sbi		emmcfs super block info\r\n * @param [in] inode		VFS inode\r\n * @param [in] original_pages	new snapshot data pages\r\n * @param [in] page_count	new data pages count\r\n * @return			Returns 0 on success, errno on failure\r\n */\r\nstatic int emmcfs_add_to_snapshot(struct emmcfs_sb_info *sbi,\r\n		struct inode *inode, struct page **original_pages,\r\n		unsigned int pages_count)\r\n{\r\n	struct page **pages = NULL;\r\n	spinlock_t *lock_transaction_tree =\r\n			&sbi->snapshot_info->transaction_lock;\r\n	struct rb_root *transaction_root = &sbi->snapshot_info->snapshot_root;\r\n	struct	emmcfs_transaction_data *new_transation;\r\n	sector_t start_block;\r\n	void *destination_base;\r\n	void *destination;\r\n	void *source_base;\r\n	void *source;\r\n	int error = 0;\r\n	int count = 0;\r\n\r\n	EMMCFS_DEBUG_SNAPSHOT(\"New transaction I: %lu\",\r\n				sbi->snapshot_info->page_index);\r\n\r\n	start_block = get_start_block(inode, original_pages[0]->index);\r\n	if (!start_block)\r\n		return -EINVAL;\r\n\r\n	new_transation = kzalloc(sizeof(struct	emmcfs_transaction_data),\r\n			 GFP_KERNEL);\r\n	if (!new_transation)\r\n		return -ENOMEM;\r\n\r\n	/*set up transaction */\r\n	new_transation->pages_count = pages_count;\r\n	new_transation->on_volume = start_block << sbi->log_sectors_per_block;\r\n	new_transation->on_snapshot = (EMMCFS_SNAPSHOT_START(sbi) +\r\n			sbi->snapshot_info->page_index) <<\r\n			sbi->log_sectors_per_block;\r\n\r\n	spin_lock(lock_transaction_tree);\r\n	/* insert new transaction to rb-tree,\r\n	 * check : data already in snapshot or not */\r\n	error = transaction_insert(transaction_root, new_transation);\r\n	spin_unlock(lock_transaction_tree);\r\n\r\n	if (error) {\r\n		kfree(new_transation);\r\n		goto exit;\r\n	}\r\n	/*pages = kzalloc(sizeof(*pages) * btree->pages_per_node, GFP_KERNEL);*/\r\n	pages = kzalloc(sizeof(struct page *) * pages_count, GFP_KERNEL);\r\n\r\n	for (count = 0; count < pages_count; count++) {\r\n		pages[count] = alloc_page(GFP_NOFS | __GFP_ZERO);\r\n		if (IS_ERR(pages[count])) {\r\n			error = -ENOMEM;\r\n			/* remove canceled transaction*/\r\n			rb_erase(&new_transation->transaction_node,\r\n					transaction_root);\r\n			kfree(new_transation);\r\n			count--;\r\n			for (; count > 0; count--) {\r\n				unlock_page(pages[count]);\r\n				__free_pages(pages[count], 0);\r\n			}\r\n			goto err_exit;\r\n			}\r\n		lock_page(pages[count]);\r\n	}\r\n\r\n	destination_base = vmap(pages, pages_count, VM_MAP, PAGE_KERNEL);\r\n	destination = destination_base;\r\n	source_base = vmap(original_pages, pages_count, VM_MAP, PAGE_KERNEL);\r\n	source = source_base;\r\n	/* copy pages contents */\r\n	for (count = 0; count < pages_count; count++) {\r\n		copy_page(destination, source);\r\n\r\n		destination = (void *)((char *)destination + PAGE_SIZE);\r\n		source += PAGE_SIZE;\r\n	}\r\n	vunmap(destination_base);\r\n	vunmap(source_base);\r\n\r\n	emmcfs_write_snapshot_pages(sbi->sb->s_bdev, pages,\r\n			new_transation->on_snapshot, pages_count, 0);\r\n\r\n	EMMCFS_DEBUG_SNAPSHOT(\"P_count %d From_sector %lu Write_to %lu\",\r\n			pages_count,\r\n			(long unsigned int)new_transation->on_volume,\r\n			(long unsigned int)new_transation->on_snapshot);\r\n\r\n	sbi->snapshot_info->page_index += pages_count;\r\nerr_exit:\r\n	kfree(pages);\r\n	EMMCFS_DEBUG_SNAPSHOT(\"Added transaction I: %lu\",\r\n			sbi->snapshot_info->page_index);\r\nexit:\r\n	return error;\r\n}\r\n','Switching layer\nFSM layer\nMemory layer\n\nNo pre check\nLogging EMMCFS_DEBUG_SNAPSHOT\nPost check -EINVAL, -ENOMEM','8','62','','');
INSERT INTO `emmcfs`.`element` VALUES  (394631,'emmcfs_snapshot_info.transaction_lock','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394632,'emmcfs_sb_info.log_sectors_per_block','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394633,'clear_snapshoting_no_snapshot()','D:','/usr/src/linux-2.6.37/fs/emmcfs/snapshot.c',549,550,'/* dummy snapshot functions, it used if \"journal\" option is not set */\r\nstatic inline int clear_snapshoting_no_snapshot(struct emmcfs_sb_info *sbi)\r\n	{while (0); return 0; }','dummy','2','3','',''),
 (394634,'add_to_snapshot_no_snapshot()','D:','/usr/src/linux-2.6.37/fs/emmcfs/snapshot.c',551,554,'static inline int add_to_snapshot_no_snapshot(struct emmcfs_sb_info *sbi,\r\n		struct inode *inode, struct page **original_pages,\r\n		unsigned int offset)\r\n	{while (0); return 0; }','dummy','2','3','',''),
 (394635,'commit_snapshot_no_snapshot()','D:','/usr/src/linux-2.6.37/fs/emmcfs/snapshot.c',555,556,'static inline int commit_snapshot_no_snapshot(struct emmcfs_sb_info *sbi)\r\n	{while (0); return 0; }','dummy','2','3','',''),
 (394636,'restore_snapshot_no_snapshot()','D:','/usr/src/linux-2.6.37/fs/emmcfs/snapshot.c',557,558,'static inline int restore_snapshot_no_snapshot(struct emmcfs_sb_info *sbi)\r\n	{while (0); return 0; }\r\n','dummy','2','3','',''),
 (394637,'emmcfs_build_snapshot_manager()','D:','/usr/src/linux-2.6.37/fs/emmcfs/snapshot.c',577,610,'int emmcfs_build_snapshot_manager(struct emmcfs_sb_info *sbi)\r\n{\r\n	struct emmcfs_snapshot_info *snapshot;\r\n	int error = 0;\r\n	EMMCFS_DEBUG_SNAPSHOT(\"build snapshot manager\");\r\n\r\n	snapshot = kzalloc(sizeof(struct emmcfs_snapshot_info), GFP_KERNEL);\r\n\r\n	if (!snapshot) {\r\n		error = -ENOMEM;\r\n		goto err_exit;\r\n	}\r\n	if (test_option(sbi, SNAPSHOT)) {\r\n		/* snapshot is enable */\r\n		snapshot->snapshot_op = &snapshoting;\r\n		snapshot->pages_per_head = 1;\r\n		snapshot->head_size_bytes =\r\n				snapshot->pages_per_head << PAGE_CACHE_SHIFT;\r\n		snapshot->page_index = (pgoff_t)snapshot->pages_per_head;\r\n		snapshot->snapshot_root = RB_ROOT;\r\n		spin_lock_init(&snapshot->transaction_lock);\r\n\r\n	} else {\r\n		/* no snapshot */\r\n		snapshot->snapshot_op = &no_snapshot;\r\n	}\r\n\r\n	sbi->snapshot_info = snapshot;\r\n\r\n	error = EMMCFS_RESTORE_FROM_SNAPSHOT(sbi);\r\nerr_exit:\r\n\r\n	return error;\r\n}','Switching layer\n\nNo pre check\nLogging EMMCFS_DEBUG_SNAPSHOT\nPost check -ENOMEM','3','18','',''),
 (394638,'snapshoting','g:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394639,'emmcfs_snapshot_info.head_size_bytes','S:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394640,'no_snapshot','g:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394641,'emmcfs_destroy_snapshot_manager()','D:','/usr/src/linux-2.6.37/fs/emmcfs/snapshot.c',612,618,'void emmcfs_destroy_snapshot_manager(struct emmcfs_sb_info *sbi)\r\n{\r\n	EMMCFS_DEBUG_SNAPSHOT(\"destroy snapshot manager\");\r\n\r\n	sbi->snapshot_info = NULL;\r\n	kfree(sbi->snapshot_info);\r\n}','interface for sbi\n\nNo pre check\nLogging EMMCFS_DEBUG_SNAPSHOT\nNo post check\n','1','3','',''),
 (394642,'emmcfs_put_btree()','D:','/usr/src/linux-2.6.37/fs/emmcfs/super.c',42,53,'void emmcfs_put_btree(struct emmcfs_btree *btree)\r\n{\r\n	struct emmcfs_raw_btree_head *raw_cattree_head;\r\n\r\n	raw_cattree_head = btree->head_bnode->data;\r\n	emmcfs_destroy_free_bnode_bitmap(btree->bitmap);\r\n	BUG_ON(!btree->head_bnode);\r\n	emmcfs_put_bnode(btree->head_bnode);\r\n	iput(btree->inode);\r\n	kfree(btree->rw_tree_lock);\r\n	kfree(btree);\r\n}\r\n','Object layer\nFSM layer\nSwitching layer\n\nNo pre check \nNo logging\nPost check BUG_ON\n','1','8','',''),
 (394643,'destroy_free_inode_bitmap()','D:','/usr/src/linux-2.6.37/fs/emmcfs/super.c',55,58,'static void destroy_free_inode_bitmap(struct emmcfs_sb_info *sbi)\r\n{\r\n	iput(sbi->free_inode_bitmap.inode);\r\n}\r\n','interface of iput\n\nNo pre check\nNo logging\nNo post check\n','1','1','',''),
 (394644,'emmcfs_destroy_hlinks_area()','D:','/usr/src/linux-2.6.37/fs/emmcfs/super.c',60,63,'static void emmcfs_destroy_hlinks_area(struct emmcfs_sb_info *sbi)\r\n{\r\n	iput(sbi->hard_links.inode);\r\n}','interface of iput\n\nNo pre check\nNo logging\nNo post check\n','1','1','',''),
 (394645,'emmcfs_alloc_inode()','D:','/usr/src/linux-2.6.37/fs/emmcfs/super.c',80,87,'/**\r\n * @brief		Method to allocate inode\r\n * @param [in,out] sb	Pointer to eMMCFS superblock\r\n * @return		Return pointer ot inode, NULL on failure\r\n */\r\nstatic struct inode *emmcfs_alloc_inode(struct super_block *sb)\r\n{\r\n	struct emmcfs_inode_info *inode;\r\n	inode = kmem_cache_alloc(emmcfs_inode_cachep, GFP_KERNEL);\r\n	inode->name = NULL;\r\n	inode->fork.total_block_count = 0;\r\n	return inode ? &inode->vfs_inode : NULL;\r\n}','Object layer\n\nNo pre check\nNo logging\nNo post check\n','2','6','',''),
 (394646,'emmcfs_inode_cachep','g:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394647,'emmcfs_destroy_inode()','D:','/usr/src/linux-2.6.37/fs/emmcfs/super.c',94,100,'/**\r\n * @brief			Method to destroy inode\r\n * @param [in,out] inode	Pointer to inode for destroy\r\n * @return			void\r\n */\r\nstatic void emmcfs_destroy_inode(struct inode *inode)\r\n{\r\n	if (EMMCFS_I(inode)->name)\r\n		kfree(EMMCFS_I(inode)->name);\r\n\r\n	kmem_cache_free(emmcfs_inode_cachep, EMMCFS_I(inode));\r\n}','Object layer\n\nNo pre check\nNo logging\nNo post check\n','2','3','',''),
 (394648,'emmcfs_sync_super()','D:','/usr/src/linux-2.6.37/fs/emmcfs/super.c',102,150,'static void emmcfs_sync_super(struct super_block *sb, int wait)\r\n{\r\n	struct emmcfs_sb_info *sbi = sb->s_fs_info;\r\n	sector_t s_count;\r\n	__le32 checksum;\r\n	struct emmcfs_extended_super_block *exsb = EMMCFS_RAw_EXSB(sbi);\r\n\r\n	if (is_sbi_flag_set(sbi, EXTENDED_SUPERBLOCK_DIRTY)) {\r\n		/* Update layout structures */\r\n\r\n		/* catalog tree fork */\r\n		emmcfs_form_fork(&exsb->catalog_tree_fork,\r\n				sbi->catalog_tree->inode);\r\n\r\n		/* extents overflow tree fork */\r\n		emmcfs_form_fork(&exsb->extents_overflow_tree_fork,\r\n				sbi->extents_tree->inode);\r\n\r\n		/* inode number allocation fork */\r\n		emmcfs_form_fork(&exsb->inode_num_bitmap_fork,\r\n				sbi->free_inode_bitmap.inode);\r\n\r\n		/* hard links file fork */\r\n		emmcfs_form_fork(&exsb->hlinks_fork, sbi->hard_links.inode);\r\n\r\n		/* Update cheksum */\r\n		checksum = crc32(0, exsb, sizeof(*exsb)\r\n				- sizeof(exsb->checksum));\r\n\r\n		exsb->checksum = checksum;\r\n\r\n		/* flash two copies of extended superblock block to disk*/\r\n		get_dev_sectors_count(sb, &s_count);\r\n\r\n		emmcfs_write_page(sb->s_bdev, sbi->superblocks,\r\n			s_count - EMMCFS_RESERVED_AREA_LENGTH / SECTOR_SIZE -\r\n			ESB_SIZE_IN_SECTOR, ESB_SIZE_IN_SECTOR,\r\n			SB_SIZE_IN_SECTOR * SECTOR_SIZE);\r\n\r\n		emmcfs_write_page(sb->s_bdev, sbi->superblocks,\r\n				EMMCFS_RESERVED_AREA_LENGTH / SECTOR_SIZE\r\n				+ SB_SIZE_IN_SECTOR , ESB_SIZE_IN_SECTOR,\r\n				SB_SIZE_IN_SECTOR * SECTOR_SIZE);\r\n\r\n		clear_sbi_flag(sbi, EXTENDED_SUPERBLOCK_DIRTY);\r\n	}\r\n\r\n	sb->s_dirt = 0;\r\n}','FSM layer\nSwitching layer\n\nNo pre check\nNo logging\nNo post check\n','2','16','',''),
 (394649,'emmcfs_extended_super_block.checksum','S:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394650,'get_dev_sectors_count()','F:','/usr/src/linux-2.6.37/fs/emmcfs/super.c',350,354,'/**\r\n * @brief		Determines volume size in sectors\r\n * @param [in] sb	VFS super block\r\n * @param [out] s_count	Stores here sectors count of volume\r\n * @return		void\r\n */\r\nstatic inline void get_dev_sectors_count(struct super_block *sb,\r\n							sector_t *s_count)\r\n{\r\n	*s_count = sb->s_bdev->bd_inode->i_size >> SECTOR_SIZE_SHIFT;\r\n}','interfeice for sb\n\nNo pre check\nNo logging\nNo post check\n','1','1','',''),
 (394651,'emmcfs_sb_info.superblocks','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394652,'emmcfs_sync_fs()','D:','/usr/src/linux-2.6.37/fs/emmcfs/super.c',160,164,'/**\r\n * @brief		Method to write out all dirty data associated with\r\n *			the superblock\r\n * @param [in,out] sb	Pointer to the eMMCFS superblock\r\n * @param [in,out] wait	Block on write completion\r\n * @remark		TODO: detailed description\r\n * @return		Returns 0 on success, errno on failure\r\n */\r\nstatic int emmcfs_sync_fs(struct super_block *sb, int wait)\r\n{\r\n	emmcfs_sync_super(sb, wait);\r\n	return 0;\r\n}','interface for emmcfs_sync_super\n\nNo pre check\nNo logging\nNo post check\n','1','2','',''),
 (394653,'emmcfs_write_super()','D:','/usr/src/linux-2.6.37/fs/emmcfs/super.c',166,172,'void emmcfs_write_super(struct super_block *sb)\r\n{\r\n	if (!(sb->s_flags & MS_RDONLY))\r\n		emmcfs_sync_fs(sb, 1);\r\n	else\r\n		sb->s_dirt = 0;\r\n}','interface for emmcfs_sync_fs\n\nPre check\nNo logging\nNo post check\n','2','3','',''),
 (394654,'destroy_super()','D:','/usr/src/linux-2.6.37/fs/emmcfs/super.c',186,201,'/**\r\n * @brief		Method to free superblock (unmount)\r\n * @param [in,out] sb	Pointer to a eMMCFS superblock\r\n * @remark		TODO: detailed description\r\n * @return		void\r\n */\r\n\r\nstatic void destroy_super(struct emmcfs_sb_info *sbi){\r\n	sbi->raw_superblock_copy = NULL;\r\n	sbi->raw_superblock = NULL;\r\n\r\n	if (sbi->superblocks) {\r\n		kunmap(sbi->superblocks);\r\n		unlock_page(sbi->superblocks);\r\n		__free_pages(sbi->superblocks, 0);\r\n	}\r\n\r\n	if (sbi->superblocks_copy) {\r\n		kunmap(sbi->superblocks_copy);\r\n		unlock_page(sbi->superblocks_copy);\r\n		__free_pages(sbi->superblocks_copy, 0);\r\n	}\r\n}','Object layer\n\nNo pre check\nNo logging\nNo post check\n\npmccabe 3 (cyclomatic complexity)','3','10','',''),
 (394655,'emmcfs_sb_info.raw_superblock_copy','S:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394656,'emmcfs_sb_info.superblocks_copy','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394657,'emmcfs_put_super()','D:','/usr/src/linux-2.6.37/fs/emmcfs/super.c',203,226,'static void emmcfs_put_super(struct super_block *sb)\r\n{\r\n	/* d.voytik-TODO-29-12-2011-17-22-00: [emmcfs_put_super]\r\n	 * implement emmcfs_put_super() */\r\n	struct emmcfs_sb_info *sbi = sb->s_fs_info;\r\n\r\n	emmcfs_put_btree(sbi->catalog_tree);\r\n	sbi->catalog_tree = NULL;\r\n	emmcfs_put_btree(sbi->extents_tree);\r\n	sbi->extents_tree = NULL;\r\n	destroy_free_inode_bitmap(sbi);\r\n	emmcfs_destroy_snapshot_manager(sbi);\r\n	emmcfs_fsm_destroy_management(sb);\r\n	emmcfs_destroy_hlinks_area(sbi);\r\n\r\n	if (sb->s_dirt)\r\n		emmcfs_write_super(sb);\r\n\r\n	destroy_super(sbi);\r\n\r\n	kfree(sbi);\r\n/*ig	EMMCFS_DEBUG_SB(\"finished\");\r */\n}','FSM layer\nSwitching layer\n\nNo pre check\nLogging EMMCFS_DEBUG_SB\nNo post check','2','14','',''),
 (394658,'emmcfs_freeze()','D:','/usr/src/linux-2.6.37/fs/emmcfs/super.c',234,241,'/**\r\n * @brief		Force FS into a consistency state and lock it (for LVM)\r\n * @param [in,out] sb	Pointer to the eMMCFS superblock\r\n * @remark		TODO: detailed description\r\n * @return		Returns 0 on success, errno on failure\r\n */\r\nstatic int emmcfs_freeze(struct super_block *sb)\r\n{\r\n	/* d.voytik-TODO-29-12-2011-17-24-00: [emmcfs_freeze]\r\n	 * implement emmcfs_freeze() */\r\n	int ret = 0;\r\n	EMMCFS_DEBUG_SB(\"finished (ret = %d)\", ret);\r\n	return ret;\r\n}\r\n','dummy\n\nNo pre check\nLogging EMMCFS_DEBUG_SB\nNo post check\n','1','3','',''),
 (394659,'emmcfs_statfs()','D:','/usr/src/linux-2.6.37/fs/emmcfs/super.c',250,272,'/**\r\n * @brief			Get FS statistics\r\n * @param [in,out] dentry	Pointer to directory entry\r\n * @param [in,out] buf		Point to kstatfs buffer where information\r\n *				should be filled\r\n * @return			Returns 0 on success, errno on failure\r\n */\r\nstatic int emmcfs_statfs(struct dentry *dentry, struct kstatfs *buf)\r\n{\r\n	/* d.voytik-TODO-29-12-2011-17-24-00: [emmcfs_statfs]\r\n	 * implement emmcfs_statfs() */\r\n	struct super_block	*sb = dentry->d_sb;\r\n	struct emmcfs_sb_info	*sbi = sb->s_fs_info;\r\n\r\n	buf->f_type = (long)EMMCFS_SB_SIGNATURE;\r\n	buf->f_bsize = sbi->block_size;\r\n	buf->f_blocks = sbi->total_leb_count << sbi->log_blocks_in_leb;\r\n	/*buf->f_blocks = le64_to_cpu(EMMCFS_RAw_EXSB(sbi)->files_count) +\r\n		le64_to_cpu(EMMCFS_RAw_EXSB(sbi)->folders_count);*/\r\n	buf->f_bavail = buf->f_bfree =\r\n		sbi->free_blocks_count;\r\n	buf->f_files = sbi->files_count + sbi->folders_count;\r\n	/* buf->f_ffree = ; */\r\n	buf->f_fsid.val[0] = sbi->volume_uuid & 0xFFFFFFFFUL;\r\n	buf->f_fsid.val[1] = (sbi->volume_uuid >> 32) & 0xFFFFFFFFUL;\r\n	buf->f_namelen = EMMCFS_FILE_NAME_LEN;\r\n\r\n	EMMCFS_DEBUG_SB(\"finished\");\r\n	return 0;\r\n}','Switching layer\n\nNo pre check\nLogging EMMCFS_DEBUG_SB\nNo post check\n','1','12','',''),
 (394660,'dentry.d_sb','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394661,'kstatfs.f_type','S:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394662,'kstatfs.f_bsize','S:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394663,'kstatfs.f_blocks','S:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394664,'emmcfs_sb_info.total_leb_count','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394665,'kstatfs.f_bavail','S:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394666,'kstatfs.f_bfree','S:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394667,'kstatfs.f_files','S:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394668,'emmcfs_sb_info.folders_count','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394669,'kstatfs.f_fsid','S:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394670,'__kernel_fsid_t.val[]','S:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394671,'__kernel_fsid_t.val','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394672,'emmcfs_sb_info.volume_uuid','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394673,'kstatfs.f_namelen','S:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394674,'emmcfs_delete_inode()','D:','/usr/src/linux-2.6.37/fs/emmcfs/super.c',275,303,'	static void emmcfs_delete_inode(struct inode *inode)\r\n/*ig#elif LINUX_VERSION_CODE == KERNEL_VERSION(3,0,20)\r\n	static void emmcfs_evict_inode(struct inode *inode)\r\n#endif\r\n*/\n{\r\n	int need_delete = 0;\r\n	EMMCFS_DEBUG_INO(\"evict inode %lu nlink\\t%u\",\r\n			inode->i_ino, inode->i_nlink);\r\n\r\n	if (!inode->i_nlink && !is_bad_inode(inode))\r\n		need_delete = 1;\r\n\r\n	truncate_inode_pages(&inode->i_data, 0);\r\n\r\n	if (need_delete) {\r\n		inode->i_size = 0;\r\n		/*if (inode->i_blocks)todo*/\r\n			emmcfs_truncate_blocks(inode, 0);\r\n	}\r\n\r\n	invalidate_inode_buffers(inode);\r\n\r\n#if LINUX_VERSION_CODE == KERNEL_VERSION(2,6,35)\r\n	clear_inode(inode);\r\n#elif LINUX_VERSION_CODE == KERNEL_VERSION(3,0,20)\r\n	end_writeback(inode);\r\n#endif\r\n}','FSM layer\n\nNo pre check\nLogging EMMCFS_DEBUG_INO\nNo post check\n','4','11','',''),
 (394675,'is_bad_inode()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394676,'truncate_inode_pages()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394677,'inode.i_data','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394678,'invalidate_inode_buffers()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394679,'block_device.bd_inode','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394680,'get_dev_blocks_count()','D:','/usr/src/linux-2.6.37/fs/emmcfs/super.c',362,366,'/**\r\n * @brief		Determines volume size in blocks\r\n * @param [in] sb	VFS super block\r\n * @param [out] b_count	Stores here blocks count of volume\r\n * @return		void\r\n */\r\nstatic inline void get_dev_blocks_count(struct super_block *sb,\r\n							sector_t *b_count)\r\n{\r\n	*b_count = sb->s_bdev->bd_inode->i_size >> sb->s_blocksize_bits;\r\n}','Switching layer\ninterface of sb\n\nNo pre check\nNo logging\nNo post check\n','1','1','',''),
 (394681,'emmcfs_verify_sb()','D:','/usr/src/linux-2.6.37/fs/emmcfs/super.c',376,409,'/**\r\n * @brief		Sanity check of eMMCFS super block\r\n * @param [in] esb	EMMCFS super block\r\n * @param [in] str_sb_type	determines which SB is verified on error\r\n *				printing\r\n * @param [in] silent	Doesn\'t print errors if silent is true\r\n * @return		Return 0 on success, errno on failure\r\n */\r\nstatic int emmcfs_verify_sb(struct emmcfs_super_block *esb, char *str_sb_type,\r\n				int silent)\r\n{\r\n	__le64 emmcfs_check_magic = EMMCFS_SB_SIGNATURE;\r\n	__le32 checksum;\r\n\r\n	/* check magic number */\r\n	if (memcmp(esb->signature, (char *)&emmcfs_check_magic,\r\n						sizeof(esb->signature))) {\r\n		if (!silent || debug_mask & EMMCFS_DBG_SB)\r\n			EMMCFS_ERR(\"%s: bad signature - 0x%08llx, expected - \"\\\r\n				\"0x%08llx\\n\", str_sb_type,\r\n			(long long unsigned int)*(__le64 *)(esb->signature),\r\n			(long long unsigned int)(emmcfs_check_magic));\r\n		return -EINVAL;\r\n	}\r\n	/* check version */\r\n	if (esb->version.major != EMMCFS_SB_VER_MAJOR ||\\\r\n			esb->version.minor != EMMCFS_SB_VER_MINOR) {\r\n		if (!silent || debug_mask & EMMCFS_DBG_SB)\r\n			EMMCFS_ERR(\"%s: bad version (major = %d, minor = %d)\\n\",\r\n					str_sb_type, (int)esb->version.major,\r\n					(int)esb->version.minor);\r\n		return -EINVAL;\r\n	}\r\n	/* check crc32 */\r\n	checksum = crc32(0, esb, sizeof(*esb) - sizeof(esb->checksum));\r\n	if (esb->checksum != checksum) {\r\n		EMMCFS_ERR(\"%s: bad checksum - 0x%x, must be 0x%x\\n\",\r\n				str_sb_type, esb->checksum, checksum);\r\n		return -EINVAL;\r\n	}\r\n	return 0;\r\n}','Parser layer\n\nNo pre check\nLogging EMMCFS_ERR\nPost check -EINVAL, EMMCFS_ERR\n','9','15','',''),
 (394682,'emmcfs_super_block.signature','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394683,'debug_mask','g:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394684,'emmcfs_super_block.version','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394685,'emmcfs_version.major','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394686,'emmcfs_version.minor','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394687,'emmcfs_super_block.checksum','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394688,'fill_runtime_superblock()','D:','/usr/src/linux-2.6.37/fs/emmcfs/super.c',417,489,'/**\r\n * @brief		Fill run-time superblock from on-disk superblock\r\n * @param [in] esb	EMMCFS super block\r\n * @param [in] sbi	VFS superblock\r\n * @return		Returns 0 on success, errno on failure\r\n */\r\nstatic int fill_runtime_superblock(struct emmcfs_super_block *esb,\r\n		struct super_block *sb)\r\n{\r\n	int ret = 0;\r\n	unsigned long block_size;\r\n	unsigned int bytes_in_leb;\r\n	unsigned long long total_block_count;\r\n	sector_t dev_sectors_count;\r\n	struct emmcfs_sb_info *sbi = sb->s_fs_info;\r\n\r\n	/* check total block count in SB */\r\n	get_dev_blocks_count(sb, &dev_sectors_count);\r\n\r\n	if (*((long *) esb->mkfs_git_branch) &&\r\n			*((long *) esb->mkfs_git_hash)) {\r\n		printk(KERN_INFO \"[EMMCFS] mkfs git branch is \\\"%s\\\"\\n\",\r\n				esb->mkfs_git_branch);\r\n		printk(KERN_INFO \"[EMMCFS] mkfs git revhash \\\"%.40s\\\"\\n\",\r\n				esb->mkfs_git_hash);\r\n	}\r\n\r\n	/* check if block size is supported and set it */\r\n	block_size = 1 << esb->log_block_size;\r\n	if (block_size & ~(512 | 1024 | 2048 | 4096)) {\r\n		EMMCFS_ERR(\"unsupported block size (%ld)\\n\", block_size);\r\n		ret = -EINVAL;\r\n		goto err_exit;\r\n	}\r\n	sbi->block_size = block_size;\r\n	sbi->block_size_shift = esb->log_block_size;\r\n	sbi->log_sectors_per_block = sbi->block_size_shift - SECTOR_SIZE_SHIFT;\r\n	sbi->sectors_per_volume = esb->sectors_per_volume;\r\n\r\n	sbi->offset_msk_inblock = 0xFFFFFFFF >> (32 - sbi->block_size_shift);\r\n\r\n	/* check if LEB size is supported and set it */\r\n	bytes_in_leb = 1 << esb->log_leb_size;\r\n	if (bytes_in_leb == 0 || bytes_in_leb < block_size) {\r\n		EMMCFS_ERR(\"unsupported LEB size (%u)\\n\", bytes_in_leb);\r\n		ret = -EINVAL;\r\n		goto err_exit;\r\n	}\r\n	sbi->log_blocks_in_leb = esb->log_leb_size - esb->log_block_size;\r\n\r\n	sbi->btree_node_size_blks = 1 << sbi->log_blocks_in_leb;\r\n\r\n\r\n	sbi->total_leb_count = le64_to_cpu(esb->total_leb_count);\r\n	total_block_count = sbi->total_leb_count << sbi->log_blocks_in_leb;\r\n	if (total_block_count /** (block_size/SECTOR_SIZE)*/ >\r\n			dev_sectors_count || total_block_count == 0) {\r\n		EMMCFS_ERR(\"bad FS block count: %llu, device has %llu blocks\\n\",\r\n				total_block_count, dev_sectors_count);\r\n		ret = -EINVAL;\r\n		goto err_exit;\r\n	}\r\n\r\n	sbi->lebs_bm_log_blocks_block =\r\n		le32_to_cpu(esb->lebs_bm_log_blocks_block);\r\n	sbi->lebs_bm_bits_in_last_block =\r\n		le32_to_cpu(esb->lebs_bm_bits_in_last_block);\r\n	sbi->lebs_bm_blocks_count =\r\n		le32_to_cpu(esb->lebs_bm_blocks_count);\r\n\r\n\r\n	/* squash 128 bit UUID into 64 bit by xoring */\r\n	sbi->volume_uuid = le64_to_cpup((void *)esb->volume_uuid) ^\r\n			le64_to_cpup((void *)esb->volume_uuid + sizeof(u64));\r\n\r\nerr_exit:\r\n\r\n	return ret;\r\n}\r\n','Switching layer\n\nPre check printk(KERN_INFO\nLogging printk(KERN_INFO, EMMCFS_ERR\nPost check EMMCFS_ERR, -EINVAL\n\nIt is necessary to divide the system version and number of domestic Git.\nThe version data must be within the software package and not in Git.','9','38','',''),
 (394689,'emmcfs_super_block.mkfs_git_branch','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394690,'emmcfs_super_block.mkfs_git_hash','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394691,'emmcfs_super_block.log_block_size','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394692,'emmcfs_sb_info.sectors_per_volume','S:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394693,'emmcfs_super_block.sectors_per_volume','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394694,'emmcfs_sb_info.offset_msk_inblock','S:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394695,'emmcfs_super_block.log_leb_size','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394696,'emmcfs_sb_info.btree_node_size_blks','S:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394697,'emmcfs_super_block.total_leb_count','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394698,'emmcfs_sb_info.lebs_bm_log_blocks_block','S:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394699,'emmcfs_super_block.lebs_bm_log_blocks_block','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394700,'emmcfs_super_block.lebs_bm_bits_in_last_block','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394701,'emmcfs_super_block.lebs_bm_blocks_count','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394702,'emmcfs_super_block.volume_uuid','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394703,'emmcfs_sb_read()','D:','/usr/src/linux-2.6.37/fs/emmcfs/super.c',497,613,'/**\r\n * @brief		Reads and checks and recovery eMMCFS super blocks\r\n * @param [in] sb	VFS super block\r\n * @param [in] silent	Do not print errors if silent is true\r\n * @return		Returns 0 on success, errno on failure\r\n */\r\nstatic int emmcfs_sb_read(struct super_block *sb, int silent)\r\n{\r\n	sector_t s_count;\r\n\r\n	void *raw_superblocks;\r\n	void *raw_superblocks_copy;\r\n	struct emmcfs_super_block *esb;\r\n	struct emmcfs_super_block *esb_copy;\r\n	int ret = 0;\r\n	int check_sb;\r\n	int check_sb_copy;\r\n	struct emmcfs_sb_info *sbi = sb->s_fs_info;\r\n\r\n	struct page *superblocks;\r\n	struct page *superblocks_copy;\r\n\r\n	/* alloc pages for superblocks */\r\n	superblocks = alloc_page(GFP_NOFS | __GFP_ZERO);\r\n\r\n	if (IS_ERR(superblocks)) {\r\n		EMMCFS_ERR(\"Fail to alloc page for reading superblocks\");\r\n		return PTR_ERR(superblocks);\r\n	}\r\n\r\n	superblocks_copy = alloc_page(GFP_NOFS | __GFP_ZERO);\r\n	if (IS_ERR(superblocks_copy)) {\r\n		__free_pages(superblocks, 0);\r\n		EMMCFS_ERR(\"Fail to alloc page for reading superblocks copy\");\r\n		return PTR_ERR(superblocks_copy);\r\n	}\r\n\r\n	lock_page(superblocks);\r\n	lock_page(superblocks_copy);\r\n\r\n	/* read super block and extended super block from volume */\r\n	/*  0       1       2        3                8*/\r\n	/*  | reserved area |   SB   |    ESB         |*/\r\n	ret = emmcfs_read_page(sb->s_bdev, superblocks,\r\n			EMMCFS_RESERVED_AREA_LENGTH / SECTOR_SIZE,\r\n			ESB_SIZE_IN_SECTOR + SB_SIZE_IN_SECTOR, 0);\r\n	if (ret)\r\n		goto err_unlock_superblocks;\r\n\r\n	/*    -8        -7              -2            volume end*/\r\n	/*     |   SB    |    ESB        |reserved area |       */\r\n	get_dev_sectors_count(sb, &s_count);\r\n	ret = emmcfs_read_page(sb->s_bdev, superblocks_copy,\r\n			s_count - EMMCFS_RESERVED_AREA_LENGTH / SECTOR_SIZE -\r\n			SB_SIZE_IN_SECTOR - ESB_SIZE_IN_SECTOR,\r\n			ESB_SIZE_IN_SECTOR + SB_SIZE_IN_SECTOR, 0);\r\n	if (ret)\r\n		goto err_unlock_superblocks;\r\n\r\n	raw_superblocks = kmap(superblocks);\r\n	raw_superblocks_copy = kmap(superblocks_copy);\r\n\r\n	/* check superblocks */\r\n	esb = (struct emmcfs_super_block *)raw_superblocks;\r\n	esb_copy =  (struct emmcfs_super_block *)raw_superblocks_copy;\r\n\r\n	check_sb = emmcfs_verify_sb(esb, \"SB\", silent);\r\n	check_sb_copy = emmcfs_verify_sb(esb_copy, \"SB_COPY\", silent);\r\n\r\n	/* TODO compare extended superblock by timestamp if they both */\r\n	/*  are valid */\r\n\r\n	if (check_sb && check_sb_copy) {\r\n		/*both superblocks are corrupted*/\r\n		ret = check_sb;\r\n		if (!silent || debug_mask & EMMCFS_DBG_SB)\r\n			EMMCFS_ERR(\"can\'t find an emmcfs filesystem on dev %s\",\r\n					sb->s_id);\r\n		goto err_unlock_superblocks;\r\n	} else if ((!check_sb) && check_sb_copy) {\r\n		/*first superblock is ok, copy is corrupted, recovery*/\r\n		memcpy(esb_copy, esb, SECTOR_SIZE * SB_SIZE_IN_SECTOR);\r\n		/* write superblock copy to disk */\r\n		emmcfs_write_page(sb->s_bdev, superblocks_copy,\r\n			s_count - EMMCFS_RESERVED_AREA_LENGTH / SECTOR_SIZE -\r\n			SB_SIZE_IN_SECTOR - ESB_SIZE_IN_SECTOR,\r\n			SB_SIZE_IN_SECTOR, 0);\r\n	} else if (check_sb && (!check_sb_copy)) {\r\n		/*first superblock is ok, copy is corrupted, recovery*/\r\n		memcpy(esb, esb_copy, SECTOR_SIZE * SB_SIZE_IN_SECTOR);\r\n		/* write superblock copy to disk */\r\n		emmcfs_write_page(sb->s_bdev, superblocks,\r\n			EMMCFS_RESERVED_AREA_LENGTH / SECTOR_SIZE,\r\n			SB_SIZE_IN_SECTOR, 0);\r\n	}\r\n\r\n	ret = fill_runtime_superblock(esb, sb);\r\n\r\n	if (ret)\r\n		goto err_unlock_superblocks;\r\n\r\n\r\n	sbi->raw_superblock = raw_superblocks;\r\n	sbi->raw_superblock_copy = raw_superblocks_copy;\r\n\r\n	sbi->superblocks = superblocks;\r\n	sbi->superblocks_copy = superblocks_copy;\r\n\r\n	return 0;\r\n\r\nerr_unlock_superblocks:\r\n	unlock_page(superblocks);\r\n	unlock_page(superblocks_copy);\r\n	__free_pages(superblocks, 0);\r\n	__free_pages(superblocks_copy, 0);\r\n\r\n	sbi->raw_superblock = NULL;\r\n	sbi->raw_superblock_copy = NULL;\r\n	sbi->superblocks = NULL;\r\n	sbi->superblocks_copy = NULL;\r\n\r\n	return ret;\r\n}\r\n','Object layer\nFSM layer\nSwitching layer\nParser layer\nCall memory layer\nLock time layer\n\nNo pre check\nLogging EMMCFS_ERR\nPost check EMMCFS_ERR, PTR_ERR\n','14','63','',''),
 (394704,'super_block.s_id','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394705,'emmcfs_verify_exsb()','D:','/usr/src/linux-2.6.37/fs/emmcfs/super.c',616,629,'static int emmcfs_verify_exsb(struct emmcfs_extended_super_block *exsb)\r\n{\r\n	__le32 checksum;\r\n\r\n	/* check crc32 */\r\n	checksum = crc32(0, exsb, sizeof(*exsb) - sizeof(exsb->checksum));\r\n\r\n	if (exsb->checksum != checksum) {\r\n		EMMCFS_ERR(\"bad checksum of extended super block - 0x%x, \"\\\r\n				\"must be 0x%x\\n\", exsb->checksum, checksum);\r\n		return -EINVAL;\r\n	} else\r\n		return 0;\r\n}\r\n','Switching layer\n\nNo pre check\nLogging EMMCFS_ERR\nPost check -EINVAL\n','2','6','',''),
 (394706,'emmcfs_extended_sb_read()','D:','/usr/src/linux-2.6.37/fs/emmcfs/super.c',636,683,'/**\r\n * @brief		Reads and checks eMMCFS extended super block\r\n * @param [in] sb	VFS super block\r\n * @return		Returns 0 on success, errno on failure\r\n */\r\nstatic int emmcfs_extended_sb_read(struct super_block *sb)\r\n{\r\n	struct emmcfs_extended_super_block *exsb;\r\n	struct emmcfs_extended_super_block *exsb_copy;\r\n	int ret = 0;\r\n	struct emmcfs_sb_info *sbi = sb->s_fs_info;\r\n	int check_exsb;\r\n	int check_exsb_copy;\r\n	sector_t s_count;\r\n\r\n	exsb =  EMMCFS_RAw_EXSB(sbi);\r\n	exsb_copy = EMMCFS_RAw_EXSB_COPY(sbi);\r\n\r\n	check_exsb = emmcfs_verify_exsb(exsb);\r\n	check_exsb_copy = emmcfs_verify_exsb(exsb_copy);\r\n	/* TODO compare extended superblock by timestamp if they both */\r\n	/*  are valid */\r\n\r\n	get_dev_sectors_count(sb, &s_count);\r\n\r\n	if (check_exsb && check_exsb_copy) {\r\n		EMMCFS_ERR(\"Extended superblocks are corrupted\");\r\n		ret = check_exsb;\r\n		return ret;\r\n	} else if ((!check_exsb) && check_exsb_copy) {\r\n		/* extended superblock copy are corrupted, recovery */\r\n		memcpy(exsb_copy, exsb,\r\n				sizeof(struct emmcfs_extended_super_block));\r\n		ret = emmcfs_write_page(sb->s_bdev, sbi->superblocks,\r\n			s_count - EMMCFS_RESERVED_AREA_LENGTH / SECTOR_SIZE -\r\n			ESB_SIZE_IN_SECTOR, ESB_SIZE_IN_SECTOR,\r\n			SB_SIZE_IN_SECTOR * SECTOR_SIZE);\r\n\r\n	} else if (check_exsb && (!check_exsb_copy)) {\r\n		/* main extended superblock are corrupted, recovery */\r\n		memcpy(exsb, exsb_copy,\r\n				sizeof(struct emmcfs_extended_super_block));\r\n		ret = emmcfs_write_page(sb->s_bdev, sbi->superblocks_copy,\r\n				EMMCFS_RESERVED_AREA_LENGTH / SECTOR_SIZE\r\n				+ SB_SIZE_IN_SECTOR , ESB_SIZE_IN_SECTOR,\r\n				SB_SIZE_IN_SECTOR * SECTOR_SIZE);\r\n	}\r\n\r\n	if (ret)\r\n		return ret;\r\n\r\n	return 0;\r\n}\r\n','FSM layer\nSwitching layer\n\nNo pre check\nNo Logging \nPost check EMMCFS_ERR\n','8','25','',''),
 (394707,'fill_btree()','D:','/usr/src/linux-2.6.37/fs/emmcfs/super.c',685,760,'static int fill_btree(struct emmcfs_sb_info *sbi,\r\n		struct emmcfs_btree *btree, struct inode *inode)\r\n{\r\n	struct emmcfs_bnode *head_bnode, *bnode;\r\n	struct emmcfs_raw_btree_head *raw_btree_head;\r\n	__u32 bitmap_size;\r\n	int err = 0;\r\n\r\n	btree->sbi = sbi;\r\n	btree->inode = inode;\r\n	btree->pages_per_node = 1 << (sbi->log_blocks_in_leb +\r\n			sbi->block_size_shift - PAGE_SHIFT);\r\n	btree->node_size_bytes = btree->pages_per_node << PAGE_SHIFT;\r\n\r\n	btree->rw_tree_lock = kmalloc(sizeof(rw_mutex_t), GFP_KERNEL);\r\n\r\n#ifdef SINGLE_NODE_LOCK\r\n	btree->total_locks = calculate_nodes_size(\r\n			EMMCFS_I(inode)->fork.total_block_count,\r\n			sbi->block_size_shift,\r\n			cat_tree);\r\n\r\n	start_locks = create_new_locks_container(cat_tree->total_locks,\r\n			cat_tree);\r\n	btree->containers_amnt = 1;\r\n	start_locks->index = 0;\r\n\r\n	btree->containers[0] = start_locks;\r\n/*	INIT_LIST_HEAD(&cat_tree->containers_list);\r\n	list_add(&start_locks->list, &cat_tree->containers_list);*/\r\n#endif\r\n\r\n	init_mutex(btree->rw_tree_lock);\r\n\r\n\r\n	head_bnode =  emmcfs_get_bnode(btree, 0, EMMCFS_BNODE_MODE_RW);\r\n	if (IS_ERR(head_bnode))\r\n		return PTR_ERR(head_bnode);\r\n\r\n	raw_btree_head = head_bnode->data;\r\n\r\n	/* Check the magic */\r\n	if (!memcmp(raw_btree_head->magic, EMMCFS_BTREE_HEAD_NODE_MAGIC,\r\n				sizeof(EMMCFS_BTREE_HEAD_NODE_MAGIC) - 1)) {\r\n		err = -EINVAL;\r\n		goto err_put_bnode;\r\n	}\r\n\r\n	btree->head_bnode = head_bnode;\r\n\r\n	/* Fill free bnode bitmpap */\r\n	bitmap_size = btree->node_size_bytes -\r\n		((void *) &raw_btree_head->bitmap - head_bnode->data);\r\n	btree->bitmap = build_free_bnode_bitmap(&raw_btree_head->bitmap, 0,\r\n			bitmap_size, head_bnode);\r\n	if (IS_ERR(btree->bitmap)) {\r\n		err = PTR_ERR(btree->bitmap);\r\n		btree->bitmap = NULL;\r\n		goto err_put_bnode;\r\n	}\r\n\r\n	/* Check if root bnode non-empty */\r\n	bnode = emmcfs_get_bnode(btree, emmcfs_btree_get_root_id(btree),\r\n			EMMCFS_BNODE_MODE_RO);\r\n	if (EMMCFS_BNODE_DSCR(bnode)->recs_count == 0) {\r\n		err = -EINVAL;\r\n		goto err_put_bnode;\r\n	}\r\n	emmcfs_put_bnode(bnode);\r\n\r\n	return 0;\r\n\r\nerr_put_bnode:\r\n	emmcfs_put_bnode(head_bnode);\r\n	return err;\r\n}\r\n','Switching layer\nObject layer\nParser layer\n\nNo pre check\nNo logging\nPost check PTR_ERR, -EINVAL\n','5','37','RESOURCE_LEAK','leaked_storage : \"Variable \"\"bnode\"\" goes out of scope\"\r\n'),
 (394708,'emmcfs_btree.sbi','S:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394709,'__init_rwsem()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394710,'emmcfs_raw_btree_head.magic','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394711,'emmcfs_raw_btree_head.bitmap','s:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394712,'emmcfs_fill_cat_tree()','D:','/usr/src/linux-2.6.37/fs/emmcfs/super.c',762,793,'static int emmcfs_fill_cat_tree(struct emmcfs_sb_info *sbi)\r\n{\r\n	struct inode *inode = NULL;\r\n	struct emmcfs_btree *cat_tree;\r\n\r\n	int err = 0;\r\n\r\n	cat_tree = kzalloc(sizeof(*cat_tree), GFP_KERNEL);\r\n	if (!cat_tree)\r\n		return -ENOMEM;\r\n\r\n	cat_tree->btree_type = EMMCFS_BTREE_CATALOG;\r\n	inode = emmcfs_iget(sbi->sb, EMMCFS_CAT_TREE_INO, NULL);\r\n	if (IS_ERR(inode)) {\r\n		kfree(cat_tree);\r\n		return PTR_ERR(inode);\r\n	}\r\n\r\n	err = fill_btree(sbi, cat_tree, inode);\r\n	if (err)\r\n		goto err_put_inode;\r\n\r\n	cat_tree->comp_fn = emmcfs_cattree_cmpfn;\r\n	sbi->catalog_tree = cat_tree;\r\n\r\n	return 0;\r\n\r\nerr_put_inode:\r\n	iput(inode);\r\n	EMMCFS_ERR(\"can not read catalog tree\");\r\n	return err;\r\n}','Object layer\nFSM layer\nSwitching layer\n\nNo pre check\nLogging EMMCFS_ERR\nPost check -ENOMEM, IS_ERR, PTR_ERR\n','4','20','',''),
 (394713,'emmcfs_btree.btree_type','S:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394714,'emmcfs_cattree_cmpfn','g:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394715,'emmcfs_fill_ext_tree()','D:','/usr/src/linux-2.6.37/fs/emmcfs/super.c',795,824,'static int emmcfs_fill_ext_tree(struct emmcfs_sb_info *sbi)\r\n{\r\n	struct inode *inode = NULL;\r\n	struct emmcfs_btree *ext_tree;\r\n	int err = 0;\r\n\r\n	ext_tree = kzalloc(sizeof(*ext_tree), GFP_KERNEL);\r\n	if (!ext_tree)\r\n		return -ENOMEM;\r\n\r\n	ext_tree->btree_type = EMMCFS_BTREE_EXTENTS;\r\n	inode = emmcfs_iget(sbi->sb, EMMCFS_EXTENTS_TREE_INO, NULL);\r\n	if (IS_ERR(inode)) {\r\n		kfree(ext_tree);\r\n		return PTR_ERR(inode);\r\n	}\r\n\r\n	err = fill_btree(sbi, ext_tree, inode);\r\n	if (err)\r\n		goto err_put_inode;\r\n\r\n	ext_tree->comp_fn = emmcfs_exttree_cmpfn;\r\n	sbi->extents_tree = ext_tree;\r\n	return 0;\r\n\r\nerr_put_inode:\r\n	iput(inode);\r\n	EMMCFS_ERR(\"can not read catalog tree\");\r\n	return err;\r\n}','Oblect layer\nFSM layer\nSwitching layer\nCall Parser layer\nMemory layer\n\nNo pre check\nLogging EMMCFS_ERR\nPost check -ENOMEM, PTR_ERR','4','20','',''),
 (394716,'emmcfs_exttree_cmpfn','g:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394717,'emmcfs_init_hlinks_area()','D:','/usr/src/linux-2.6.37/fs/emmcfs/super.c',826,830,'static void emmcfs_init_hlinks_area(struct emmcfs_sb_info *sbi)\r\n{\r\n	sbi->hard_links.inode = emmcfs_iget(sbi->sb, EMMCFS_HARDLINKS_AREA_INO,\r\n			NULL);\r\n}','interface of emmcfs_iget for sbi\n\nNo pre check\nNo logging\nNo post check\n','1','1','',''),
 (394718,'build_free_inode_bitmap()','D:','/usr/src/linux-2.6.37/fs/emmcfs/super.c',832,846,'struct emmcfs_bnode_bitmap *build_free_bnode_bitmap(void *data,\r\n		__u32 start_bnode_id, __u32 size_in_bytes,\r\n		struct emmcfs_bnode *host_bnode)\r\n{\r\n	struct emmcfs_bnode_bitmap *bitmap;\r\n\r\n	BUG_ON(!host_bnode);\r\n\r\n	bitmap = kzalloc(sizeof(*bitmap), GFP_KERNEL);\r\n	if (!bitmap)\r\n		return ERR_PTR(-ENOMEM);\r\n\r\n	bitmap->data = data;\r\n	bitmap->size = size_in_bytes;\r\n	bitmap->bits_num = bitmap->size * 8;\r\n\r\n	bitmap->start_id = start_bnode_id;\r\n	bitmap->end_id = start_bnode_id + bitmap->bits_num;\r\n\r\n	bitmap->free_num = bitmap->bits_num - __bitmap_weight(bitmap->data,\r\n			bitmap->bits_num);\r\n	bitmap->first_free_id = find_first_zero_bit(bitmap->data,\r\n			bitmap->bits_num) + start_bnode_id;\r\n\r\n	bitmap->host = host_bnode;\r\n	spin_lock_init(&bitmap->spinlock);\r\n\r\n	return bitmap;\r\n}','Object level\nSwitching level\nCall Parser level\n\nPre check BUG_ON\nNo logging\nPost check -ENOMEM','2','9','',''),
 (394719,'emmcfs_fill_super()','D:','/usr/src/linux-2.6.37/fs/emmcfs/super.c',858,971,'/**\r\n * @brief		Initialize the eMMCFS filesystem\r\n * @param [in,out] sb	VFS superblock\r\n * @param [in,out] data	FS private information\r\n * @param [in] silent	Flag whether print error message\r\n * @remark		Reads super block and FS internal data structures\r\n *			for futher use.\r\n *\r\n * @return		Return 0 on success, errno on failure\r\n */\r\nstatic int emmcfs_fill_super(struct super_block *sb, void *data, int silent)\r\n{\r\n	int			ret	= 0;\r\n	struct emmcfs_sb_info	*sbi;\r\n	struct inode		*root;\r\n\r\n#if defined(EMMCFS_GIT_BRANCH) && defined(EMMCFS_GIT_REV_HASH)\r\n	printk(KERN_INFO \"[EMMCFS] git branch is \\\"%s\\\"\", EMMCFS_GIT_BRANCH);\r\n	printk(KERN_INFO \"[EMMCFS] git revhash \\\"%.40s\\\"\", EMMCFS_GIT_REV_HASH);\r\n#endif\r\n#ifdef CONFIG_EMMCFS_NOOPTIMIZE\r\n	printk(KERN_INFO \"[EMMCFS-warning]: Build optimization \"\r\n			\"is switched off\");\r\n#endif\r\n\r\n	sbi = kzalloc(sizeof(*sbi), GFP_KERNEL);\r\n	if (!sbi)\r\n		return -ENOMEM;\r\n	sb->s_fs_info = sbi;\r\n	sbi->sb = sb;\r\n\r\n	ret = emmcfs_parse_options(sb, data);\r\n	if (ret) {\r\n		EMMCFS_ERR(\"unable to parse mount options\\n\");\r\n		ret = -EINVAL;\r\n		goto emmcfs_parse_options_error;\r\n	}\r\n\r\n	ret = emmcfs_sb_read(sb, silent);\r\n	if (ret)\r\n		goto emmcfs_sb_read_error;\r\n\r\n	ret = emmcfs_extended_sb_read(sb);\r\n	if (ret)\r\n		goto emmcfs_extended_sb_read_error;\r\n\r\n\r\n	if (!sb_set_blocksize(sb, sbi->block_size))\r\n		EMMCFS_ERR(\"can\'t set block size\\n\");\r\n	emmcfs_debug_print_sb(sbi);\r\n\r\n	sb->s_op = &emmcfs_sops;\r\n	/* s_magic is 4 bytes on 32-bit system */\r\n	sb->s_magic = (unsigned long)EMMCFS_SB_SIGNATURE;\r\n\r\n	ret = emmcfs_build_snapshot_manager(sbi);\r\n	if (ret)\r\n		goto emmcfs_build_snapshot_manager_error;\r\n\r\n	ret = emmcfs_fill_cat_tree(sbi);\r\n	if (ret)\r\n		goto emmcfs_fill_cat_tree_error;\r\n\r\n	ret = emmcfs_fill_ext_tree(sbi);\r\n	if (ret)\r\n		goto emmcfs_fill_ext_tree_error;\r\n\r\n	ret = build_free_inode_bitmap(sbi);\r\n	if (ret)\r\n		goto build_free_inode_bitmap_error;\r\n\r\n	/* allocate root directory */\r\n	root = emmcfs_iget(sb, EMMCFS_ROOT_INO, NULL);\r\n	if (IS_ERR(root)) {\r\n		EMMCFS_ERR(\"failed to load root directory\\n\");\r\n		ret = PTR_ERR(root);\r\n		goto emmcfs_iget_err;\r\n	}\r\n	sb->s_root = d_alloc_root(root);\r\n	if (!sb->s_root) {\r\n		EMMCFS_ERR(\"unable to get root inode\");\r\n		iput(root);\r\n		goto d_alloc_root_err;\r\n	}\r\n\r\n	ret = emmcfs_fsm_build_management(sb);\r\n	if (ret)\r\n		goto emmcfs_fsm_build_managment_error;\r\n\r\n	if (DATE_RESOLUTION_IN_NANOSECONDS_ENABLED)\r\n			sb->s_time_gran = 1;\r\n\r\n	emmcfs_init_hlinks_area(sbi);\r\n	EMMCFS_DEBUG_SB(\"finished ok\");\r\n	return 0;\r\n\r\n\r\nemmcfs_fsm_build_managment_error:\r\n	emmcfs_fsm_destroy_management(sb);\r\n\r\nd_alloc_root_err:\r\n	dput(sb->s_root);\r\n\r\nemmcfs_iget_err:\r\nbuild_free_inode_bitmap_error:\r\n	destroy_free_inode_bitmap(sbi);\r\n\r\nemmcfs_fill_ext_tree_error:\r\n	emmcfs_put_btree(sbi->extents_tree);\r\n\r\nemmcfs_fill_cat_tree_error:\r\n	emmcfs_put_btree(sbi->catalog_tree);\r\n\r\nemmcfs_build_snapshot_manager_error:\r\n	emmcfs_destroy_snapshot_manager(sbi);\r\n\r\nemmcfs_extended_sb_read_error:\r\nemmcfs_sb_read_error:\r\nemmcfs_parse_options_error:\r\n	destroy_super(sbi);\r\n	kfree(sbi);\r\n	EMMCFS_DEBUG_SB(\"finished with error = %d\", ret);\r\n	return ret;\r\n}\r\n','Object layer\nFSM layer\nSwitching  layer\nParser layer\n\nNo pre check\nLogging printk(KERN_INFO, EMMCFS_ERR, EMMCFS_DEBUG_SB\nPost check EMMCFS_ERR, -EINVAL, PTR_ERR\n','14','67','',''),
 (394720,'sb_set_blocksize()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394721,'super_block.s_op','S:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394722,'emmcfs_sops','g:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394723,'super_block.s_magic','S:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394724,'super_block.s_root','S:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394725,'d_alloc_root()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394726,'dput()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394727,'emmcfs_init_inode_once()','D:','/usr/src/linux-2.6.37/fs/emmcfs/super.c',1022,1027,'/**\r\n * @brief			Inode storage initialiser\r\n * @param [in,out] _inode	Inode for init\r\n * @return			void\r\n */\r\nstatic void emmcfs_init_inode_once(void *generic_inode)\r\n{\r\n	struct emmcfs_inode_info *inode = generic_inode;\r\n\r\n	inode_init_once(&inode->vfs_inode);\r\n}\r\n','interface of inode_init_once\n\nNo pre check\nNo logging\nNo post check\n','1','2','',''),
 (394728,'inode_init_once()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394729,'init_emmcfs_fs()','D:','/usr/src/linux-2.6.37/fs/emmcfs/super.c',1033,1053,'/**\r\n * @brief	Initialize of the emmcfs module\r\n * @return	Return 0 on success, errno on failure\r\n */\r\nstatic int __init init_emmcfs_fs(void)\r\n{\r\n	int ret;\r\n\r\n	emmcfs_inode_cachep = kmem_cache_create(\"emmcfs_icache\",\r\n				sizeof(struct emmcfs_inode_info), 0,\r\n				SLAB_HWCACHE_ALIGN, emmcfs_init_inode_once);\r\n	if (!emmcfs_inode_cachep) {\r\n		EMMCFS_ERR(\"failed to initialise inode cache\\n\");\r\n		return -ENOMEM;\r\n	}\r\n	ret = register_filesystem(&emmcfs_fs_type);\r\n	if (ret)\r\n		goto failed_register_fs;\r\n\r\n	return 0;\r\n\r\nfailed_register_fs:\r\n\r\n	return ret;\r\n}','FSM layer\n\nNo pre check\nLogging EMMCFS_ERR\nPost check -ENOMEM\n\n','3','10','',''),
 (394730,'emmcfs_init_inode_once','g:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394731,'register_filesystem()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394732,'emmcfs_fs_type','g:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394733,'exit_emmcfs_fs()','D:','/usr/src/linux-2.6.37/fs/emmcfs/super.c',1059,1063,'/**\r\n * @brief	Module unload callback\r\n * @return	void\r\n */\r\nstatic void __exit exit_emmcfs_fs(void)\r\n{\r\n	unregister_filesystem(&emmcfs_fs_type);\r\n	kmem_cache_destroy(emmcfs_inode_cachep);\r\n}','FSM layer\n\nNo pre check\nNo logging\nNo post check\n','1','2','',''),
 (394734,'unregister_filesystem()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394735,'*super_operations.alloc_inode()','D:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394736,'*super_operations.destroy_inode()','D:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394737,'*super_operations.write_inode()','D:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394738,'*super_operations.put_super()','D:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394739,'*super_operations.write_super()','D:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394740,'*super_operations.sync_fs()','D:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394741,'*super_operations.freeze_fs()','D:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394742,'*super_operations.statfs()','D:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394743,'*file_system_type.kill_sb()','D:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394744,'kill_block_super()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394745,'*__initcall_init_emmcfs_fs6()','D:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394746,'*__exitcall_exit_emmcfs_fs()','D:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'',''),
 (394747,'utf8_to_utf32()','F:',NULL,NULL,NULL,NULL,NULL,NULL,NULL,'','');
UNLOCK TABLES;
/*!40000 ALTER TABLE `element` ENABLE KEYS */;




/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
